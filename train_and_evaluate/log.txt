Namespace(output_ckpt_dir='/shared/dcli/lshu/BIRD/OmniSQL/train_and_evaluate/ckpts/FORMAT_qwencoder_7b_instruct_lr2e-5_epochs2_filter_domain_spider2_non_simple_moderate_130651/ckpt-510', multiple_models=False, source='bird', visible_devices='0,1', input_file='./data/dev_bird.json', eval_name='SFT_rl-format_130k_ckpt510_dev_bird', tensor_parallel_size=2, n=8, gold_file='./data/bird/dev_20240627/dev.json', db_path='./data/bird/dev_20240627/dev_databases', ts_db_path='', gold_result_dir=None, eval_standard=None)
  0%|          | 0/1 [00:00<?, ?it/s]Evaluating ckpt: 
Done: 11 0
Done: 0 0
Done: 20 0
Done: 21 0
Done: 10 0
Done: 7 1
Done: 24 0
Done: 12 0
Done: 2 1
Done: 8 1
Done: 22 0
Done: 1 0
Done: 18 1
Done: 9 1
Done: 3 1
Done: 30 0
Done: 31 0
Done: 34 0
Done: 19 1
Done: 16 0
Done: 5 1
Done: 6 0
Done: 17 0
Done: 15 0
Done: 25 0
Done: 42 0
Done: 36 0
Done: 37 1
Done: 44 1
Done: 26 0
Done: 40 0
Done: 13 1
Done: 35 1
Done: 43 0
Done: 33 0
Done: 29 1
Done: 54 0
Done: 38 1
Done: 41 0
Done: 14 1
Done: 39 1
Done: 51 0
Done: 46 0
Done: 45 1
Done: 47 1
Done: 32 1
Done: 4 1
Done: 56 1
Done: 53 0
Done: 48 1
Done: 52 1
Done: 55 1
Done: 59 1
Done: 58 0
Done: 50 1
Done: 57 1
Done: 74 0
Done: 76 0
Done: 28 0
Done: 60 1
Done: 23 0
Done: 61 1
Done: 64 1
Done: 65 0
Done: 75 0
Done: 27 0
Done: 73 0
Done: 81 0
Done: 80 0
Done: 86 0
Done: 70 0
Done: 71 0
Done: 67 1
Done: 69 1
Done: 68 0
Done: 66 0
Done: 62 1
Done: 77 0
Done: 78 0
Done: 83 0
Done: 87 0
Done: 79 1
Done: 72 1
Done: 85 0
Done: 63 0
Done: 88 1
Done: 103 1
Done: 82 0
Done: 91 0
Done: 105 1
Done: 92 1
Done: 99 1
Done: 89 1
Done: 94 0
Done: 90 0
Done: 93 0
Done: 100 1
Done: 97 1
Done: 98 0
Done: 96 1
Done: 107 0
Done: 112 0
Done: 117 1
Done: 118 0
Done: 115 1
Done: 109 0
Done: 111 1
Done: 122 1
Done: 113 1
Done: 119 1
Done: 123 1
Done: 114 0
Done: 121 1
Done: 125 0
Done: 130 0
Done: 124 0
Done: 133 0
Done: 131 0
Done: 126 1
Done: 134 1
Done: 136 0
Done: 132 0
Done: 137 0
Done: 138 0
Done: 142 0
Done: 139 1
Done: 143 1
Done: 140 1
Done: 145 0
Done: 146 0
Done: 147 0
Done: 148 1
Done: 149 0
Done: 49 0
Done: 152 0
Done: 153 0
Done: 95 0
Done: 155 1
Done: 154 1
Done: 158 0
Done: 157 1
Done: 159 0
Done: 160 1
Done: 161 1
Done: 156 1
Done: 162 1
Done: 164 0
Done: 163 0
Done: 166 1
Done: 127 1
Done: 167 0
Done: 168 0
Done: 171 0
Done: 172 0
Done: 169 0
Done: 120 1
Done: 84 0
Done: 174 1
Done: 175 1
Done: 177 0
Done: 176 0
Done: 178 1
Done: 180 0
Done: 182 0
Done: 181 1
Done: 183 0
Done: 184 1
Done: 185 0
Done: 186 0
Done: 188 0
Done: 187 1
Done: 190 1
Done: 189 0
Done: 191 1
Done: 128 0
Done: 193 0
Done: 194 0
Done: 195 1
Done: 196 0
Done: 198 0
Done: 199 0
Done: 200 1
Done: 201 0
Done: 202 1
Done: 203 1
Done: 204 1
Done: 197 0
Done: 206 1
Done: 205 0
Done: 208 1
Done: 207 0
Done: 209 1
Done: 211 0
Done: 212 0
Done: 213 1
Done: 210 0
Done: 214 0
Done: 216 1
Done: 215 0
Done: 217 0
Done: 218 0
Done: 219 0
Done: 220 0
Done: 222 1
Done: 221 0
Done: 224 1
Done: 223 0
Done: 225 0
Done: 226 1
Done: 227 1
Done: 228 1
Done: 229 1
Done: 230 1
Done: 231 0
Done: 232 0
Done: 234 0
Done: 235 1
Done: 233 0
Done: 237 0
Done: 236 1
Done: 238 0
Done: 240 1
Done: 241 1
Done: 239 0
Done: 242 1
Done: 244 0
Done: 243 0
Done: 245 0
Done: 246 0
Done: 247 0
Done: 248 0
Done: 249 0
Done: 250 0
Done: 252 0
Done: 253 0
Done: 251 0
Done: 255 1
Done: 256 1
Done: 257 1
Done: 258 0
Done: 173 0
Done: 260 1
Done: 192 0
Done: 261 1
Done: 262 1
Done: 259 1
Done: 264 0
Done: 266 1
Done: 265 1
Done: 268 1
Done: 267 0
Done: 270 1
Done: 271 0
Done: 272 1
Done: 135 0
Done: 274 1
Done: 273 0
Done: 275 0
Done: 269 0
Done: 277 1
Done: 279 1
Done: 278 0
Done: 280 1
Done: 263 0
Done: 281 0
Done: 282 0
Done: 104 1
Done: 283 1
Done: 285 0
Done: 287 0
Done: 288 0
Done: 289 0
Done: 286 0
Done: 165 0
Done: 291 1
Done: 150 0
Done: 276 1
Done: 290 1
Done: 129 0
Done: 296 0
Done: 294 0
Done: 299 0
Done: 295 1
Done: 301 1
Done: 293 1
Done: 300 0
Done: 303 0
Done: 298 0
Done: 302 0
Done: 307 1
Done: 304 0
Done: 309 0
Done: 310 0
Done: 308 0
Done: 306 0
Done: 312 1
Done: 313 1
Done: 314 1
Done: 315 1
Done: 316 1
Done: 318 1
Done: 320 1
Done: 317 0
Done: 319 1
Done: 322 1
Done: 321 0
Done: 323 1
Done: 325 1
Done: 326 0
Done: 328 1
Done: 327 1
Done: 292 0
Done: 330 0
Done: 329 1
Done: 331 1
Done: 284 0
Done: 297 1
Done: 334 1
Done: 333 1
Done: 336 0
Done: 332 0
Done: 337 1
Done: 335 0
Done: 339 1
Done: 338 0
Done: 110 0
Done: 151 1
Done: 305 0
Done: 324 0
Done: 311 0
Done: 102 0
Done: 170 1
Done: 144 0
Done: 141 0
Done: 353 1
Done: 179 0
Done: 106 1
Done: 108 0
Done: 101 0
Done: 116 0
Done: 344 0
Done: 356 1
Done: 355 1
Done: 341 0
Done: 354 0
Done: 359 0
Done: 343 0
Done: 357 0
Done: 358 1
Done: 340 0
Done: 348 1
Done: 347 0
Done: 349 0
Done: 342 0
Done: 345 1
Done: 346 1
Done: 361 0
Done: 363 0
Done: 360 0
Done: 362 1
Done: 352 0
Done: 350 0
Done: 351 1
Done: 368 1
Done: 373 1
Done: 374 0
Done: 372 1
Done: 375 1
Done: 366 1
Done: 364 1
Done: 387 0
Done: 388 0
Done: 377 0
Done: 379 1
Done: 376 0
Done: 380 1
Done: 378 1
Done: 367 1
Done: 370 1
Done: 371 1
Done: 365 1
Done: 369 1
Done: 383 1
Done: 385 1
Done: 389 0
Done: 404 1
Done: 390 1
Done: 405 0
Done: 400 1
Done: 386 0
Done: 382 1
Done: 381 1
Done: 392 0
Done: 396 1
Done: 395 1
Done: 401 1
Done: 394 1
Done: 393 0
Done: 398 0
Done: 397 1
Done: 402 0
Done: 414 1
Done: 417 1
Done: 408 0
Done: 413 0
Done: 409 1
Done: 399 0
Done: 426 0
Done: 427 1
Done: 428 0
Done: 429 0
Done: 410 1
Done: 415 0
Done: 432 0
Done: 391 1
Done: 434 1
Done: 421 1
Done: 419 1
Done: 418 1
Done: 424 0
Done: 423 0
Done: 420 1
Done: 439 1
Done: 438 0
Done: 441 0
Done: 442 0
Done: 443 0
Done: 411 0
Done: 422 1
Done: 407 0
Done: 431 0
Done: 433 0
Done: 430 0
Done: 447 0
Done: 425 0
Done: 406 0
Done: 435 0
Done: 436 0
Done: 450 1
Done: 446 0
Done: 453 1
Done: 451 1
Done: 437 0
Done: 452 1
Done: 412 0
Done: 416 0
Done: 403 0
Done: 384 1
Done: 467 1
Done: 468 1
Done: 454 0
Done: 456 1
Done: 455 1
Done: 471 1
Done: 472 1
Done: 474 1
Done: 459 1
Done: 440 0
Done: 449 0
Done: 445 0
Done: 448 0
Done: 444 0
Done: 469 0
Done: 457 1
Done: 463 0
Done: 462 1
Done: 461 1
Done: 458 0
Done: 460 1
Done: 466 1
Done: 475 1
Done: 465 0
Done: 470 1
Done: 473 0
Done: 464 1
Done: 489 1
Done: 490 1
Done: 493 1
Done: 492 1
Done: 491 1
Done: 488 1
Done: 498 0
Done: 497 1
Done: 496 1
Done: 499 0
Done: 502 1
Done: 505 1
Done: 506 0
Done: 477 1
Done: 478 1
Done: 479 1
Done: 476 1
Done: 509 1
Done: 507 0
Done: 513 1
Done: 494 0
Done: 485 1
Done: 495 1
Done: 501 1
Done: 504 1
Done: 486 1
Done: 500 0
Done: 503 1
Done: 519 0
Done: 523 0
Done: 522 1
Done: 483 0
Done: 525 0
Done: 510 1
Done: 487 1
Done: 512 1
Done: 508 1
Done: 511 0
Done: 529 0
Done: 531 1
Done: 533 0
Done: 535 1
Done: 532 1
Done: 534 1
Done: 536 0
Done: 539 0
Done: 515 0
Done: 526 1
Done: 524 1
Done: 521 1
Done: 537 1
Done: 538 1
Done: 480 1
Done: 482 0
Done: 484 0
Done: 481 1
Done: 549 1
Done: 550 1
Done: 530 0
Done: 517 0
Done: 514 0
Done: 527 1
Done: 556 0
Done: 553 1
Done: 558 1
Done: 559 0
Done: 551 1
Done: 552 1
Done: 554 1
Done: 548 1
Done: 547 1
Done: 544 0
Done: 546 1
Done: 545 0
Done: 540 0
Done: 528 1
Done: 568 1
Done: 566 1
Done: 560 1
Done: 569 1
Done: 541 0
Done: 557 1
Done: 555 1
Done: 542 1
Done: 543 1
Done: 520 0
Done: 574 1
Done: 580 1
Done: 570 1
Done: 516 1
Done: 572 1
Done: 571 0
Done: 586 0
Done: 585 1
Done: 575 1
Done: 581 0
Done: 582 0
Done: 567 1
Done: 578 1
Done: 589 1
Done: 593 0
Done: 590 1
Done: 591 1
Done: 583 1
Done: 592 1
Done: 599 0
Done: 600 0
Done: 601 1
Done: 598 0
Done: 597 1
Done: 603 0
Done: 565 0
Done: 594 0
Done: 563 1
Done: 254 0
Done: 605 0
Done: 573 1
Done: 576 0
Done: 561 1
Done: 577 0
Done: 606 1
Done: 564 1
Done: 562 1
Done: 604 1
Done: 610 0
Done: 609 1
Done: 602 0
Done: 616 0
Done: 588 1
Done: 620 1
Done: 611 1
Done: 615 1
Done: 614 1
Done: 619 1
Done: 624 1
Done: 627 1
Done: 625 1
Done: 626 1
Done: 628 0
Done: 629 1
Done: 618 1
Done: 613 1
Done: 612 1
Done: 623 1
Done: 622 1
Done: 621 1
Done: 579 1
Done: 587 0
Done: 584 0
Done: 642 0
Done: 643 1
Done: 641 1
Done: 638 1
Done: 632 0
Done: 607 1
Done: 608 0
Done: 595 0
Done: 633 0
Done: 630 0
Done: 631 0
Done: 634 0
Done: 617 1
Done: 647 1
Done: 637 0
Done: 635 0
Done: 650 0
Done: 639 0
Done: 651 1
Done: 644 1
Done: 662 0
Done: 652 0
Done: 654 1
Done: 659 1
Done: 657 1
Done: 661 0
Done: 663 1
Done: 648 1
Done: 640 0
Done: 655 0
Done: 664 0
Done: 666 1
Done: 669 1
Done: 665 1
Done: 673 0
Done: 671 1
Done: 656 0
Done: 658 1
Done: 677 0
Done: 675 1
Done: 674 1
Done: 676 1
Done: 668 1
Done: 645 1
Done: 667 0
Done: 653 0
Done: 681 0
Done: 636 0
Done: 682 0
Done: 683 0
Done: 684 1
Done: 660 1
Done: 672 0
Done: 670 1
Done: 678 1
Done: 689 0
Done: 691 1
Done: 680 1
Done: 688 1
Done: 679 0
Done: 649 0
Done: 692 0
Done: 690 1
Done: 700 1
Done: 704 1
Done: 699 1
Done: 686 0
Done: 695 1
Done: 703 0
Done: 696 0
Done: 697 0
Done: 702 1
Done: 713 0
Done: 705 1
Done: 717 1
Done: 718 1
Done: 719 1
Done: 716 1
Done: 720 0
Done: 721 1
Done: 722 1
Done: 723 1
Done: 724 1
Done: 725 1
Done: 726 0
Done: 727 1
Done: 729 1
Done: 728 0
Done: 731 1
Done: 732 1
Done: 733 1
Done: 734 1
Done: 735 1
Done: 736 0
Done: 737 1
Done: 694 0
Done: 739 1
Done: 740 1
Done: 741 1
Done: 742 1
Done: 743 0
Done: 715 1
Done: 744 1
Done: 745 0
Done: 746 1
Done: 747 1
Done: 748 1
Done: 750 1
Done: 749 1
Done: 751 1
Done: 752 1
Done: 753 1
Done: 755 1
Done: 754 1
Done: 756 0
Done: 757 1
Done: 758 0
Done: 759 1
Done: 760 1
Done: 761 1
Done: 763 1
Done: 711 0
Done: 698 0
Done: 764 1
Done: 762 1
Done: 765 0
Done: 767 0
Done: 766 0
Done: 768 1
Done: 770 1
Done: 772 0
Done: 773 1
Done: 771 1
Done: 687 0
Done: 769 0
Done: 774 1
Done: 775 1
Done: 776 1
Done: 714 1
Done: 777 1
Done: 779 1
Done: 780 1
Done: 778 1
Done: 781 1
Done: 782 1
Done: 784 1
Done: 785 1
Done: 783 1
Done: 790 1
Done: 787 1
Done: 789 1
Done: 788 0
Done: 791 0
Done: 786 1
Done: 793 1
Done: 795 1
Done: 797 1
Done: 792 1
Done: 796 1
Done: 799 1
Done: 798 1
Done: 802 0
Done: 801 1
Done: 800 1
Done: 794 0
Done: 803 0
Done: 804 1
Done: 806 1
Done: 805 0
Done: 808 1
Done: 809 1
Done: 812 0
Done: 807 1
Done: 814 1
Done: 810 0
Done: 811 1
Done: 813 1
Done: 815 1
Done: 818 0
Done: 817 0
Done: 816 1
Done: 819 0
Done: 822 1
Done: 823 1
Done: 820 1
Done: 821 1
Done: 827 1
Done: 826 1
Done: 824 1
Done: 828 1
Done: 829 1
Done: 825 1
Done: 831 1
Done: 832 0
Done: 833 1
Done: 830 1
Done: 834 1
Done: 835 0
Done: 836 1
Done: 838 1
Done: 839 1
Done: 841 1
Done: 837 1
Done: 842 1
Done: 840 1
Done: 844 1
Done: 845 1
Done: 843 1
Done: 708 0
Done: 851 0
Done: 850 1
Done: 849 0
Done: 852 0
Done: 848 1
Done: 853 1
Done: 847 1
Done: 846 0
Done: 854 1
Done: 857 1
Done: 855 0
Done: 856 1
Done: 858 0
Done: 707 1
Done: 863 1
Done: 859 1
Done: 866 0
Done: 860 0
Done: 861 0
Done: 693 0
Done: 868 1
Done: 709 0
Done: 869 1
Done: 871 0
Done: 872 0
Done: 870 1
Done: 730 1
Done: 876 0
Done: 875 1
Done: 878 0
Done: 865 0
Done: 867 1
Done: 864 1
Done: 882 0
Done: 884 0
Done: 862 1
Done: 883 0
Done: 885 1
Done: 887 0
Done: 886 1
Done: 888 0
Done: 890 0
Done: 889 0
Done: 873 1
Done: 874 1
Done: 877 0
Done: 881 1
Done: 898 0
Done: 900 1
Done: 899 0
Done: 706 1
Done: 880 0
Done: 879 1
Done: 901 1
Done: 738 1
Done: 907 0
Done: 891 0
Done: 893 0
Done: 909 0
Done: 910 1
Done: 912 1
Done: 911 1
Done: 913 0
Done: 914 1
Done: 896 0
Done: 892 0
Done: 915 0
Done: 917 1
Done: 916 0
Done: 918 1
Done: 685 0
Done: 919 1
Done: 922 0
Done: 921 0
Done: 920 1
Done: 902 0
Done: 925 1
Done: 924 0
Done: 923 1
Done: 905 0
Done: 906 0
Done: 710 0
Done: 897 0
Done: 712 1
Done: 934 1
Done: 928 0
Done: 935 1
Done: 927 1
Done: 926 1
Done: 931 1
Done: 933 1
Done: 930 0
Done: 944 0
Done: 929 1
Done: 932 1
Done: 946 1
Done: 945 0
Done: 947 1
Done: 936 0
Done: 950 1
Done: 948 1
Done: 949 0
Done: 937 0
Done: 940 1
Done: 943 0
Done: 951 0
Done: 955 0
Done: 939 1
Done: 941 1
Done: 959 0
Done: 942 0
Done: 952 0
Done: 938 1
Done: 961 1
Done: 960 1
Done: 956 0
Done: 964 0
Done: 958 0
Done: 965 1
Done: 962 0
Done: 954 0
Done: 953 1
Done: 968 1
Done: 967 0
Done: 969 1
Done: 971 1
Done: 957 1
Done: 978 0
Done: 980 1
Done: 977 1
Done: 982 0
Done: 979 0
Done: 974 1
Done: 981 0
Done: 972 1
Done: 966 0
Done: 983 0
Done: 988 0
Done: 984 0
Done: 991 1
Done: 987 1
Done: 992 0
Done: 993 0
Done: 989 0
Done: 996 0
Done: 990 1
Done: 997 1
Done: 994 0
Done: 1000 0
Done: 998 0
Done: 999 1
Done: 1001 0
Done: 995 0
Done: 1005 1
Done: 1003 1
Done: 1004 0
Done: 1007 1
Done: 1009 0
Done: 1008 1
Done: 908 0
Done: 1012 0
Done: 1002 0
Done: 1013 0
Done: 904 0
Done: 895 1
Done: 975 0
Done: 1018 1
Done: 985 0
Done: 976 0
Done: 1017 0
Done: 986 0
Done: 894 0
Done: 1019 1
Done: 903 0
Done: 1010 0
Done: 970 0
Done: 1021 0
Done: 1029 0
Done: 963 1
Done: 1022 0
Done: 1024 0
Done: 1023 0
Done: 1033 1
Done: 1020 1
Done: 1035 1
Done: 1036 1
Done: 1037 0
Done: 1031 0
Done: 1027 0
Done: 1041 0
Done: 1042 0
Done: 1043 1
Done: 1044 1
Done: 1039 1
Done: 1046 1
Done: 1047 1
Done: 1006 0
Done: 1045 1
Done: 1040 0
Done: 1034 0
Done: 1011 0
Done: 1053 1
Done: 1048 1
Done: 1051 1
Done: 1056 1
Done: 1052 0
Done: 1050 1
Done: 1054 1
Done: 1059 1
Done: 1061 0
Done: 1028 0
Done: 1030 1
Done: 1026 0
Done: 1055 1
Done: 1025 0
Done: 1032 0
Done: 1038 1
Done: 1067 1
Done: 1065 1
Done: 1066 1
Done: 1070 1
Done: 1071 1
Done: 1060 1
Done: 1069 1
Done: 1016 0
Done: 1077 1
Done: 1078 0
Done: 1062 1
Done: 1079 1
Done: 1081 1
Done: 1075 0
Done: 1082 1
Done: 1064 0
Done: 1063 1
Done: 1072 1
Done: 1080 1
Done: 1058 0
Done: 1076 1
Done: 1084 1
Done: 1087 0
Done: 1083 1
Done: 1088 1
Done: 1085 0
Done: 1095 1
Done: 1014 0
Done: 1086 1
Done: 1090 0
Done: 1098 1
Done: 1049 1
Done: 1093 0
Done: 1096 1
Done: 1097 1
Done: 1100 1
Done: 1099 1
Done: 1094 0
Done: 1102 1
Done: 1057 1
Done: 1108 0
Done: 1106 1
Done: 1111 0
Done: 1112 0
Done: 1113 0
Done: 1103 1
Done: 1104 1
Done: 1116 1
Done: 1117 1
Done: 1115 0
Done: 1068 0
Done: 646 0
Done: 1118 0
Done: 1074 1
Done: 1073 1
Done: 1114 0
Done: 1122 0
Done: 1125 1
Done: 1091 1
Done: 1089 1
Done: 1109 0
Done: 1110 0
Done: 1124 1
Done: 1130 1
Done: 1129 1
Done: 1133 1
Done: 1132 1
Done: 1105 0
Done: 1135 0
Done: 1138 1
Done: 1123 1
Done: 1134 0
Done: 1141 1
Done: 1137 1
Done: 1136 0
Done: 1140 1
Done: 1101 0
Done: 1131 0
Done: 1144 0
Done: 1092 0
Done: 1149 0
Done: 1150 1
Done: 1151 1
Done: 1152 0
Done: 1153 1
Done: 1154 1
Done: 1155 1
Done: 1156 1
Done: 1157 0
Done: 1158 1
Done: 1147 1
Done: 1127 0
Done: 1161 0
Done: 1162 1
Done: 1163 0
Done: 1164 1
Done: 1159 1
Done: 1128 0
Done: 1166 0
Done: 1168 0
Done: 1167 0
Done: 1170 0
Done: 1160 1
Done: 1171 0
Done: 1165 1
Done: 1173 0
Done: 1174 1
Done: 1172 0
Done: 1169 1
Done: 1176 1
Done: 1177 0
Done: 1178 0
Done: 1142 0
Done: 1179 0
Done: 1182 0
Done: 1183 1
Done: 1184 1
Done: 1185 0
Done: 1186 0
Done: 1139 1
Done: 1181 1
Done: 1180 1
Done: 1189 0
Done: 1126 0
Done: 1191 0
Done: 1188 0
Done: 1192 0
Done: 1194 1
Done: 1193 1
Done: 1196 1
Done: 1197 0
Done: 1198 1
Done: 1175 0
Done: 1200 0
Done: 1201 1
Done: 1202 0
Done: 1195 1
Done: 1204 0
Done: 1205 0
Done: 1206 1
Done: 1190 1
Done: 1187 1
Done: 1143 1
Done: 1208 1
Done: 1145 1
Done: 1213 0
Done: 1210 1
Done: 1209 1
Done: 1199 0
Done: 1203 0
Done: 1119 0
Done: 1211 0
Done: 1214 1
Done: 1207 0
Done: 1148 0
Done: 1224 0
Done: 1216 0
Done: 1222 1
Done: 1221 1
Done: 1120 0
Done: 1212 1
Done: 1220 1
Done: 1215 0
Done: 1223 0
Done: 1121 0
Done: 1217 0
Done: 1227 1
Done: 1226 0
Done: 1228 1
Done: 1231 1
Done: 1146 0
Done: 1237 0
Done: 1218 0
Done: 1238 0
Done: 1225 0
Done: 1230 1
Done: 1232 1
Done: 1233 0
Done: 1235 0
Done: 1245 0
Done: 1240 1
Done: 1241 0
Done: 1219 0
Done: 1229 1
Done: 1243 0
Done: 1246 1
Done: 1252 0
Done: 1250 0
Done: 1239 1
Done: 1234 0
Done: 1244 1
Done: 1248 0
Done: 1236 1
Done: 1242 0
Done: 1253 0
Done: 1261 0
Done: 1262 0
Done: 1258 0
Done: 1249 0
Done: 1255 0
Done: 1264 0
Done: 1263 1
Done: 1267 0
Done: 1254 0
Done: 1268 0
Done: 1256 0
Done: 1269 0
Done: 1270 0
Done: 1272 0
Done: 1247 0
Done: 1274 0
Done: 1251 0
Done: 1280 1
Done: 1275 0
Done: 1266 1
Done: 1260 1
Done: 1259 1
Done: 1257 1
Done: 1277 1
Done: 1285 0
Done: 1279 0
Done: 1278 1
Done: 1290 0
Done: 1276 0
Done: 1273 0
Done: 1292 0
Done: 1294 0
Done: 1265 0
Done: 1289 0
Done: 1283 1
Done: 1297 1
Done: 1295 0
Done: 1296 1
Done: 1298 0
Done: 1287 1
Done: 1293 1
Done: 1286 1
Done: 1288 1
Done: 1281 0
Done: 1300 0
Done: 1284 0
Done: 1291 1
Done: 1299 1
Done: 1302 1
Done: 1271 0
Done: 1309 0
Done: 1311 1
Done: 1304 1
Done: 1312 1
Done: 1313 0
Done: 1314 0
Done: 1306 0
Done: 1310 1
Done: 1308 0
Done: 1315 0
Done: 1317 0
Done: 1319 1
Done: 1301 1
Done: 1318 0
Done: 1320 1
Done: 1305 1
Done: 1303 1
Done: 1307 0
Done: 1316 1
Done: 1325 1
Done: 1321 0
Done: 1324 1
Done: 1323 1
Done: 1322 0
Done: 1328 1
Done: 1326 1
Done: 1327 0
Done: 1329 1
Done: 1331 1
Done: 1330 1
Done: 1335 1
Done: 1336 0
Done: 1332 0
Done: 1338 0
Done: 1333 1
Done: 1337 1
Done: 1339 1
Done: 1341 1
Done: 1342 0
Done: 1344 1
Done: 1343 1
Done: 1340 0
Done: 1334 0
Done: 1345 1
Done: 1346 1
Done: 1349 1
Done: 1282 0
Done: 1347 1
Done: 1348 1
Done: 1353 1
Done: 1351 1
Done: 1350 0
Done: 1354 1
Done: 1356 1
Done: 1352 1
Done: 1357 1
Done: 1355 1
Done: 1358 0
Done: 1360 0
Done: 1365 0
Done: 1364 1
Done: 1359 0
Done: 1363 1
Done: 1361 1
Done: 1367 0
Done: 1368 1
Done: 1369 1
Done: 1370 0
Done: 1366 0
Done: 1372 1
Done: 1371 1
Done: 1377 1
Done: 1374 1
Done: 1378 1
Done: 1379 1
Done: 1375 1
Done: 1376 1
Done: 1373 1
Done: 1380 1
Done: 1384 0
Done: 1385 0
Done: 1386 0
Done: 1382 1
Done: 1381 0
Done: 1389 0
Done: 1387 0
Done: 1392 1
Done: 1391 0
Done: 1393 1
Done: 1388 0
Done: 1383 0
Done: 1396 0
Done: 1390 1
Done: 1395 1
Done: 1394 1
Done: 1397 1
Done: 1402 1
Done: 1399 0
Done: 1398 1
Done: 1400 1
Done: 1404 0
Done: 1407 0
Done: 1403 1
Done: 1401 1
Done: 1406 0
Done: 1411 1
Done: 1408 1
Done: 1405 1
Done: 1409 1
Done: 1412 1
Done: 1413 1
Done: 1415 1
Done: 1414 1
Done: 1410 0
Done: 1417 1
Done: 1419 1
Done: 1418 1
Done: 1420 1
Done: 1416 1
Done: 1422 1
Done: 1421 0
Done: 1423 1
Done: 1424 1
Done: 1425 1
Done: 1426 0
Done: 1427 0
Done: 1428 1
Done: 1430 1
Done: 1432 1
Done: 1429 1
Done: 1435 1
Done: 1431 1
Done: 1436 0
Done: 1438 0
Done: 1439 1
Done: 1441 0
Done: 1440 1
Done: 1437 0
Done: 1442 1
Done: 1443 1
Done: 1445 0
Done: 1447 1
Done: 1444 0
Done: 1448 0
Done: 1449 1
Done: 1453 0
Done: 1452 0
Done: 1456 0
Done: 1454 0
Done: 1451 0
Done: 1455 0
Done: 1450 0
Done: 1457 1
Done: 1458 0
Done: 1460 1
Done: 1362 1
Done: 1462 1
Done: 1463 1
Done: 1461 1
Done: 1459 1
Done: 1466 1
Done: 1465 1
Done: 1464 0
Done: 1468 1
Done: 1467 0
Done: 1469 1
Done: 1434 1
Done: 1446 1
Done: 1474 0
Done: 1433 0
Done: 1470 1
Done: 1484 1
Done: 1471 0
Done: 1485 1
Done: 1486 0
Done: 1487 0
Done: 1483 1
Done: 1491 0
Done: 1492 0
Done: 1489 1
Done: 1494 0
Done: 1477 0
Done: 1493 1
Done: 1490 1
Done: 1496 0
Done: 1495 1
Done: 1480 0
Done: 1500 1
Done: 1476 1
Done: 1502 1
Done: 1473 1
Done: 1501 1
Done: 1504 1
Done: 1506 1
Done: 1507 1
Done: 1508 1
Done: 1503 0
Done: 1511 0
Done: 1510 0
Done: 1509 1
Done: 1482 0
Done: 1512 0
Done: 1515 1
Done: 1514 1
Done: 1513 1
Done: 1518 1
Done: 1516 1
Done: 1519 1
Done: 1521 1
Done: 1520 0
Done: 1517 0
Done: 1524 0
Done: 1523 1
Done: 1527 0
Done: 1528 0
Done: 1525 0
Done: 1530 0
Done: 1107 0
Done: 1532 1
Done: 1533 0
Done: 1478 1
Done: 1522 0
Done: 1529 0
Done: 1526 0
Done: 1531 0
Done: 1497 1
Done: 1505 0
Done: 1488 1
Done: 1475 0
Done: 1472 1
Done: 1499 0
Done: 1479 0
Done: 1498 0
Done: 596 0
Done: 1481 0
Done: 518 0
Done: 701 0
Done: 973 0
Done: 1015 0
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
question: What is the highest eligible free rate for K-12 students in the schools in Alameda County?
GT: SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Alameda' ORDER BY (CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1
Pred: SELECT 
    MAX((Free_Meal_Count_K_12 / Enrollment_K_12) AS Eligible_Free_Rate
FROM 
    frpm
WHERE 
    County_Name = 'Alameda';
------------------------------
question: Please list the lowest three eligible free rates for students aged 5-17 in continuation schools.
GT: SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` FROM frpm WHERE `Educational Option Type` = 'Continuation School' AND `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` IS NOT NULL ORDER BY `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` ASC LIMIT 3
Pred: SELECT 
    f.CDSCode,
    f."County Name",
    f."District Name",
    f."School Name",
    (f."Free Meal Count (Ages 5-17)" / f."Enrollment (Ages 5-17)") AS EligibleFreeRate
FROM 
    frpm f
INNER JOIN 
    schools s ON f.CDSCode = s.CDSCode
WHERE 
    s.EdOpsName = 'Continuation School'
ORDER BY 
    EligibleFreeRate ASC
LIMIT 3;
------------------------------
question: Among the schools with the SAT test takers of over 500, please list the schools that are magnet schools or offer a magnet program.
GT: SELECT T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Magnet = 1 AND T1.NumTstTakr > 500
Pred: SELECT s.School
FROM schools s
INNER JOIN satscores ss ON s.CDSCode = ss.cds
WHERE (s.Magnet = 1 OR s.Magnet = 0) AND ss.NumTstTakr > 500;
------------------------------
question: For the school with the highest average score in Reading in the SAT test, what is its FRPM count for students aged 5-17?
GT: SELECT T2.`FRPM Count (Ages 5-17)` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrRead DESC LIMIT 1
Pred: SELECT f."FRPM Count (Ages 5-17)"
FROM frpm f
JOIN satscores s ON f."CDSCode" = s.cds
WHERE s."AvgScrRead" = (
    SELECT MAX("AvgScrRead")
    FROM satscores
);
------------------------------
question: Please list the codes of the schools with a total enrollment of over 500.
GT: SELECT T2.CDSCode FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` + T2.`Enrollment (Ages 5-17)` > 500
Pred: SELECT 
    CDSCode
FROM 
    frpm
WHERE 
    (Enrollment (K-12) + Enrollment (Ages 5-17)) > 500;
------------------------------
question: Among the schools with an SAT excellence rate of over 0.3, what is the highest eligible free rate for students aged 5-17?
GT: SELECT MAX(CAST(T1.`Free Meal Count (Ages 5-17)` AS REAL) / T1.`Enrollment (Ages 5-17)`) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr > 0.3
Pred: WITH SchoolPerformance AS (
    SELECT 
        s.cds,
        s.sname,
        s.dname,
        s.cname,
        s.enroll12,
        s.NumTstTakr,
        s.AvgScrRead,
        s.AvgScrMath,
        s.AvgScrWrite,
        s.NumGE1500,
        f."Free Meal Count (Ages 5-17)" AS free_meal_count_5_17,
        f."Enrollment (Ages 5-17)" AS enrollment_5_17,
        (s.NumGE1500 / s.NumTstTakr) AS sat_excellence_rate,
        (f."Free Meal Count (Ages 5-17)" / f."Enrollment (Ages 5-17)") AS eligible_free_rate_5_17
    FROM 
        satscores s
    JOIN 
        frpm f ON s.cds = f.CDSCode
)
SELECT 
    MAX(eligible_free_rate_5_17) AS highest_eligible_free_rate_5_17
FROM 
    SchoolPerformance
WHERE 
    sat_excellence_rate > 0.3;
------------------------------
question: Which active district has the highest average score in Reading?
GT: SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' ORDER BY T2.AvgScrRead DESC LIMIT 1
Pred: WITH ActiveDistricts AS (
    SELECT 
        CDSCode,
        District
    FROM 
        schools
    WHERE 
        StatusType = 'Active'
),
DistrictReadingScores AS (
    SELECT 
        ad.District,
        AVG(ss.AvgScrRead) AS AvgReadingScore
    FROM 
        ActiveDistricts ad
    INNER JOIN 
        satscores ss ON ad.CDSCode = ss.cds
    GROUP BY 
        ad.District
)
SELECT 
    District
FROM 
    DistrictReadingScores
ORDER BY 
    AvgReadingScore DESC
LIMIT 1;
------------------------------
question: How many schools in merged Alameda have number of test takers less than 100?
GT: SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Merged' AND T2.NumTstTakr < 100 AND T1.County = 'Lake'
Pred: SELECT COUNT(schools.CDSCode) AS TotalSchools
FROM schools
INNER JOIN satscores ON schools.CDSCode = satscores.cds
WHERE schools.County = 'Alameda'
  AND schools.StatusType = 'Merged'
  AND satscores.NumTstTakr < 100;
------------------------------
question: Rank schools by their average score in Writing where the score is greater than 499, showing their charter numbers.
GT: SELECT CharterNum, AvgScrWrite, RANK() OVER (ORDER BY AvgScrWrite DESC) AS WritingScoreRank FROM schools AS T1  INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrWrite > 499 AND CharterNum is not null
Pred: SELECT 
    s.CDSCode,
    s.CharterNum,
    ss.AvgScrWrite,
    RANK() OVER (ORDER BY ss.AvgScrWrite DESC) AS rank
FROM 
    schools s
JOIN 
    satscores ss ON s.CDSCode = ss.cds
WHERE 
    s.CharterNum IS NOT NULL AND ss.AvgScrWrite > 499;
------------------------------
question: How many schools in Amador which the Low Grade is 9 and the High Grade is 12?
GT: SELECT COUNT(T1.`School Name`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Amador' AND T1.`Low Grade` = 9 AND T1.`High Grade` = 12
Pred: SELECT COUNT(CDSCode) AS SchoolCount
FROM frpm
WHERE CountyName = 'Amador'
  AND LowGrade = '9'
  AND HighGrade = '12';
------------------------------
question: In Los Angeles how many schools have more than 500 free meals but less than 700 free or reduced price meals for K-12?
GT: SELECT COUNT(CDSCode) FROM frpm WHERE `County Name` = 'Los Angeles' AND `Free Meal Count (K-12)` > 500 AND `FRPM Count (K-12)`< 700
Pred: SELECT 
    COUNT(*) AS TotalSchools
FROM 
    frpm
WHERE 
    County Name = 'Los Angeles'
    AND Free Meal Count (K-12) > 500
    AND FRPM Count (K-12) < 700;
------------------------------
question: Which school in Contra Costa has the highest number of test takers?
GT: SELECT sname FROM satscores WHERE cname = 'Contra Costa' AND sname IS NOT NULL ORDER BY NumTstTakr DESC LIMIT 1
Pred: SELECT 
    s.School
FROM 
    schools s
JOIN 
    satscores ss ON s.CDSCode = ss.cds
WHERE 
    s.County = 'Contra Costa'
ORDER BY 
    ss.NumTstTakr DESC
LIMIT 1;
------------------------------
question: List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools.
GT: SELECT T1.School, T1.Street FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)` > 30
Pred: SELECT 
    f."School Name" AS SchoolName,
    s."Street" || ', ' || s."City" || ', ' || s."State" || ' ' || s."Zip" AS FullStreetAddress
FROM 
    frpm f
JOIN 
    schools s ON f."CDSCode" = s."CDSCode"
WHERE 
    (f."Enrollment (K-12)" - f."Enrollment (Ages 5-17)") > 30
ORDER BY 
    (f."Enrollment (K-12)" - f."Enrollment (Ages 5-17)") DESC;
------------------------------
question: Give the names of the schools with the percent eligible for free meals in K-12 is more than 0.1 and test takers whose test score is greater than or equal to 1500?
GT: SELECT T2.`School Name` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE CAST(T2.`Free Meal Count (K-12)` AS REAL) / T2.`Enrollment (K-12)` > 0.1 AND T1.NumGE1500 > 0
Pred: SELECT 
    f.School_Name
FROM 
    frpm f
INNER JOIN 
    satscores s ON f.CDSCode = s.cds
WHERE 
    f."Percent (%) Eligible Free (K-12)" > 0.1
    AND s.NumGE1500 > 0;
------------------------------
question: Name schools in Riverside which the average of average math score for SAT is grater than 400, what is the funding type of these schools?
GT: SELECT T1.sname, T2.`Charter Funding Type` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T2.`District Name` LIKE 'Riverside%' GROUP BY T1.sname, T2.`Charter Funding Type` HAVING CAST(SUM(T1.AvgScrMath) AS REAL) / COUNT(T1.cds) > 400
Pred: WITH SchoolSAT AS (
    SELECT 
        s.CDSCode,
        s.School,
        s.FundingType,
        AVG(ss.AvgScrMath) AS AvgMathScore
    FROM 
        schools s
    INNER JOIN 
        satscores ss ON s.CDSCode = ss.cds
    WHERE 
        s.County = 'Riverside'
    GROUP BY 
        s.CDSCode, s.School, s.FundingType
)
SELECT 
    School,
    FundingType
FROM 
    SchoolSAT
WHERE 
    AvgMathScore > 400;
------------------------------
question: State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17?
GT: SELECT T1.`School Name`, T2.Street, T2.City, T2.State, T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Monterey' AND T1.`Free Meal Count (Ages 5-17)` > 800 AND T1.`School Type` = 'High Schools (Public)'
Pred: SELECT 
    s.School AS SchoolName,
    s.Street,
    s.City,
    s.State,
    s.Zip
FROM 
    schools s
INNER JOIN 
    frpm f ON s.CDSCode = f.CDSCode
WHERE 
    s.EILName = 'High School'
    AND s.County = 'Monterey'
    AND f."FRPM Count (Ages 5-17)" > 800;
------------------------------
question: What is the average score in writing for the schools that were opened after 1991 or closed before 2000? List the school names along with the score. Also, list the communication number of the schools if there is any.
GT: SELECT T2.School, T1.AvgScrWrite, T2.Phone FROM schools AS T2 LEFT JOIN satscores AS T1 ON T2.CDSCode = T1.cds WHERE strftime('%Y', T2.OpenDate) > '1991' OR strftime('%Y', T2.ClosedDate) < '2000'
Pred: SELECT 
    s.School AS SchoolName,
    ss.AvgScrWrite AS AverageWritingScore,
    s.Phone AS CommunicationNumber
FROM 
    schools s
JOIN 
    satscores ss ON s.CDSCode = ss.cds
WHERE 
    (s.OpenDate > '1991-01-01' OR s.ClosedDate < '2000-12-31')
ORDER BY 
    ss.AvgScrWrite DESC;
------------------------------
question: Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.
GT: SELECT T2.School, T2.DOC FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Locally funded')
Pred: SELECT 
    s.School, 
    s.DOCType
FROM 
    schools s
JOIN 
    frpm f ON s.CDSCode = f.CDSCode
WHERE 
    s.FundingType = 'Locally funded'
    AND (f."Enrollment (K-12)" - f."Enrollment (Ages 5-17)") > (
        SELECT 
            AVG(f2."Enrollment (K-12)" - f2."Enrollment (Ages 5-17)")
        FROM 
            frpm f2
        JOIN 
            schools s2 ON f2.CDSCode = s2.CDSCode
        WHERE 
            s2.FundingType = 'Locally funded'
    );
------------------------------
question: Which cities have the top 5 lowest enrollment number for students in grades 1 through 12?
GT: SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode GROUP BY T2.City ORDER BY SUM(T1.`Enrollment (K-12)`) ASC LIMIT 5
Pred: WITH RankedCities AS (
    SELECT 
        City,
        ROW_NUMBER() OVER (ORDER BY "Enrollment (K-12)" ASC) AS rank
    FROM 
        frpm
    WHERE 
        "Enrollment (K-12)" IS NOT NULL
)
SELECT 
    City
FROM 
    RankedCities
WHERE 
    rank <= 5;
------------------------------
question: What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12?
GT: SELECT CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)` FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 9, 2
Pred: WITH RankedSchools AS (
    SELECT 
        CDSCode,
        School_Name,
        Enrollment_K_12,
        Free_Meal_Count_K_12,
        (Free_Meal_Count_K_12 / Enrollment_K_12) AS Eligible_Free_Rate,
        ROW_NUMBER() OVER (ORDER BY Enrollment_K_12 DESC) AS Rank
    FROM 
        frpm
)
SELECT 
    School_Name,
    Eligible_Free_Rate
FROM 
    RankedSchools
WHERE 
    Rank IN (10, 11)
ORDER BY 
    Rank;
------------------------------
question: If there are any, what are the websites address of the schools with a free meal count of 1,900-2,000 to students aged 5-17? Include the name of the school.
GT: SELECT T2.Website, T1.`School Name` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000 AND T2.Website IS NOT NULL
Pred: SELECT s.Website, s.School
FROM schools s
INNER JOIN frpm f ON s.CDSCode = f.CDSCode
WHERE f."Free Meal Count (Ages 5-17)" BETWEEN 1900 AND 2000;
------------------------------
question: What is the free rate for students between the ages of 5 and 17 at the school run by Kacey Gibson?
GT: SELECT CAST(T2.`Free Meal Count (Ages 5-17)` AS REAL) / T2.`Enrollment (Ages 5-17)` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.AdmFName1 = 'Kacey' AND T1.AdmLName1 = 'Gibson'
Pred: SELECT 
    f.CDSCode,
    f.AcademicYear,
    f.CountyName,
    f.DistrictName,
    f.SchoolName,
    f.EnrollmentAges5to17,
    f.FreeMealCountAges5to17,
    (f.FreeMealCountAges5to17 / f.EnrollmentAges5to17) AS FreeRateAges5to17
FROM 
    frpm f
INNER JOIN 
    schools s ON f.CDSCode = s.CDSCode
WHERE 
    s.AdmFName1 = 'Kacey' AND s.AdmLName1 = 'Gibson';
------------------------------
question: Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names.
GT: SELECT T2.AdmFName1, T2.AdmLName1, T2.AdmFName2, T2.AdmLName2, T2.AdmFName3, T2.AdmLName3 FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1
Pred: SELECT 
    s.AdmFName1 || ' ' || s.AdmLName1 AS Admin1,
    s.AdmFName2 || ' ' || s.AdmLName2 AS Admin2,
    s.AdmFName3 || ' ' || s.AdmLName3 AS Admin3
FROM 
    schools s
JOIN 
    satscores ss ON s.CDSCode = ss.cds
WHERE 
    ss.NumGE1500 > 0
ORDER BY 
    ss.NumGE1500 DESC
LIMIT 1;
------------------------------
question: What is the telephone number for the school with the lowest average score in reading in Fresno Unified?
GT: SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.District = 'Fresno Unified' AND T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1
Pred: SELECT s.Phone
FROM schools s
JOIN satscores ss ON s.CDSCode = ss.cds
WHERE ss.dname = 'Fresno Unified'
ORDER BY ss.AvgScrRead ASC
LIMIT 1;
------------------------------
question: List the names of virtual schools that are among the top 5 in their respective counties based on average reading scores.
GT: SELECT School FROM (SELECT T2.School,T1.AvgScrRead, RANK() OVER (PARTITION BY T2.County ORDER BY T1.AvgScrRead DESC) AS rnk FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' ) ranked_schools WHERE rnk <= 5
Pred: WITH RankedSchools AS (
    SELECT 
        s.School,
        ss.AvgScrRead,
        ROW_NUMBER() OVER (PARTITION BY s.County ORDER BY ss.AvgScrRead DESC) AS rank
    FROM 
        schools s
    INNER JOIN 
        satscores ss ON s.CDSCode = ss.cds
    WHERE 
        s.Virtual = 'F'
)
SELECT 
    School
FROM 
    RankedSchools
WHERE 
    rank <= 5;
------------------------------
question: What is the type of education offered in the school who scored the highest average in Math?
GT: SELECT T2.EdOpsName FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 1
Pred: SELECT s.EdOpsName
FROM satscores ss
JOIN schools s ON ss.cds = s.CDSCode
WHERE ss.AvgScrMath = (
    SELECT MAX(AvgScrMath)
    FROM satscores
);
------------------------------
question: What is the average math score of the school with the lowest average score for all subjects, and in which county is it located?
GT: SELECT T1.AvgScrMath, T2.County FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath IS NOT NULL ORDER BY T1.AvgScrMath + T1.AvgScrRead + T1.AvgScrWrite ASC LIMIT 1
Pred: WITH SchoolScores AS (
    SELECT 
        s.cds,
        s.sname,
        s.dname,
        s.cname,
        s.enroll12,
        s.NumTstTakr,
        s.AvgScrMath,
        s.AvgScrRead,
        s.AvgScrWrite,
        (s.AvgScrMath + s.AvgScrRead + s.AvgScrWrite) AS TotalAvgScore
    FROM 
        satscores s
),
RankedSchools AS (
    SELECT 
        ss.cds,
        ss.sname,
        ss.dname,
        ss.cname,
        ss.enroll12,
        ss.NumTstTakr,
        ss.AvgScrMath,
        ss.AvgScrRead,
        ss.AvgScrWrite,
        ss.TotalAvgScore,
        ROW_NUMBER() OVER (ORDER BY ss.TotalAvgScore ASC) AS Rank
    FROM 
        SchoolScores ss
)
SELECT 
    rs.sname AS SchoolName,
    rs.cname AS CountyName,
    rs.AvgScrMath AS AverageMathScore
FROM 
    RankedSchools rs
JOIN 
    frpm f ON rs.cds = f.CDSCode
WHERE 
    rs.Rank = 1;
------------------------------
question: Which state special schools have the highest number of enrollees from grades 1 through 12?
GT: SELECT T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.DOC = 31 ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1
Pred: SELECT 
    s.School AS SchoolName,
    f."Enrollment (K-12)" AS EnrollmentK12
FROM 
    schools s
INNER JOIN 
    frpm f ON s.CDSCode = f.CDSCode
WHERE 
    s.DOC = 31 AND s.EdOpsName = 'State Special School'
ORDER BY 
    f."Enrollment (K-12)" DESC
LIMIT 1;
------------------------------
question: Which different county has the most number of closed schools? Please provide the name of each school as well as the closure date.
GT: SELECT DISTINCT County, School, ClosedDate FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Closed' AND school IS NOT NULL
Pred: SELECT County, School, ClosedDate
FROM schools
WHERE County IN (
    SELECT County
    FROM schools
    WHERE StatusType = 'Closed'
    GROUP BY County
    ORDER BY COUNT(CDSCode) DESC
    LIMIT 1
)
AND StatusType = 'Closed'
ORDER BY ClosedDate DESC;
------------------------------
question: In which mailing street address can you find the school that has the lowest average score in reading? Also give the school's name.
GT: SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1
Pred: SELECT s.MailStreet, ss.sname
FROM satscores ss
JOIN schools s ON ss.cds = s.CDSCode
ORDER BY ss.AvgScrRead ASC
LIMIT 1;
------------------------------
question: How many test takers are there at the school/s whose mailing city address is in Fresno?
GT: SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Fresno'
Pred: SELECT SUM(satscores.NumTstTakr) AS TotalTestTakers
FROM schools
JOIN satscores ON schools.CDSCode = satscores.cds
WHERE schools.MailCity = 'Fresno';
------------------------------
question: Please specify all of the schools and their related mailing zip codes that are under Avetik Atoian's administration.
GT: SELECT School, MailZip FROM schools WHERE AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian'
Pred: SELECT s.School, s.MailZip
FROM schools s
INNER JOIN frpm f ON s.CDSCode = f.CDSCode
WHERE f.AdmFName1 = 'Avetik' AND f.AdmLName1 = 'Atoian';
------------------------------
question: What is the phone number and extension number for the school with the zip code 95203-3704? Indicate the school's name.
GT: SELECT Phone, Ext, School FROM schools WHERE Zip = '95203-3704'
Pred: SELECT School, Phone, Ext
FROM schools
WHERE Zip = '95203-3704';
------------------------------
question: In chartered schools with charter number 00D2, what are the names of all the administrators? Include the name of the school and the city to which it belongs
GT: SELECT AdmFName1, AdmLName1, School, City FROM schools WHERE Charter = 1 AND CharterNum = '00D2'
Pred: SELECT 
    (AdmFName1 || ' ' || AdmLName1) AS AdministratorName,
    School,
    City
FROM 
    schools
WHERE 
    Charter = 1 AND CharterNum = '00D2'

UNION ALL

SELECT 
    (AdmFName2 || ' ' || AdmLName2) AS AdministratorName,
    School,
    City
FROM 
    schools
WHERE 
    Charter = 1 AND CharterNum = '00D2'

UNION ALL

SELECT 
    (AdmFName3 || ' ' || AdmLName3) AS AdministratorName,
    School,
    City
FROM 
    schools
WHERE 
    Charter = 1 AND CharterNum = '00D2';
------------------------------
question: What is the ratio in percentage of Santa Clara County schools that are locally funded compared to all other types of charter school funding?
GT: SELECT CAST(SUM(CASE WHEN FundingType = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN FundingType != 'Locally funded' THEN 1 ELSE 0 END) FROM schools WHERE County = 'Santa Clara' AND Charter = 1
Pred: SELECT 
    (COUNT(CASE WHEN FundingType = 'Locally funded' THEN 1 END) * 100.0 / COUNT(*)) AS ratio
FROM 
    schools
WHERE 
    County = 'Santa Clara';
------------------------------
question: Between 1/1/2000 to 12/31/2005, how many directly funded schools opened in the county of Stanislaus?
GT: SELECT COUNT(School) FROM schools WHERE strftime('%Y', OpenDate) BETWEEN '2000' AND '2005' AND County = 'Stanislaus' AND FundingType = 'Directly funded'
Pred: SELECT COUNT(*) 
FROM schools 
WHERE FundingType = 'Directly Funded' 
  AND County = 'Stanislaus' 
  AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31';
------------------------------
question: Which county reported the most number of school closure in the 1980s with school wonership code belonging to Youth Authority Facilities (CEA)?
GT: SELECT County FROM schools WHERE strftime('%Y', ClosedDate) BETWEEN '1980' AND '1989' AND StatusType = 'Closed' AND SOC = 11 GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1
Pred: SELECT 
    s.County, 
    COUNT(f.CDSCode) AS num_school_closures
FROM 
    schools s
JOIN 
    frpm f ON s.CDSCode = f.CDSCode
WHERE 
    strftime('%Y', s.ClosedDate) BETWEEN '1980' AND '1989'
    AND s.SOC = 11
GROUP BY 
    s.County
ORDER BY 
    num_school_closures DESC
LIMIT 1;
------------------------------
question: How many active and closed District Community Day Schools are there in the county of Alpine?
GT: SELECT COUNT(School) FROM schools WHERE (StatusType = 'Closed' OR StatusType = 'Active') AND SOC = 69 AND County = 'Alpine'
Pred: SELECT COUNT(*)
FROM schools
WHERE County = 'Alpine'
  AND EdOpsName = 'District Community Day School'
  AND StatusType IN ('Active', 'Closed');
------------------------------
question: What is the district code for the School that does not offer a magnet program in the city of Fresno?
GT: SELECT T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.City = 'Fresno' AND T2.Magnet = 0
Pred: SELECT DISTINCT District
FROM schools
WHERE Magnet = 0 AND City = 'Fresno';
------------------------------
question: What is the free or reduced price meal count for ages 5 to 17 in the Youth Authority School with a mailing street address of PO Box 1040?
GT: SELECT T1.`FRPM Count (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.MailStreet = 'PO Box 1040' AND T2.SOCType = 'Youth Authority Facilities'
Pred: SELECT f."FRPM Count (Ages 5-17)"
FROM schools s
JOIN frpm f ON s."CDSCode" = f."CDSCode"
WHERE s."School" = 'Youth Authority School'
  AND s."MailStreet" = 'PO Box 1040';
------------------------------
question: What is the lowest grade for the District Special Education Consortia School with National Center for Educational Statistics school district identification number of 0613360?
GT: SELECT MIN(T1.`Low Grade`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.NCESDist = '0613360' AND T2.EdOpsCode = 'SPECON'
Pred: SELECT MIN(LowGrade) AS LowestGrade
FROM schools
WHERE EdOpsCode = 'SPECON' AND NCESDist = '0613360';
------------------------------
question: What is the educational level name for the schools with Breakfast Provision 2 in county code 37? Indicate the name of the school.
GT: SELECT T2.EILName, T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`NSLP Provision Status` = 'Breakfast Provision 2' AND T1.`County Code` = 37
Pred: SELECT 
    s.School, 
    s.EILName
FROM 
    schools s
INNER JOIN 
    frpm f ON s.CDSCode = f.CDSCode
WHERE 
    f."County Code" = '37' 
    AND f."NSLP Provision Status" = 'Breakfast Provision 2';
------------------------------
question: What is the city location of the high school level school with Lunch Provision 2 whose lowest grade is 9 and the highest grade is 12 in the county of Merced?
GT: SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`NSLP Provision Status` = 'Lunch Provision 2' AND T2.County = 'Merced' AND T1.`Low Grade` = 9 AND T1.`High Grade` = 12 AND T2.EILCode = 'HS'
Pred: SELECT s.City
FROM schools s
JOIN frpm f ON s.CDSCode = f.CDSCode
WHERE f.County_Name = 'Merced'
  AND f.EILCode = 'HS'
  AND f.NSLP_Provision_Status = 'Lunch Provision 2'
  AND f.Low_Grade = '9'
  AND f.High_Grade = '12';
------------------------------
question: Which schools served a grade span of Kindergarten to 9th grade in the county of Los Angeles and what is its Percent (%) Eligible FRPM (Ages 5-17)?
GT: SELECT T2.School, T1.`FRPM Count (Ages 5-17)` * 100 / T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.GSserved = 'K-9'
Pred: SELECT 
    s.CDSCode,
    s.County,
    s.School,
    (f."FRPM Count (Ages 5-17)" / f."Enrollment (Ages 5-17)" * 100) AS "Percent (%) Eligible FRPM (Ages 5-17)"
FROM 
    schools s
JOIN 
    frpm f ON s.CDSCode = f.CDSCode
WHERE 
    s.County = 'Los Angeles' AND s.GSserved = 'K-9'
ORDER BY 
    s.CDSCode;
------------------------------
question: What is the most common type of grade span served in the city of Adelanto?
GT: SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1
Pred: SELECT GSserved, COUNT(*) AS count
FROM schools
WHERE City = 'Adelanto'
GROUP BY GSserved
ORDER BY count DESC
LIMIT 1;
------------------------------
question: What is the school type of the school with the highest latitude? Indicate the name of the school as well as the latitude coordinates.
GT: SELECT T1.`School Type`, T1.`School Name`, T2.Latitude FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.Latitude DESC LIMIT 1
Pred: SELECT SchoolType, School, Latitude
FROM schools
ORDER BY Latitude DESC
LIMIT 1;
------------------------------
question: In which city can you find the school in the state of California with the lowest latitude coordinates and what is its lowest grade? Indicate the school name.
GT: SELECT T2.City, T1.`Low Grade`, T1.`School Name` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.State = 'CA' ORDER BY T2.Latitude ASC LIMIT 1
Pred: SELECT 
    s.City,
    s.School,
    f.Low_Grade
FROM 
    schools s
JOIN 
    frpm f ON s.CDSCode = f.CDSCode
WHERE 
    s.State = 'CA'
ORDER BY 
    s.Latitude ASC
LIMIT 1;
------------------------------
question: What is the grade span offered in the school with the highest longitude?
GT: SELECT GSoffered FROM schools ORDER BY ABS(longitude) DESC LIMIT 1
Pred: SELECT GSoffered
FROM schools
WHERE ABS(Longitude) = (
    SELECT MAX(ABS(Longitude))
    FROM schools
);
------------------------------
question: Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.
GT: SELECT T2.City, COUNT(T2.CDSCode) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Magnet = 1 AND T2.GSoffered = 'K-8' AND T1.`NSLP Provision Status` = 'Multiple Provision Types' GROUP BY T2.City
Pred: SELECT 
    s.City,
    COUNT(DISTINCT s.CDSCode) AS num_schools,
    COUNT(DISTINCT s.City) AS num_cities
FROM 
    schools s
JOIN 
    frpm f ON s.CDSCode = f.CDSCode
WHERE 
    s.Magnet = 1 
    AND s.GSoffered = 'K-8' 
    AND f."NSLP Provision Status" = 'Multiple Provision Types'
GROUP BY 
    s.City
ORDER BY 
    s.City;
------------------------------
question: What are the two most common first names among the school administrators? Indicate the district to which they administer.
GT: SELECT DISTINCT T1.AdmFName1, T1.District FROM schools AS T1 INNER JOIN ( SELECT admfname1 FROM schools GROUP BY admfname1 ORDER BY COUNT(admfname1) DESC LIMIT 2 ) AS T2 ON T1.AdmFName1 = T2.admfname1
Pred: WITH AdminNamesCTE AS (
    SELECT 
        District,
        AdmFName1 AS AdminFirstName,
        COUNT(*) AS NameCount,
        ROW_NUMBER() OVER (PARTITION BY District ORDER BY COUNT(*) DESC) AS Rank
    FROM 
        schools
    WHERE 
        AdmFName1 IS NOT NULL
    GROUP BY 
        District, AdmFName1
    UNION ALL
    SELECT 
        District,
        AdmFName2 AS AdminFirstName,
        COUNT(*) AS NameCount,
        ROW_NUMBER() OVER (PARTITION BY District ORDER BY COUNT(*) DESC) AS Rank
    FROM 
        schools
    WHERE 
        AdmFName2 IS NOT NULL
    GROUP BY 
        District, AdmFName2
    UNION ALL
    SELECT 
        District,
        AdmFName3 AS AdminFirstName,
        COUNT(*) AS NameCount,
        ROW_NUMBER() OVER (PARTITION BY District ORDER BY COUNT(*) DESC) AS Rank
    FROM 
        schools
    WHERE 
        AdmFName3 IS NOT NULL
    GROUP BY 
        District, AdmFName3
)
SELECT 
    District,
    AdminFirstName
FROM 
    AdminNamesCTE
WHERE 
    Rank <= 2;
------------------------------
question: What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.
GT: SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'
Pred: SELECT 
    (frpm."Free Meal Count (K-12)" / frpm."Enrollment (K-12)") * 100 AS "Percent (%) Eligible Free (K-12)",
    schools."District" AS "District Code"
FROM 
    frpm
INNER JOIN 
    schools ON frpm."CDSCode" = schools."CDSCode"
WHERE 
    schools."AdmFName1" = 'Alusine';
------------------------------
question: What is the administrator's last name that oversees the school with Charter number 40? Indicate the district, the county where the school is situated, and the name of the school.
GT: SELECT AdmLName1, District, County, School FROM schools WHERE CharterNum = '0040'
Pred: SELECT s.AdmLName1, s.District, s.County, s.School
FROM schools s
INNER JOIN frpm f ON s.CDSCode = f.CDSCode
WHERE f.Charter_School_Number = 40;
------------------------------
question: What are the valid e-mail addresses of the administrator of the school located in the San Bernardino county, City of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Schools?
GT: SELECT T2.AdmEmail1, T2.AdmEmail2 FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'San Bernardino' AND T2.City = 'San Bernardino' AND T2.DOC = 54 AND strftime('%Y', T2.OpenDate) BETWEEN '2009' AND '2010' AND T2.SOC = 62
Pred: SELECT AdmEmail1
FROM schools
WHERE County = 'San Bernardino'
  AND District = 'San Bernardino City Unified'
  AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31'
  AND SOC = 62
  AND DOC = 54;
------------------------------
question: How many accounts who have region in Prague are eligible for loans?
GT: SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'Prague'
Pred: SELECT COUNT(a.account_id) 
FROM account a
JOIN district d ON a.district_id = d.district_id
WHERE d.A3 = 'Prague';
------------------------------
question: The average unemployment ratio of 1995 and 1996, which one has higher percentage?
GT: SELECT DISTINCT IIF(AVG(A13) > AVG(A12), '1996', '1995') FROM district
Pred: SELECT 
    AVG(A12) AS avg_unemployment_1995,
    AVG(A13) AS avg_unemployment_1996,
    CASE 
        WHEN AVG(A12) > AVG(A13) THEN '1995'
        ELSE '1996'
    END AS higher_unemployment_year
FROM 
    district;
------------------------------
question: How many male customers who are living in North Bohemia have average salary greater than 8000?
GT: SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'north Bohemia' AND T2.A11 > 8000
Pred: SELECT COUNT(*)
FROM client c
JOIN district d ON c.district_id = d.district_id
WHERE c.gender = 'M' AND d.A3 = 'North Bohemia' AND d.A11 > 8000;
------------------------------
question: List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?
GT: SELECT T1.account_id , ( SELECT MAX(A11) - MIN(A11) FROM district ) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T2.district_id = ( SELECT district_id FROM client WHERE gender = 'F' ORDER BY birth_date ASC LIMIT 1 ) ORDER BY T2.A11 DESC LIMIT 1
Pred: 
------------------------------
question: List out the account numbers of clients who are youngest and have highest average salary?
GT: SELECT T1.account_id  FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 on T4.district_id = T1.district_id WHERE T2.client_id = ( SELECT client_id FROM client ORDER BY birth_date DESC LIMIT 1) GROUP BY T4.A11, T1.account_id
Pred: SELECT a.account_id
FROM client c
JOIN district d ON c.district_id = d.district_id
JOIN account a ON c.district_id = a.district_id
ORDER BY c.birth_date DESC, d.A11 DESC
LIMIT 1;
------------------------------
question: Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement.
GT: SELECT T2.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount LIMIT 1
Pred: SELECT l.account_id
FROM loan l
JOIN account a ON l.account_id = a.account_id
WHERE strftime('%Y', l.date) = '1997'
  AND a.frequency = 'POPLATEK TYDNE'
  AND l.amount = (
    SELECT MIN(amount)
    FROM loan
    WHERE strftime('%Y', date) = '1997'
  );
------------------------------
question: List out the accounts who have the earliest trading date in 1995 ?
GT: SELECT account_id FROM trans WHERE STRFTIME('%Y', date) = '1995' ORDER BY date ASC LIMIT 1
Pred: SELECT account_id
FROM trans
WHERE (account_id, date) IN (
    SELECT account_id, MIN(date)
    FROM trans
    WHERE strftime('%Y', date) = '1995'
    GROUP BY account_id
);
------------------------------
question: State different accounts who have account opening date before 1997 and own an amount of money greater than 3000USD
GT: SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) < '1997' AND T1.amount > 3000
Pred: SELECT DISTINCT a.account_id
FROM account a
JOIN trans t ON a.account_id = t.account_id
WHERE a.date < '1997-01-01'
  AND t.amount > 3000
  AND t.type = 'PRIJEM';
------------------------------
question: What is the gender of the oldest client who opened his/her account in the highest average salary branch?
GT: SELECT T2.gender FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id ORDER BY T1.A11 DESC, T2.birth_date ASC LIMIT 1
Pred: SELECT c.gender
FROM client c
JOIN district d ON c.district_id = d.district_id
WHERE c.district_id = (
    SELECT district_id
    FROM district
    WHERE A11 = (
        SELECT MAX(A11)
        FROM district
    )
)
AND c.birth_date = (
    SELECT MIN(birth_date)
    FROM client
);
------------------------------
question: For the client who applied the biggest loan, what was his/her first amount of transaction after opened the account?
GT: SELECT T3.amount FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id ORDER BY T1.amount DESC, T3.date ASC LIMIT 1
Pred: WITH BiggestLoanClient AS (
    SELECT c.client_id
    FROM client c
    JOIN disp d ON c.client_id = d.client_id
    JOIN loan l ON d.account_id = l.account_id
    ORDER BY l.amount DESC
    LIMIT 1
),
FirstTransaction AS (
    SELECT t.amount
    FROM account a
    JOIN trans t ON a.account_id = t.account_id
    JOIN BiggestLoanClient blc ON a.district_id = blc.client_id
    WHERE t.date > a.date
    ORDER BY t.date
    LIMIT 1
)
SELECT amount
FROM FirstTransaction;
------------------------------
question: How many clients opened their accounts in Jesenik branch were women?
GT: SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A2 = 'Jesenik'
Pred: SELECT COUNT(c.client_id) AS female_clients
FROM client c
JOIN account a ON c.client_id = a.account_id
JOIN district d ON a.district_id = d.district_id
WHERE c.gender = 'F' AND d.A2 = 'Jesenik';
------------------------------
question: What is the disposition id of the client who made 5100 USD transaction in 1998/9/2?
GT: SELECT T1.disp_id FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.date='1997-08-20' AND T3.amount = 5100
Pred: SELECT d.disp_id
FROM trans t
JOIN disp d ON t.account_id = d.client_id
WHERE t.date = '1998-09-02' AND t.amount = 5100;
------------------------------
question: For the female client who was born in 1976/1/29, which district did she opened her account?
GT: SELECT T1.A2 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.birth_date = '1976-01-29' AND T2.gender = 'F'
Pred: SELECT d.A2
FROM client c
JOIN account a ON c.client_id = a.account_id
JOIN district d ON a.district_id = d.district_id
WHERE c.gender = 'F' AND c.birth_date = '1976-01-29';
------------------------------
question: For the first client who opened his/her account in Prague, what is his/her account ID?
GT: SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date ASC LIMIT 1
Pred: SELECT a.account_id
FROM client c
JOIN district d ON c.district_id = d.district_id
JOIN disp dp ON c.client_id = dp.client_id
JOIN account a ON dp.account_id = a.account_id
WHERE d.A3 = 'Prague'
ORDER BY a.date
LIMIT 1;
------------------------------
question: For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27?
GT: SELECT CAST((SUM(IIF(T3.date = '1998-12-27', T3.balance, 0)) - SUM(IIF(T3.date = '1993-03-22', T3.balance, 0))) AS REAL) * 100 / SUM(IIF(T3.date = '1993-03-22', T3.balance, 0)) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T3.account_id = T2.account_id WHERE T1.date = '1993-07-05'
Pred: WITH ClientLoan AS (
    SELECT 
        l.account_id
    FROM 
        loan l
    WHERE 
        l.date = '1993-07-05'
),
AccountBalance AS (
    SELECT 
        t.account_id,
        t.date,
        t.balance
    FROM 
        trans t
    WHERE 
        t.account_id IN (SELECT account_id FROM ClientLoan)
        AND t.date IN ('1993-03-22', '1998-12-27')
)
SELECT 
    ((SELECT balance FROM AccountBalance WHERE date = '1998-12-27') - 
     (SELECT balance FROM AccountBalance WHERE date = '1993-03-22')) / 
    (SELECT balance FROM AccountBalance WHERE date = '1993-03-22') * 100 AS increase_rate
FROM 
    AccountBalance;
------------------------------
question: For loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue.
GT: SELECT CAST(SUM(status = 'C') AS REAL) * 100 / COUNT(account_id) FROM loan WHERE amount < 100000
Pred: SELECT 
    SUM(CASE WHEN l.amount < 100000 AND l.status = 'C' THEN 1 ELSE 0 END) * 100.0 / COUNT(l.loan_id) AS percentage
FROM 
    loan l
WHERE 
    l.amount < 100000 AND l.status = 'C';
------------------------------
question: List the loan ID, district and average salary for loan with duration of 60 months.
GT: SELECT T3.loan_id, T2.A2, T2.A11 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration = 60
Pred: SELECT 
    loan.loan_id, 
    district.A3 AS district, 
    district.A11 AS average_salary
FROM 
    loan
JOIN 
    account ON loan.account_id = account.account_id
JOIN 
    district ON account.district_id = district.district_id
WHERE 
    loan.duration = 60;
------------------------------
question: For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.
GT: SELECT CAST((T3.A13 - T3.A12) AS REAL) * 100 / T3.A12 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'
Pred: SELECT 
    d.A2 AS district_name,
    d.A3 AS region,
    ((d.A13 - d.A12) / d.A12) * 100 AS unemployment_rate_increment
FROM 
    district d
JOIN 
    account a ON d.district_id = a.district_id
JOIN 
    loan l ON a.account_id = l.account_id
WHERE 
    l.status = 'D'
    AND d.A12 IS NOT NULL
    AND d.A13 IS NOT NULL;
------------------------------
question: List the top nine districts, by descending order, from the highest to the lowest, the number of female account holders.
GT: SELECT T2.A2, COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.district_id, T2.A2 ORDER BY COUNT(T1.client_id) DESC LIMIT 9
Pred: SELECT 
    d.district_id,
    d.A2 AS district_name,
    COUNT(c.client_id) AS female_count
FROM 
    client c
JOIN 
    account a ON c.district_id = a.district_id
JOIN 
    district d ON c.district_id = d.district_id
WHERE 
    c.gender = 'F'
GROUP BY 
    d.district_id, d.A2
ORDER BY 
    female_count DESC
LIMIT 9;
------------------------------
question: Which are the top ten withdrawals (non-credit card) by district names for the month of January 1996?
GT: SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ' AND T3.date LIKE '1996-01%' ORDER BY A2 ASC LIMIT 10
Pred: SELECT 
    d.A2 AS district_name,
    SUM(t.amount) AS total_withdrawal
FROM 
    trans t
JOIN 
    account a ON t.account_id = a.account_id
JOIN 
    district d ON a.district_id = d.district_id
WHERE 
    t.type = 'VYDAJ' 
    AND t.date LIKE '1996-01%'
GROUP BY 
    d.A2
ORDER BY 
    total_withdrawal DESC
LIMIT 10;
------------------------------
question: How many of the account holders in South Bohemia still do not own credit cards?
GT: SELECT COUNT(T3.account_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.client_id = T3.client_id WHERE T1.A3 = 'south Bohemia' AND T3.type != 'OWNER'
Pred: SELECT COUNT(c.client_id) AS count_without_cards
FROM client c
JOIN district d ON c.district_id = d.district_id
LEFT JOIN disp dp ON c.client_id = dp.client_id
LEFT JOIN card c ON dp.card_id = c.card_id
WHERE d.A3 = 'South Bohemia' AND c.card_id IS NULL;
------------------------------
question: Which district has highest active loan?
GT: SELECT T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.status IN ('C', 'D') GROUP BY T2.A3 ORDER BY SUM(T3.amount) DESC LIMIT 1
Pred: SELECT 
    d.A3 AS district_name,
    COUNT(l.loan_id) AS total_active_loans
FROM 
    loan l
JOIN 
    account a ON l.account_id = a.account_id
JOIN 
    district d ON a.district_id = d.district_id
WHERE 
    l.status IN ('C', 'D')
GROUP BY 
    d.district_id
ORDER BY 
    total_active_loans DESC
LIMIT 1;
------------------------------
question: What is the average loan amount by male borrowers?
GT: SELECT AVG(T4.amount) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'M'
Pred: SELECT AVG(l.amount) AS average_loan_amount
FROM client c
JOIN account a ON c.client_id = a.account_id
JOIN loan l ON a.account_id = l.account_id
WHERE c.gender = 'M';
------------------------------
question: In 1996, which districts have the highest unemployment rate? List their branch location and district name.
GT: SELECT district_id, A2 FROM district ORDER BY A13 DESC LIMIT 1
Pred: SELECT d.district_id, d.A2 AS district_name
FROM district d
WHERE d.A13 IS NOT NULL
ORDER BY d.A13 DESC;
------------------------------
question: After making a credit card withdrawal, how many account/s with monthly issuance has a negative balance?
GT: SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.balance < 0 AND T1.operation = 'VYBER KARTOU' AND T2.frequency = 'POPLATEK MESICNE'
Pred: SELECT 
    COUNT(DISTINCT t.account_id) AS total_accounts
FROM 
    trans t
JOIN 
    account a ON t.account_id = a.account_id
WHERE 
    t.operation = 'VYBER KARTOU' 
    AND a.frequency = 'POPLATEK MESICNE' 
    AND t.balance < 0;
------------------------------
question: Between 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved?
GT: SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.frequency = 'POPLATEK MESICNE' AND T2.amount >= 250000
Pred: SELECT COUNT(l.loan_id) AS total_loans
FROM loan l
JOIN account a ON l.account_id = a.account_id
WHERE l.amount >= 250000
  AND a.frequency = 'POPLATEK MESICNE'
  AND l.status = 'A'
  AND l.date BETWEEN '1995-01-01' AND '1997-12-31';
------------------------------
question: How many accounts have running contracts in Branch location 1?
GT: SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T1.district_id = 1 AND (T3.status = 'C' OR T3.status = 'D')
Pred: SELECT COUNT(DISTINCT a.account_id) AS total_accounts
FROM account a
JOIN loan l ON a.account_id = l.account_id
WHERE a.district_id = 1
  AND l.status = 'C';
------------------------------
question: In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?
GT: SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A15 = (SELECT T3.A15 FROM district AS T3 ORDER BY T3.A15 DESC LIMIT 1, 1)
Pred: SELECT district_id
FROM district
ORDER BY A15 DESC
LIMIT 1 OFFSET 1
------------------------------
question: Which districts have transactions greater than USS$10,000 in 1997?
GT: SELECT T1.district_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date) = '1997' GROUP BY T1.district_id HAVING SUM(T3.amount) > 10000
Pred: SELECT DISTINCT d.A2 AS district_name
FROM trans t
JOIN account a ON t.account_id = a.account_id
JOIN district d ON a.district_id = d.district_id
WHERE t.date BETWEEN '1997-01-01' AND '1997-12-31'
  AND t.amount > 10000;
------------------------------
question: Which accounts placed orders for household payment in Pisek?
GT: SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.k_symbol = 'SIPO' AND T3.A2 = 'Pisek'
Pred: SELECT a.account_id
FROM account a
INNER JOIN order o ON a.account_id = o.account_id
INNER JOIN district d ON a.district_id = d.district_id
WHERE o.k_symbol = 'SIPO' AND d.A2 = 'Pisek';
------------------------------
question: How much is the average amount in credit card made by account holders in a month, in year 2021?
GT: SELECT AVG(T4.amount) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE STRFTIME('%Y', T4.date) = '1998' AND T4.operation = 'VYBER KARTOU'
Pred: SELECT AVG(amount) AS average_amount
FROM trans
WHERE operation = 'VYBER KARTOU'
  AND strftime('%Y', date) = '2021';
------------------------------
question: Who are the account holder identification numbers whose who have transactions on the credit card with the amount is less than the average, in 1998?
GT: SELECT T1.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1998' AND T1.operation = 'VYBER KARTOU' AND T1.amount < (SELECT AVG(amount) FROM trans WHERE STRFTIME('%Y', date) = '1998')
Pred: SELECT c.client_id
FROM trans t
JOIN account a ON t.account_id = a.account_id
JOIN client c ON a.client_id = c.client_id
WHERE strftime('%Y', t.date) = '1998'
  AND t.operation = 'VYBER KARTOU'
  AND t.amount < (
    SELECT AVG(amount)
    FROM trans
    WHERE strftime('%Y', date) = '1998'
  );
------------------------------
question: Who are the female account holders who own credit cards and also have loans?
GT: SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T5 ON T2.account_id = T5.account_id INNER JOIN loan AS T3 ON T5.account_id = T3.account_id INNER JOIN card AS T4 ON T2.disp_id = T4.disp_id WHERE T1.gender = 'F'
Pred: SELECT DISTINCT c.client_id
FROM client c
JOIN card ca ON c.client_id = ca.disp_id
JOIN account a ON c.client_id = a.account_id
JOIN loan l ON a.account_id = l.account_id
WHERE c.gender = 'F';
------------------------------
question: How many female clients' accounts are in the region of South Bohemia?
GT: SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A3 = 'south Bohemia'
Pred: SELECT COUNT(c.client_id) AS female_clients
FROM client c
INNER JOIN account a ON c.client_id = a.account_id
INNER JOIN district d ON a.district_id = d.district_id
WHERE c.gender = 'F' AND d.A3 = 'south Bohemia';
------------------------------
question: Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000.
GT: SELECT T3.type FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type != 'OWNER' AND T1.A11 BETWEEN 8000 AND 9000
Pred: SELECT 
    a.type AS account_type,
    d.A11 AS average_salary
FROM 
    account a
JOIN 
    client c ON a.district_id = c.district_id
JOIN 
    district d ON c.district_id = d.district_id
WHERE 
    a.type <> 'OWNER' AND
    d.A11 BETWEEN 8000 AND 9000;
------------------------------
question: How many accounts in North Bohemia has made a transaction with the partner's bank being AB?
GT: SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.bank = 'AB' AND T1.A3 = 'north Bohemia'
Pred: SELECT COUNT(DISTINCT a.account_id) AS total_accounts
FROM account a
JOIN trans t ON a.account_id = t.account_id
JOIN district d ON a.district_id = d.district_id
WHERE t.bank = 'AB' AND d.A3 = 'North Bohemia';
------------------------------
question: What is the average number of crimes committed in 1995 in regions where the number exceeds 4000 and the region has accounts that are opened starting from the year 1997?
GT: SELECT AVG(T1.A15) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) >= '1997' AND T1.A15 > 4000
Pred: SELECT 
    d.A3 AS region_name,
    AVG(d.A15) AS avg_crimes_1995
FROM 
    district d
JOIN 
    account a ON d.district_id = a.district_id
WHERE 
    d.A15 > 4000
    AND a.date >= '1997-01-01'
GROUP BY 
    d.A3;
------------------------------
question: How many 'classic' cards are eligible for loan?
GT: SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'classic' AND T2.type = 'OWNER'
Pred: SELECT COUNT(c.card_id) AS total_cards
FROM card c
INNER JOIN disp d ON c.disp_id = d.disp_id
INNER JOIN account a ON d.account_id = a.account_id
WHERE c.type = 'classic' AND d.type = 'OWNER' AND a.frequency = 'OWNER';
------------------------------
question: What is the district Id of the account that placed the order with the id 33333?
GT: SELECT T3.district_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.order_id = 33333
Pred: SELECT district_id 
FROM account 
WHERE account_id = (
    SELECT account_id 
    FROM order 
    WHERE order_id = 33333
);
------------------------------
question: List all the withdrawals in cash transactions that the client with the id 3356 makes.
GT: SELECT T4.trans_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 3356 AND T4.operation = 'VYBER'
Pred: SELECT trans.trans_id, trans.date, trans.type, trans.operation, trans.amount, trans.balance, trans.k_symbol, trans.bank, trans.account
FROM trans
JOIN account ON trans.account_id = account.account_id
JOIN client ON account.client_id = client.client_id
WHERE client.client_id = 3356 AND trans.operation = 'VYBER';
------------------------------
question: Which district has the most accounts with loan contracts finished with no problems?
GT: SELECT T1.A2 FROM District AS T1 INNER JOIN Account AS T2 ON T1.District_id = T2.District_id INNER JOIN Loan AS T3 ON T2.Account_id = T3.Account_id WHERE T3.status = 'A' GROUP BY T1.District_id ORDER BY COUNT(T2.Account_id) DESC LIMIT 1
Pred: SELECT d.district_id, COUNT(a.account_id) AS account_count
FROM district d
JOIN account a ON d.district_id = a.district_id
JOIN loan l ON a.account_id = l.account_id
WHERE l.status = 'A'
GROUP BY d.district_id
ORDER BY account_count DESC
LIMIT 1;
------------------------------
question: Who placed the order with the id 32423?
GT: SELECT T3.client_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T4 ON T4.account_id = T2.account_id  INNER JOIN client AS T3 ON T4.client_id = T3.client_id WHERE T1.order_id = 32423
Pred: SELECT c.client_id
FROM order o
JOIN account a ON o.account_id = a.account_id
JOIN client c ON a.client_id = c.client_id
WHERE o.order_id = 32423;
------------------------------
question: Please list all the transactions made by accounts from district 5.
GT: SELECT T3.trans_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.district_id = 5
Pred: SELECT t.*
FROM trans t
JOIN account a ON t.account_id = a.account_id
JOIN district d ON a.district_id = d.district_id
WHERE d.district_id = 5;
------------------------------
question: List all the clients' IDs whose junior credit cards were issued after 1996.
GT: SELECT T2.client_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'junior' AND T1.issued >= '1997-01-01'
Pred: SELECT c.client_id
FROM client c
JOIN card ca ON c.client_id = ca.disp_id
WHERE ca.type = 'junior' AND ca.issued >= '1997-01-01';
------------------------------
question: What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women?
GT: SELECT CAST(SUM(T2.gender = 'F') AS REAL) * 100 / COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 > 10000
Pred: SELECT 
    ROUND(
        CAST(SUM(CASE WHEN c.gender = 'F' THEN 1 ELSE 0 END) AS REAL) / 
        COUNT(c.client_id) * 100, 
        2
    ) AS percentage_female_clients
FROM 
    client c
JOIN 
    district d ON c.district_id = d.district_id
WHERE 
    d.A11 > 10000;
------------------------------
question: What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997?
GT: SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.gender = 'M' AND T3.type = 'OWNER'
Pred: WITH LoanAmounts1996 AS (
    SELECT SUM(l.amount) AS total_amount_1996
    FROM loan l
    JOIN account a ON l.account_id = a.account_id
    JOIN client c ON a.district_id = c.district_id
    WHERE c.gender = 'M' AND l.date BETWEEN '1996-01-01' AND '1996-12-31'
),
LoanAmounts1997 AS (
    SELECT SUM(l.amount) AS total_amount_1997
    FROM loan l
    JOIN account a ON l.account_id = a.account_id
    JOIN client c ON a.district_id = c.district_id
    WHERE c.gender = 'M' AND l.date BETWEEN '1997-01-01' AND '1997-12-31'
)
SELECT 
    (SELECT total_amount_1997 FROM LoanAmounts1997) - 
    (SELECT total_amount_1996 FROM LoanAmounts1996) AS amount_difference,
    (SELECT total_amount_1996 FROM LoanAmounts1996) AS total_amount_1996,
    (SELECT total_amount_1997 FROM LoanAmounts1997) AS total_amount_1997,
    ((SELECT total_amount_1997 FROM LoanAmounts1997) - 
     (SELECT total_amount_1996 FROM LoanAmounts1996)) / 
    (SELECT total_amount_1996 FROM LoanAmounts1996) * 100 AS growth_rate;
------------------------------
question: What was the difference in the number of crimes committed in East and North Bohemia in 1996?
GT: SELECT SUM(IIF(A3 = 'east Bohemia', A16, 0)) - SUM(IIF(A3 = 'north Bohemia', A16, 0)) FROM district
Pred: SELECT 
    SUM(CASE 
            WHEN A3 = 'north Bohemia' THEN A16 
            ELSE 0 
        END) - 
    SUM(CASE 
            WHEN A3 = 'east Bohemia' THEN A16 
            ELSE 0 
        END) AS difference_in_crimes
FROM 
    district;
------------------------------
question: How many owner and disponent dispositions are there from account number 1 to account number 10?
GT: SELECT SUM(type = 'OWNER') , SUM(type = 'DISPONENT') FROM disp WHERE account_id BETWEEN 1 AND 10
Pred: SELECT COUNT(*) AS total_dispositions
FROM disp
JOIN account ON disp.account_id = account.account_id
WHERE account.account_id BETWEEN 1 AND 10
  AND (disp.type = 'OWNER' OR disp.type = 'DISPONENT');
------------------------------
question: How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total?
GT: SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN (SELECT account_id, k_symbol, SUM(amount) AS total_amount FROM `order` GROUP BY account_id, k_symbol) AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.total_amount = 3539
Pred: SELECT 
    COUNT(CASE WHEN type = 'VYDAJ' THEN 1 END) AS count_of_withdrawals,
    SUM(CASE WHEN k_symbol = 'UVER' THEN amount ELSE 0 END) AS total_loan_amount
FROM 
    trans
WHERE 
    account_id = 3;
------------------------------
question: What is the amount of debt that client number 992 has, and how is this client doing with payments?
GT: SELECT T4.amount, T4.status FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 on T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 992
Pred: SELECT 
    SUM(l.amount) AS total_debt,
    CASE 
        WHEN l.status = 'A' THEN 'Paid Off'
        ELSE 'Overdue'
    END AS payment_status
FROM 
    client c
LEFT JOIN 
    disp d ON c.client_id = d.client_id
LEFT JOIN 
    account a ON d.account_id = a.account_id
LEFT JOIN 
    loan l ON a.account_id = l.account_id
WHERE 
    c.client_id = 992;
------------------------------
question: What is the sum that client number 4's account has following transaction 851? Who owns this account, a man or a woman?
GT: SELECT T4.balance, T1.gender FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id =T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 4 AND T4.trans_id = 851
Pred: SELECT 
    SUM(t.amount) AS total_amount,
    CASE 
        WHEN c.gender = 'M' THEN 'Man'
        WHEN c.gender = 'F' THEN 'Woman'
    END AS gender
FROM 
    trans t
JOIN 
    account a ON t.account_id = a.account_id
JOIN 
    client c ON a.district_id = c.client_id
WHERE 
    t.trans_id = 851
    AND c.client_id = 4;
------------------------------
question: How much, in total, did client number 617 pay for all of the transactions in 1998?
GT: SELECT SUM(T3.amount) FROM client AS T1 INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T2 ON T4.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date)= '1998' AND T1.client_id = 617
Pred: SELECT SUM(t.amount) AS total_amount
FROM client c
JOIN account a ON c.district_id = a.district_id
JOIN trans t ON a.account_id = t.account_id
WHERE c.client_id = 617
  AND strftime('%Y', t.date) = '1998';
------------------------------
question: Please provide a list of clients who were born between 1983 and 1987 and whose account branch is in East Bohemia, along with their IDs.
GT: SELECT T1.client_id, T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id and T4.account_id = T3.account_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.birth_date) BETWEEN '1983' AND '1987'
Pred: SELECT c.client_id
FROM client c
INNER JOIN district d ON c.district_id = d.district_id
WHERE c.birth_date BETWEEN '1983-01-01' AND '1987-12-31'
AND d.A3 LIKE '%East Bohemia%';
------------------------------
question: How many male customers who were born between 1974 and 1976 have made a payment on their home in excess of $4000?
GT: SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T4 ON T2.account_id = T4.account_id INNER JOIN client AS T3 ON T4.client_id = T3.client_id WHERE STRFTIME('%Y', T3.birth_date) BETWEEN '1974' AND '1976' AND T3.gender = 'M' AND T1.amount > 4000 AND T1.k_symbol = 'SIPO'
Pred: SELECT COUNT(DISTINCT c.client_id) AS male_clients
FROM client c
JOIN trans t ON c.client_id = t.account_id
JOIN order o ON t.account_id = o.account_id
WHERE c.gender = 'M'
  AND c.birth_date BETWEEN '1974-01-01' AND '1976-12-31'
  AND t.type = 'VYDAJ'
  AND t.k_symbol = 'SIPO'
  AND t.amount > 4000;
------------------------------
question: How many accounts in Beroun were opened after 1996?
GT: SELECT COUNT(account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.date) > '1996' AND T2.A2 = 'Beroun'
Pred: SELECT COUNT(a.account_id) AS total_accounts
FROM account a
JOIN district d ON a.district_id = d.district_id
WHERE d.A2 = 'Beroun' AND a.date > '1996-01-01';
------------------------------
question: What proportion of customers who have accounts at the Prague branch are female?
GT: SELECT CAST(SUM(T2.gender = 'F') AS REAL) / COUNT(T2.client_id) * 100 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'Prague'
Pred: SELECT 
    (CAST(COUNT(CASE WHEN c.gender = 'F' THEN 1 END) AS REAL) / COUNT(c.client_id)) * 100 AS percentage_female_clients
FROM 
    client c
JOIN 
    account a ON c.client_id = a.account_id
JOIN 
    district d ON a.district_id = d.district_id
WHERE 
    d.A3 LIKE '%Prague%';
------------------------------
question: What percentage of male clients request for weekly statements to be issued?
GT: SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T3 ON T1.district_id = T3.district_id INNER JOIN account AS T2 ON T2.district_id = T3.district_id INNER JOIN disp as T4 on T1.client_id = T4.client_id AND T2.account_id = T4.account_id WHERE T2.frequency = 'POPLATEK TYDNE'
Pred: SELECT 
    (CAST(COUNT(CASE WHEN c.gender = 'M' THEN 1 END) AS REAL) / COUNT(a.account_id)) * 100 AS percentage
FROM 
    client c
JOIN 
    account a ON c.client_id = a.account_id
WHERE 
    a.frequency = 'POPLATEK TYDNE';
------------------------------
question: Among the accounts who have loan validity more than 24 months, list out the accounts that have the lowest approved amount and have account opening date before 1997.
GT: SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration > 24 AND STRFTIME('%Y', T2.date) < '1997' ORDER BY T1.amount ASC LIMIT 1
Pred: SELECT 
    a.account_id
FROM 
    account a
INNER JOIN 
    loan l ON a.account_id = l.account_id
WHERE 
    l.duration > 24 
    AND l.status = 'A' 
    AND a.date < '1997-01-01'
ORDER BY 
    l.amount ASC
LIMIT 1;
------------------------------
question: Name the account numbers of female clients who are oldest and have lowest average salary?
GT: SELECT T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id AND T4.account_id = T3.account_id  WHERE T1.gender = 'F' ORDER BY T1.birth_date ASC, T2.A11 ASC LIMIT 1
Pred: WITH oldest_female_client AS (
    SELECT client_id
    FROM client
    WHERE gender = 'F'
    ORDER BY birth_date ASC
    LIMIT 1
),
lowest_salary_female_client AS (
    SELECT c.client_id
    FROM client c
    JOIN district d ON c.district_id = d.district_id
    WHERE c.gender = 'F'
    ORDER BY d.A11 ASC
    LIMIT 1
)
SELECT a.account_id
FROM account a
JOIN client c ON a.district_id = c.district_id
WHERE c.client_id IN (SELECT client_id FROM oldest_female_client)
AND c.client_id IN (SELECT client_id FROM lowest_salary_female_client);
------------------------------
question: What is the average amount of loan which are still on running contract with statement issuance after each transaction?
GT: SELECT AVG(T2.amount) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.status IN ('C', 'D') AND T1.frequency = 'POPLATEK PO OBRATU'
Pred: SELECT AVG(l.amount) AS average_loan_amount
FROM loan l
JOIN account a ON l.account_id = a.account_id
JOIN trans t ON l.account_id = t.account_id
WHERE l.status IN ('C', 'D') AND a.frequency = 'POPLATEK PO OBRATU';
------------------------------
question: List all ID and district for clients that can only have the right to issue permanent orders or apply for loans.
GT: SELECT T3.client_id, T2.district_id, T2.A2 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE T3.type = 'OWNER'
Pred: SELECT c.client_id, c.district_id
FROM client c
JOIN disp d ON c.client_id = d.client_id
JOIN account a ON d.account_id = a.account_id
WHERE d.type = 'OWNER';
------------------------------
question: Provide the IDs and age of the client with high level credit card, which is eligible for loans.
GT: SELECT T1.client_id, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T3.birth_date) FROM disp AS T1 INNER JOIN card AS T2 ON T2.disp_id = T1.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.type = 'gold' AND T1.type = 'OWNER'
Pred: SELECT 
    client.client_id, 
    strftime('%Y', 'now') - strftime('%Y', client.birth_date) AS age
FROM 
    client
INNER JOIN 
    card ON client.client_id = card.disp_id
INNER JOIN 
    disp ON client.client_id = disp.client_id
WHERE 
    card.type = 'gold' 
    AND disp.type = 'OWNER';
------------------------------
question: In the non-carcinogenic molecules, how many contain chlorine atoms?
GT: SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'cl' AND T1.label = '-'
Pred: SELECT COUNT(*)
FROM molecule
JOIN atom ON molecule.molecule_id = atom.molecule_id
WHERE molecule.label = '-' AND atom.element = 'cl';
------------------------------
question: Calculate the average number of oxygen atoms in single-bonded molecules.
GT: SELECT AVG(oxygen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS oxygen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.bond_type = '-' AND T1.element = 'o'  GROUP BY T1.molecule_id) AS oxygen_counts
Pred: SELECT AVG(CASE WHEN a.element = 'o' THEN 1 ELSE 0 END) AS average_oxygen_atoms
FROM molecule m
JOIN atom a ON m.molecule_id = a.molecule_id
JOIN bond b ON m.molecule_id = b.molecule_id
WHERE b.bond_type = '-';
------------------------------
question: On average how many carcinogenic molecules are single bonded?
GT: SELECT AVG(single_bond_count) FROM (SELECT T3.molecule_id, COUNT(T1.bond_type) AS single_bond_count FROM bond AS T1  INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T3.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T3.label = '+' GROUP BY T3.molecule_id) AS subquery
Pred: SELECT AVG(SUM(CASE WHEN b.bond_type = '-' THEN 1 ELSE 0 END)) AS average_single_bonded
FROM molecule m
JOIN bond b ON m.molecule_id = b.molecule_id
WHERE m.label = '+';
------------------------------
question: In the molecule containing sodium atoms, how many are non-carcinogenic?
GT: SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-'
Pred: SELECT COUNT(a.atom_id) AS num_non_carcinogenic_sodium_atoms
FROM molecule m
JOIN atom a ON m.molecule_id = a.molecule_id
WHERE m.label = '-' AND a.element = 'na';
------------------------------
question: What is the percentage of carbon in double-bond molecules?
GT: SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'c' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='
Pred: WITH DoubleBondAtoms AS (
    SELECT a.molecule_id, a.element
    FROM atom a
    JOIN bond b ON a.molecule_id = b.molecule_id
    WHERE b.bond_type = '='
)
SELECT 
    CAST(SUM(CASE WHEN element = 'c' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(atom_id) AS percentage
FROM DoubleBondAtoms;
------------------------------
question: Identify by their ID the molecules in which there is carbon.
GT: SELECT T.molecule_id FROM atom AS T WHERE T.element = 'c'
Pred: SELECT DISTINCT m.molecule_id
FROM molecule m
JOIN atom a ON m.molecule_id = a.molecule_id
WHERE a.element = 'c';
------------------------------
question: What elements are in a double type bond?
GT: SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = '='
Pred: SELECT DISTINCT a.element
FROM atom a
INNER JOIN bond b ON a.molecule_id = b.molecule_id AND a.molecule_id = b.molecule_id
WHERE b.bond_type = '=';
------------------------------
question: What atoms are connected in single type bonds?
GT: SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'
Pred: SELECT DISTINCT a1.atom_id
FROM atom a1
JOIN connected c ON a1.atom_id = c.atom_id
JOIN bond b ON c.bond_id = b.bond_id
WHERE b.bond_type = '-';
------------------------------
question: Indicate which atoms are connected in non-carcinogenic type molecules.
GT: SELECT DISTINCT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.label = '-'
Pred: SELECT c.atom_id, c.atom_id2
FROM connected c
JOIN atom a1 ON c.atom_id = a1.atom_id
JOIN molecule m ON a1.molecule_id = m.molecule_id
JOIN atom a2 ON c.atom_id2 = a2.atom_id
WHERE m.label = '-';
------------------------------
question: Which element is the least numerous in non-carcinogenic molecules?
GT: SELECT T.element FROM (SELECT T1.element, COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(DISTINCT T1.molecule_id) ASC LIMIT 1) t
Pred: SELECT *
   FROM molecule
   WHERE label = '-';
------------------------------
question: What type of label is not on molecules with atoms with tin?
GT: SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element != 'sn'
Pred: SELECT label 
FROM molecule 
WHERE label NOT IN (
    SELECT m.label 
    FROM molecule m 
    JOIN atom a ON m.molecule_id = a.molecule_id 
    WHERE a.element = 'sn'
);
------------------------------
question: How many atoms with iodine and with sulfur type elements are there in single bond molecules?
GT: SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums , COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'
Pred: SELECT COUNT(DISTINCT a.atom_id) AS total_atoms
FROM atom a
JOIN bond b ON a.molecule_id = b.molecule_id
WHERE a.element IN ('i', 's') AND b.bond_type = '-';
------------------------------
question: Identify all the atoms that are connected to the atoms of the TR181 molecule.
GT: SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T1.molecule_id = 'TR181'
Pred: SELECT a2.atom_id
FROM connected c
JOIN atom a1 ON c.atom_id = a1.atom_id
JOIN atom a2 ON c.atom_id2 = a2.atom_id
WHERE a1.atom_id IN (
    SELECT a1.atom_id
    FROM atom a1
    JOIN molecule m ON a1.molecule_id = m.molecule_id
    WHERE m.molecule_id = 'TR181'
)
UNION
SELECT a1.atom_id
FROM connected c
JOIN atom a1 ON c.atom_id = a1.atom_id
JOIN atom a2 ON c.atom_id2 = a2.atom_id
WHERE a2.atom_id IN (
    SELECT a1.atom_id
    FROM atom a1
    JOIN molecule m ON a1.molecule_id = m.molecule_id
    WHERE m.molecule_id = 'TR181'
);
------------------------------
question: What percentage of carcinogenic-type molecules does not contain fluorine?
GT: SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element <> 'f' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
Pred: WITH molecule_atom_count AS (
    SELECT 
        m.molecule_id,
        COUNT(DISTINCT a.atom_id) AS total_atoms,
        SUM(CASE WHEN a.element = 'f' THEN 1 ELSE 0 END) AS fluorine_atoms
    FROM 
        molecule m
    JOIN 
        atom a ON m.molecule_id = a.molecule_id
    WHERE 
        m.label = '+'
    GROUP BY 
        m.molecule_id
)
SELECT 
    100 - (SUM(fluorine_atoms) * 100.0 / SUM(total_atoms)) AS percentage_no_fluorine
FROM 
    molecule_atom_count;
------------------------------
question: What is the percentage of carcinogenic molecules in triple type bonds?
GT: SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#'
Pred: SELECT 
    CAST(SUM(CASE WHEN b.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(b.bond_id) AS percent
FROM 
    molecule m
JOIN 
    bond b ON m.molecule_id = b.molecule_id
WHERE 
    m.label = '+';
------------------------------
question: Please list top three elements of the toxicology of the molecule TR000 in alphabetical order.
GT: SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR000' ORDER BY T.element LIMIT 3
Pred: SELECT a.element
FROM molecule m
JOIN atom a ON m.molecule_id = a.molecule_id
WHERE m.molecule_id = 'TR000'
ORDER BY a.element ASC
LIMIT 3;
------------------------------
question: What are the atoms that are bonded in the molecule TR001 with the bond ID of TR001_2_6?
GT: SELECT SUBSTR(T.bond_id, 1, 7) AS atom_id1 , T.molecule_id || SUBSTR(T.bond_id, 8, 2) AS atom_id2 FROM bond AS T WHERE T.molecule_id = 'TR001' AND T.bond_id = 'TR001_2_6'
Pred: SELECT c.atom_id, c.atom_id2
FROM molecule m
JOIN bond b ON m.molecule_id = b.molecule_id
JOIN connected c ON b.bond_id = c.bond_id
WHERE m.molecule_id = 'TR001' AND b.bond_id = 'TR001_2_6';
------------------------------
question: What are the atom IDs of the bond TR000_2_5?
GT: SELECT T.atom_id FROM connected AS T WHERE T.bond_id = 'TR000_2_5'
Pred: SELECT atom_id, atom_id2
FROM connected
WHERE bond_id = 'TR000_2_5';
------------------------------
question: Please list top five molecules that have double bonds in alphabetical order.
GT: SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '=' ORDER BY T.molecule_id LIMIT 5
Pred: SELECT m.label
FROM molecule m
INNER JOIN bond b ON m.molecule_id = b.molecule_id
WHERE b.bond_type = ' = '
ORDER BY m.label
LIMIT 5;
------------------------------
question: Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic?
GT: SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T1.molecule_id) FROM bond AS T1  WHERE T1.molecule_id = 'TR010' GROUP BY T1.bond_type ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1 ) AS T
Pred: SELECT 
    (SELECT bond_type 
     FROM bond 
     WHERE molecule_id = 'TR010' 
     GROUP BY bond_type 
     ORDER BY COUNT(bond_type) DESC 
     LIMIT 1) AS majority_bond_type,
    CASE 
        WHEN label = '+' THEN 'Carcinogenic'
        ELSE 'Non-Carcinogenic'
    END AS is_carcinogenic
FROM 
    molecule 
WHERE 
    molecule_id = 'TR010';
------------------------------
question: Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order.
GT: SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-' ORDER BY T2.molecule_id LIMIT 3
Pred: SELECT 
    m.molecule_id
FROM 
    molecule m
JOIN 
    bond b ON m.molecule_id = b.molecule_id
WHERE 
    m.label = '-' AND b.bond_type = '-'
ORDER BY 
    m.molecule_id
LIMIT 3;
------------------------------
question: Please list top two bonds that happened with the molecule TR006 in alphabetical order.
GT: SELECT DISTINCT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.molecule_id = 'TR006' ORDER BY T2.bond_id LIMIT 2
Pred: SELECT 
    bond_type
FROM 
    bond
WHERE 
    molecule_id = 'TR006'
ORDER BY 
    bond_type ASC
LIMIT 2;
------------------------------
question: How many bonds which involved atom 12 does molecule TR009 have?
GT: SELECT COUNT(T2.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR009' AND T2.atom_id = T1.molecule_id || '_1' AND T2.atom_id2 = T1.molecule_id || '_2'
Pred: SELECT COUNT(DISTINCT c.bond_id) AS total_bonds
FROM connected c
WHERE c.atom_id = 'TR009_12' OR c.atom_id2 = 'TR009_12';
------------------------------
question: Which molecule does the atom TR001_10 belong to? Please state whether this molecule is carcinogenic or not.
GT: SELECT T2.molecule_id , IIF(T2.label = '+', 'YES', 'NO') AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'
Pred: SELECT 
    m.molecule_id,
    CASE 
        WHEN m.label = '+' THEN 'Carcinogenic'
        ELSE 'Non-Carcinogenic'
    END AS Carcinogenicity
FROM 
    atom a
JOIN 
    molecule m ON a.molecule_id = m.molecule_id
WHERE 
    a.atom_id = 'TR001_10';
------------------------------
question: How many molecules have a triple bond type?
GT: SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.bond_type = '#'
Pred: SELECT COUNT(DISTINCT m.molecule_id) AS num_molecules
FROM molecule m
INNER JOIN bond b ON m.molecule_id = b.molecule_id
WHERE b.bond_type = '#';
------------------------------
question: How many connections does the atom 19 have?
GT: SELECT COUNT(T.bond_id) FROM connected AS T WHERE SUBSTR(T.atom_id, -2) = '19'
Pred: SELECT COUNT(bond_id) AS connection_count
FROM connected
WHERE atom_id = 'TR_19' OR atom_id2 = 'TR_19';
------------------------------
question: What are the bonds that have phosphorus and nitrogen as their atom elements?
GT: SELECT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id IN ( SELECT T3.bond_id FROM connected AS T3 INNER JOIN atom AS T4 ON T3.atom_id = T4.atom_id WHERE T4.element = 'p' ) AND T1.element = 'n'
Pred: SELECT b.bond_id
FROM bond b
JOIN atom b1 ON b.molecule_id = b1.molecule_id AND b.bond_id = b1.atom_id
JOIN atom b2 ON b.molecule_id = b2.molecule_id AND b.bond_id = b2.atom_id
WHERE (b1.element = 'p' AND b2.element = 'n') OR (b1.element = 'n' AND b2.element = 'p');
------------------------------
question: Is the molecule with the most double bonds carcinogenic?
GT: SELECT T1.label FROM molecule AS T1 INNER JOIN ( SELECT T.molecule_id, COUNT(T.bond_type) FROM bond AS T WHERE T.bond_type = '=' GROUP BY T.molecule_id ORDER BY COUNT(T.bond_type) DESC LIMIT 1 ) AS T2 ON T1.molecule_id = T2.molecule_id
Pred: WITH DoubleBondsCTE AS (
    SELECT 
        b.molecule_id,
        COUNT(b.bond_id) AS double_bond_count
    FROM 
        bond b
    WHERE 
        b.bond_type = ' = ' 
    GROUP BY 
        b.molecule_id
),
MaxDoubleBondsCTE AS (
    SELECT 
        db.molecule_id,
        db.double_bond_count
    FROM 
        DoubleBondsCTE db
    WHERE 
        db.double_bond_count = (SELECT MAX(double_bond_count) FROM DoubleBondsCTE)
)
SELECT 
    m.label
FROM 
    MaxDoubleBondsCTE mdc
JOIN 
    molecule m ON mdc.molecule_id = m.molecule_id
WHERE 
    m.label = '+';
------------------------------
question: What is the average number of bonds the atoms with the element iodine have?
GT: SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'
Pred: WITH AtomBonds AS (
    SELECT 
        a.atom_id,
        COUNT(b.bond_id) AS bond_count
    FROM 
        atom a
    JOIN 
        bond b ON a.molecule_id = b.molecule_id
    WHERE 
        a.element = 'i'
    GROUP BY 
        a.atom_id
)
SELECT 
    AVG(bond_count) AS average_bond_count
FROM 
    AtomBonds;
------------------------------
question: List the bond type and the bond ID of the atom 45.
GT: SELECT T1.bond_type, T1.bond_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE SUBSTR(T2.atom_id, 7, 2) = '45'
Pred: SELECT b.bond_type, b.bond_id
FROM bond b
JOIN atom a ON b.molecule_id = a.molecule_id
WHERE SUBSTR(a.atom_id, 7, 2) + 0 = 45
AND b.bond_type IN (' = ', '-', '#');
------------------------------
question: List all the elements of atoms that can not bond with any other atoms.
GT: SELECT DISTINCT T.element FROM atom AS T WHERE T.element NOT IN ( SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id )
Pred: SELECT a.element
FROM atom a
WHERE a.atom_id NOT IN (SELECT c.atom_id FROM connected c);
------------------------------
question: What are the atoms of the triple bond with the molecule "TR041"?
GT: SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T3.molecule_id = 'TR041'
Pred: SELECT DISTINCT a.atom_id
FROM molecule m
JOIN bond b ON m.molecule_id = b.molecule_id
JOIN atom a ON m.molecule_id = a.molecule_id
WHERE m.molecule_id = 'TR041' AND b.bond_type = '#';
------------------------------
question: What are the elements of the atoms of TR144_8_19?
GT: SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR144_8_19'
Pred: SELECT a1.element, a2.element
FROM bond b
JOIN connected c ON b.bond_id = c.bond_id
JOIN atom a1 ON c.atom_id = a1.atom_id
JOIN atom a2 ON c.atom_id2 = a2.atom_id
WHERE b.bond_id = 'TR144_8_19';
------------------------------
question: Of all the carcinogenic molecules, which one has the most double bonds?
GT: SELECT T.molecule_id FROM ( SELECT T3.molecule_id, COUNT(T1.bond_type) FROM bond AS T1 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '+' AND T1.bond_type = '=' GROUP BY T3.molecule_id ORDER BY COUNT(T1.bond_type) DESC LIMIT 1 ) AS T
Pred: SELECT 
    m.molecule_id,
    m.label,
    COUNT(b.bond_id) AS double_bond_count
FROM 
    molecule m
JOIN 
    bond b ON m.molecule_id = b.molecule_id
WHERE 
    m.label = '+' AND b.bond_type = ' = '
GROUP BY 
    m.molecule_id, m.label
ORDER BY 
    double_bond_count DESC
LIMIT 1;
------------------------------
question: What is the least common element of all carcinogenic molecules?
GT: SELECT T.element FROM ( SELECT T2.element, COUNT(DISTINCT T2.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' GROUP BY T2.element ORDER BY COUNT(DISTINCT T2.molecule_id) LIMIT 1 ) t
Pred: WITH CarcinogenicMolecules AS (
    SELECT m.molecule_id, a.element
    FROM molecule m
    INNER JOIN atom a ON m.molecule_id = a.molecule_id
    WHERE m.label = '+'
),
ElementCounts AS (
    SELECT element, COUNT(*) AS element_count
    FROM CarcinogenicMolecules
    GROUP BY element
)
SELECT element
FROM ElementCounts
WHERE element_count = (SELECT MIN(element_count) FROM ElementCounts);
------------------------------
question: What are the atoms that can bond with the atom that has the element lead?
GT: SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'pb'
Pred: SELECT atom_id2
FROM connected
WHERE atom_id = (
    SELECT atom_id
    FROM atom
    WHERE element = 'pb'
);
------------------------------
question: List the elements of all the triple bonds.
GT: SELECT DISTINCT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '#'
Pred: SELECT DISTINCT a1.element, a2.element
FROM atom a1
JOIN connected c ON a1.atom_id = c.atom_id
JOIN bond b ON c.bond_id = b.bond_id
WHERE b.bond_type = '#';
------------------------------
question: What percentage of bonds have the most common combination of atoms' elements?
GT: SELECT CAST((SELECT COUNT(T1.atom_id) FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id GROUP BY T2.bond_type ORDER BY COUNT(T2.bond_id) DESC LIMIT 1 ) AS REAL) * 100 / ( SELECT COUNT(atom_id) FROM connected )
Pred: WITH MostCommonAtoms AS (
    SELECT a1.element, a2.element, COUNT(*) AS count
    FROM atom a1
    JOIN atom a2 ON a1.molecule_id = a2.molecule_id AND a1.atom_id < a2.atom_id
    GROUP BY a1.element, a2.element
    ORDER BY count DESC
    LIMIT 1
),
TotalBonds AS (
    SELECT COUNT(*) AS total_bonds
    FROM bond
),
BondsMostCommonAtoms AS (
    SELECT COUNT(*) AS most_common_bonds
    FROM bond b
    JOIN MostCommonAtoms mca ON b.molecule_id IN (
        SELECT a.molecule_id
        FROM atom a
        WHERE a.element = mca.element
    )
)
SELECT 
    (CAST(bmca.most_common_bonds AS REAL) / tb.total_bonds) * 100 AS percentage
FROM BondsMostCommonAtoms bmca, TotalBonds tb;
------------------------------
question: What are the bond type for atoms with element Tin?
GT: SELECT DISTINCT T3.bond_type FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T1.element = 'sn'
Pred: SELECT b.bond_type
FROM atom a
INNER JOIN bond b ON a.molecule_id = b.molecule_id
WHERE a.element = 'sn';
------------------------------
question: What is the composition of element chlorine in percentage among the single bond molecules?
GT: SELECT CAST(COUNT(CASE WHEN T.element = 'cl' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id) FROM ( SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T
Pred: WITH SingleBondMolecules AS (
    SELECT 
        b.molecule_id
    FROM 
        bond b
    WHERE 
        b.bond_type = '-'
    GROUP BY 
        b.molecule_id
    HAVING 
        COUNT(DISTINCT b.bond_type) = 1
),
ChlorineAtoms AS (
    SELECT 
        a.molecule_id,
        COUNT(CASE WHEN a.element = 'cl' THEN 1 END) AS chlorine_count
    FROM 
        atom a
    INNER JOIN 
        SingleBondMolecules sbm ON a.molecule_id = sbm.molecule_id
    GROUP BY 
        a.molecule_id
),
TotalAtoms AS (
    SELECT 
        a.molecule_id,
        COUNT(a.atom_id) AS total_count
    FROM 
        atom a
    INNER JOIN 
        SingleBondMolecules sbm ON a.molecule_id = sbm.molecule_id
    GROUP BY 
        a.molecule_id
)
SELECT 
    AVG(CAST(ca.chlorine_count AS REAL) / ta.total_count) * 100 AS percent
FROM 
    ChlorineAtoms ca
INNER JOIN 
    TotalAtoms ta ON ca.molecule_id = ta.molecule_id;
------------------------------
question: What are the labels for TR000, TR001 and TR002?
GT: SELECT molecule_id, T.label FROM molecule AS T WHERE T.molecule_id IN ('TR000', 'TR001', 'TR002')
Pred: SELECT label
FROM molecule
WHERE molecule_id IN ('TR000', 'TR001', 'TR002');
------------------------------
question: List down the bond type for molecules from molecule id TR000 to TR050.
GT: SELECT T2.molecule_id, T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id BETWEEN 'TR000' AND 'TR050'
Pred: SELECT 
    bond_type
FROM 
    bond
WHERE 
    molecule_id BETWEEN 'TR000' AND 'TR050'
ORDER BY 
    molecule_id;
------------------------------
question: How many bond id have element iodine?
GT: SELECT COUNT(T3.bond_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.element = 'i'
Pred: SELECT COUNT(b.bond_id) AS num_bonds
FROM bond b
JOIN connected c ON b.bond_id = c.bond_id
JOIN atom a ON c.atom_id = a.atom_id
WHERE a.element = 'i';
------------------------------
question: Does bond id TR001_1_8 have both element of chlorine and carbon?
GT: SELECT T2.bond_id, T2.atom_id2, T1.element AS flag_have_CaCl FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T2.bond_id = 'TR001_1_8' AND (T1.element = 'c1' OR T1.element = 'c')
Pred: SELECT c.bond_id
FROM connected c
JOIN atom a1 ON c.atom_id = a1.atom_id
JOIN atom a2 ON c.atom_id2 = a2.atom_id
WHERE c.bond_id = 'TR001_1_8'
GROUP BY c.bond_id
HAVING 'cl' IN (a1.element, a2.element) AND 'c' IN (a1.element, a2.element);
------------------------------
question: What is the percentage of element chlorine in carcinogenic molecules?
GT: SELECT CAST(COUNT( CASE WHEN T1.element = 'cl' THEN T1.element ELSE NULL END) AS REAL) * 100 / COUNT(T1.element) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
Pred: SELECT 
    ROUND(CAST(SUM(CASE WHEN a.element = 'cl' THEN 1 ELSE 0 END) AS REAL) / COUNT(a.element) * 100, 2) AS percentage
FROM 
    molecule m
JOIN 
    atom a ON m.molecule_id = a.molecule_id
WHERE 
    m.label = '+';
------------------------------
question: Give me the molecule ID of the double bond type.
GT: SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '='
Pred: SELECT molecule_id
FROM bond
WHERE bond_type = ' = ';
------------------------------
question: How many of the single bond type molecules are non-carcinogenic?
GT: SELECT COUNT(DISTINCT T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-'
Pred: SELECT COUNT(*) 
FROM molecule m
JOIN bond b ON m.molecule_id = b.molecule_id
WHERE m.label = '-' AND b.bond_type = '-';
------------------------------
question: Tally the toxicology element of the 4th atom of each molecule that was carcinogenic.
GT: SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, -1) = '4' AND LENGTH(T1.atom_id) = 7
Pred: SELECT 
    SUBSTR(a.atom_id, 7, 1) AS fourth_atom,
    COUNT(*) AS count_fourth_atom
FROM 
    molecule m
JOIN 
    atom a ON m.molecule_id = a.molecule_id
WHERE 
    m.label = '+'
GROUP BY 
    SUBSTR(a.atom_id, 7, 1)
ORDER BY 
    count_fourth_atom DESC;
------------------------------
question: What is the ratio of Hydrogen elements in molecule ID TR006? List the ratio with its label.
GT: WITH SubQuery AS (SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006') SELECT CAST(COUNT(CASE WHEN element = 'h' THEN atom_id ELSE NULL END) AS REAL) / (CASE WHEN COUNT(atom_id) = 0 THEN NULL ELSE COUNT(atom_id) END) AS ratio, label FROM SubQuery GROUP BY label
Pred: SELECT 
    m.label,
    CAST(SUM(CASE WHEN a.element = 'h' THEN 1 ELSE 0 END) AS REAL) / COUNT(a.element) AS ratio
FROM 
    atom a
JOIN 
    molecule m ON a.molecule_id = m.molecule_id
WHERE 
    a.molecule_id = 'TR006'
GROUP BY 
    m.label;
------------------------------
question: Determine the bond type that is formed in the chemical compound containing element Carbon.
GT: SELECT DISTINCT T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c'
Pred: SELECT b.bond_type, COUNT(*) AS count
FROM molecule m
JOIN atom a ON m.molecule_id = a.molecule_id
JOIN bond b ON m.molecule_id = b.molecule_id
WHERE a.element = 'c'
GROUP BY b.bond_type
ORDER BY count DESC;
------------------------------
question: Name chemical elements that form a bond TR001_10_11.
GT: SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_10_11'
Pred: SELECT a1.element AS element1, a2.element AS element2
FROM atom a1
JOIN atom a2 ON a1.molecule_id = a2.molecule_id
JOIN bond b ON a1.molecule_id = b.molecule_id
WHERE b.bond_id = 'TR001_10_11'
AND a1.atom_id = '10'
AND a2.atom_id = '11';
------------------------------
question: Among all chemical compounds identified in the database, what percent of compounds form a triple-bond.
GT: SELECT CAST(COUNT(CASE WHEN T.bond_type = '#' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T
Pred: SELECT 
    (COUNT(DISTINCT CASE WHEN b.bond_type = '#' THEN m.molecule_id END) * 100.0 / COUNT(DISTINCT m.molecule_id)) AS percentage_of_triple_bonded_molecules
FROM 
    molecule m
JOIN 
    bond b ON m.molecule_id = b.molecule_id;
------------------------------
question: Among all chemical compounds that contain molecule TR047, identify the percent that form a double-bond.
GT: SELECT CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T WHERE T.molecule_id = 'TR047'
Pred: SELECT 
    CAST(SUM(CASE WHEN b.bond_type = ' = ' THEN 1 ELSE 0 END) AS REAL) / COUNT(b.bond_id) AS percent
FROM 
    bond b
WHERE 
    b.molecule_id = 'TR047';
------------------------------
question: Identify whether the molecule that contains atom TR001_1 is carcinogenic.
GT: SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_1'
Pred: SELECT 
    CASE 
        WHEN m.label = '+' THEN 'Carcinogenic'
        ELSE 'Non-Carcinogenic'
    END AS result
FROM 
    molecule m
WHERE 
    m.molecule_id = (
        SELECT 
            a.molecule_id 
        FROM 
            atom a 
        WHERE 
            a.atom_id = 'TR001_1'
    );
------------------------------
question: Is molecule TR151 carcinogenic?
GT: SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR151'
Pred: SELECT 
    CASE 
        WHEN m.label = '+' THEN 'Yes'
        ELSE 'No'
    END AS is_carcinogenic
FROM 
    molecule m
WHERE 
    m.molecule_id = 'TR151';
------------------------------
question: Identify the atoms belong to the molecule with ID between TR010 to TR050 that contain the element carbon.
GT: SELECT T.atom_id FROM atom AS T WHERE T.molecule_id BETWEEN 'TR010' AND 'TR050' AND T.element = 'c'
Pred: SELECT a.atom_id
FROM atom a
JOIN molecule m ON a.molecule_id = m.molecule_id
WHERE a.element = 'c'
  AND SUBSTR(m.molecule_id, 3, 3) >= '10'
  AND SUBSTR(m.molecule_id, 3, 3) <= '50';
------------------------------
question: Which bond ids are double-bond with carcinogenic compound?
GT: SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.bond_type = '='
Pred: SELECT b.bond_id
FROM molecule m
JOIN bond b ON m.molecule_id = b.molecule_id
WHERE m.label = '+' AND b.bond_type = ' = ';
------------------------------
question: Indicate the molecule id is belonging to the TR000_1_2 bond that has the first atom named TR000_1.
GT: SELECT T2.molecule_id, T2.bond_id, T1.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR000_1' AND T2.bond_id = 'TR000_1_2'
Pred: SELECT b.molecule_id
FROM bond b
JOIN connected c ON b.bond_id = c.bond_id
JOIN atom a ON c.atom_id = a.atom_id
WHERE b.bond_id = 'TR000_1_2' AND a.atom_id = 'TR000_1';
------------------------------
question: Calculate the percentage of molecules containing carcinogenic compounds that element is hydrogen.
GT: SELECT CAST(COUNT(CASE WHEN T1.element = 'h' AND T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id
Pred: SELECT 
    ROUND(CAST(COUNT(CASE WHEN a.element = 'h' AND m.label = '+' THEN 1 END) AS REAL) / COUNT(*), 2) * 100.0 AS percentage
FROM 
    molecule m
JOIN 
    atom a ON m.molecule_id = a.molecule_id;
------------------------------
question: Is molecule TR124 carcinogenic?
GT: SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR124'
Pred: SELECT label
FROM molecule
WHERE molecule_id = 'TR124' AND label = '+';
------------------------------
question: What atoms comprise TR186?
GT: SELECT T.atom_id FROM atom AS T WHERE T.molecule_id = 'TR186'
Pred: SELECT element
FROM atom
WHERE molecule_id = 'TR186';
------------------------------
question: Name the elements that comprise the atoms of bond TR001_2_4.
GT: SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_2_4'
Pred: SELECT DISTINCT a.element
FROM atom a
JOIN bond b ON a.molecule_id = b.molecule_id
WHERE b.bond_id = 'TR001_2_4';
------------------------------
question: How many double bonds does TR006 have and is it carcinogenic?
GT: SELECT COUNT(T1.bond_id), T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' AND T2.molecule_id = 'TR006' GROUP BY T2.label
Pred: SELECT 
    COUNT(b.bond_id) AS double_bond_count,
    CASE 
        WHEN m.label = '+' THEN 'Carcinogenic'
        WHEN m.label = '-' THEN 'Non-Carcinogenic'
        ELSE 'Unknown'
    END AS carcinogenicity
FROM 
    molecule m
JOIN 
    bond b ON m.molecule_id = b.molecule_id
WHERE 
    m.molecule_id = 'TR006' AND b.bond_type = ' = ';
------------------------------
question: List all carcinogenic molecules and their elements.
GT: SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
Pred: SELECT m.molecule_id, a.element
FROM molecule m
INNER JOIN atom a ON m.molecule_id = a.molecule_id
WHERE m.label = '+' AND a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');
------------------------------
question: Name all bonds with single bond types and what atoms are connected to the molecules.
GT: SELECT T1.bond_id, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'
Pred: SELECT b.bond_id, c.atom_id
FROM bond b
JOIN connected c ON b.bond_id = c.bond_id
WHERE b.bond_type = '-';
------------------------------
question: Which molecules have triple bonds and list all the elements they contain.
GT: SELECT DISTINCT T1.molecule_id, T2.element FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'
Pred: SELECT m.molecule_id, a.element
FROM molecule m
INNER JOIN bond b ON m.molecule_id = b.molecule_id
INNER JOIN atom a ON m.molecule_id = a.molecule_id
WHERE b.bond_type = '#';
------------------------------
question: How many bonds are created by bonding atoms with chlorine element?
GT: SELECT COUNT(T1.bond_id) FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T2.element = 'cl'
Pred: SELECT COUNT(*) AS total_bonds
FROM atom a
INNER JOIN bond b ON a.molecule_id = b.molecule_id
WHERE a.element = 'cl';
------------------------------
question: List out the atom id that belongs to the TR346 molecule and how many bond type can be created by this molecule?
GT: SELECT T1.atom_id, COUNT(DISTINCT T2.bond_type),T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR000' GROUP BY T1.atom_id, T2.bond_type
Pred: SELECT a.atom_id, COUNT(DISTINCT b.bond_type) AS bond_count
FROM atom a
JOIN bond b ON a.molecule_id = b.molecule_id
WHERE a.molecule_id = 'TR346'
GROUP BY a.atom_id;
------------------------------
question: How many molecules have a double bond type and among these molecule, how many are labeled as carcinogenic compound?
GT: SELECT COUNT(DISTINCT T2.molecule_id), SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '='
Pred: SELECT COUNT(DISTINCT m.molecule_id) AS total_molecules
FROM molecule m
JOIN bond b ON m.molecule_id = b.molecule_id
WHERE b.bond_type = ' = ' AND m.label = '+';
------------------------------
question: How many molecules without sulphur element is not having double bond?
GT: SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element <> 's' AND T2.bond_type <> '='
Pred: SELECT COUNT(DISTINCT m.molecule_id) AS total_molecules
FROM molecule m
LEFT JOIN atom a ON m.molecule_id = a.molecule_id
LEFT JOIN bond b ON m.molecule_id = b.molecule_id
WHERE a.element != 's' AND b.bond_type != ' = ';
------------------------------
question: Calculate the percentage of carcinogenic molecules which contain the Chlorine element.
GT: SELECT COUNT(CASE WHEN T2.label = '+' AND T1.element = 'cl' THEN T2.molecule_id ELSE NULL END) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id
Pred: WITH CarcinogenicMolecules AS (
    SELECT m.molecule_id, m.label, a.element
    FROM molecule m
    JOIN atom a ON m.molecule_id = a.molecule_id
    WHERE m.label = '+'
)
SELECT 
    (SUM(CASE WHEN element = 'Cl' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage
FROM CarcinogenicMolecules;
------------------------------
question: What is the molecule of atom id "TR000_2" and atom id 2 "TR000_4"?
GT: SELECT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_2' AND T2.atom_id2 = 'TR000_4'
Pred: SELECT m.label AS molecule_label
FROM atom a
INNER JOIN molecule m ON a.molecule_id = m.molecule_id
WHERE a.atom_id IN ('TR000_2', 'TR000_4');
------------------------------
question: Find the percentage of atoms with single bond.
GT: SELECT CAST(COUNT(CASE WHEN T.bond_type = '-' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond t
Pred: SELECT 
    (CAST(SUM(CASE WHEN b.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) / COUNT(a.atom_id)) * 100 AS percentage
FROM 
    atom a
JOIN 
    bond b ON a.molecule_id = b.molecule_id;
------------------------------
question: Which molecule consisted of Sulphur atom with double bond?
GT: SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 's' AND T2.bond_type = '='
Pred: SELECT DISTINCT a.molecule_id
FROM atom a
INNER JOIN bond b ON a.molecule_id = b.molecule_id
WHERE a.element = 's' AND b.bond_type = ' = ';
------------------------------
question: Calculate the percentage of carcinogenic molecules with triple bonded Hidrogen atoms.
GT: SELECT CAST(SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T2.element = 'h'
Pred: SELECT 
    (CAST(SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) AS REAL) / COUNT(m.molecule_id)) * 100.0 AS percentage
FROM 
    molecule m
JOIN 
    atom a ON m.molecule_id = a.molecule_id
JOIN 
    bond b ON m.molecule_id = b.molecule_id
WHERE 
    a.element = 'h' AND b.bond_type = '#';
------------------------------
question: Among the molecules between TR004 to TR010, how many of them has single bonds?
GT: SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.molecule_id BETWEEN 'TR004' AND 'TR010' AND T.bond_type = '-'
Pred: SELECT COUNT(DISTINCT m.molecule_id) AS total_molecules
FROM molecule m
INNER JOIN bond b ON m.molecule_id = b.molecule_id
WHERE m.molecule_id BETWEEN 'TR004' AND 'TR010'
  AND b.bond_type = '-';
------------------------------
question: What is the total number of molecules with double bonded oxygen?
GT: SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '=' AND T1.element = 'o'
Pred: SELECT COUNT(DISTINCT m.molecule_id) AS total_molecules
FROM molecule m
JOIN atom a ON m.molecule_id = a.molecule_id
JOIN bond b ON m.molecule_id = b.molecule_id
WHERE a.element = 'o' AND b.bond_type = ' = ';
------------------------------
question: in molecules with triple bonds, how many of them are not carcinogenic?
GT: SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND T1.label = '-'
Pred: SELECT COUNT(molecule.molecule_id) AS count
FROM molecule
INNER JOIN bond ON molecule.molecule_id = bond.molecule_id
WHERE bond.bond_type = '#' AND molecule.label = '-';
------------------------------
question: What is the atom ID of double bonded carbon in TR012 molecule?
GT: SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T2.molecule_id = 'TR012' AND T3.bond_type = '=' AND T1.element = 'c'
Pred: SELECT a.atom_id
FROM atom a
JOIN bond b ON a.molecule_id = b.molecule_id
WHERE a.element = 'c'
  AND b.bond_type = ' = '
  AND a.molecule_id = 'TR012';
------------------------------
question: Which are the cards that have incredibly powerful foils.
GT: SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL
Pred: SELECT name
FROM cards
WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;
------------------------------
question: What are the borderless cards available without powerful foils?
GT: SELECT id FROM cards WHERE borderColor = 'borderless' AND (cardKingdomId IS NULL OR cardKingdomId IS NULL)
Pred: SELECT id
FROM cards
WHERE borderColor = 'borderless'
  AND cardKingdomFoilId IS NOT NULL
  AND cardKingdomId IS NOT NULL;
------------------------------
question: List the card names with value that cost more converted mana for the face.
GT: SELECT name FROM cards ORDER BY faceConvertedManaCost LIMIT 1
Pred: SELECT name
FROM cards
WHERE faceConvertedManaCost = (SELECT MAX(faceConvertedManaCost) FROM cards);
------------------------------
question: Name all cards with 2015 frame style ranking below 100 on EDHRec.
GT: SELECT id FROM cards WHERE edhrecRank < 100 AND frameVersion = 2015
Pred: SELECT name
FROM cards
WHERE frameVersion = '2015' AND edhrecRank < 100;
------------------------------
question: List all the mythic rarity print cards banned in gladiator format.
GT: SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'
Pred: SELECT c.name
FROM cards c
JOIN legalities l ON c.uuid = l.uuid
WHERE c.rarity = 'mythic'
  AND l.status = 'Banned'
  AND l.format = 'gladiator';
------------------------------
question: Find all cards illustrated by Stephen Daniel and describe the text of the ruling of these cards. State if these cards have missing or degraded properties and values.
GT: SELECT T1.id, T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele'
Pred: SELECT 
    c.id AS card_id,
    r.text AS ruling_text,
    CASE 
        WHEN c.hasContentWarning = 1 THEN 'Card has missing or degraded properties'
        ELSE 'Card is in good condition'
    END AS card_condition
FROM 
    cards c
INNER JOIN 
    rulings r ON c.uuid = r.uuid
WHERE 
    c.artist = 'Stephen Daniele' AND c.hasContentWarning = 1;
------------------------------
question: Name the card and artist with the most ruling information. Also state if the card is a promotional printing.
GT: SELECT T1.name, T1.artist, T1.isPromo FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.isPromo = 1 AND T1.artist = (SELECT artist FROM cards WHERE isPromo = 1 GROUP BY artist HAVING COUNT(DISTINCT uuid) = (SELECT MAX(count_uuid) FROM ( SELECT COUNT(DISTINCT uuid) AS count_uuid FROM cards WHERE isPromo = 1 GROUP BY artist ))) LIMIT 1
Pred: SELECT 
    c.name AS card_name,
    c.artist,
    c.isPromo
FROM 
    cards c
JOIN 
    rulings r ON c.uuid = r.uuid
WHERE 
    c.isPromo = 1
GROUP BY 
    c.name, c.artist
ORDER BY 
    COUNT(r.uuid) DESC
LIMIT 1;
------------------------------
question: State the alternative languages available for card named Annul numbered 29.
GT: SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Annul' AND T1.number = 29
Pred: SELECT DISTINCT f.language
FROM cards c
JOIN foreign_data f ON c.uuid = f.uuid
WHERE c.name = 'annul' AND c.number = '29';
------------------------------
question: Calculate the percentage of the cards availabe in Chinese Simplified.
GT: SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid
Pred: SELECT 
    (CAST(SUM(CASE WHEN fd.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) / COUNT(c.id)) * 100 AS percentage
FROM 
    cards c
JOIN 
    foreign_data fd ON c.uuid = fd.uuid;
------------------------------
question: How many types of cards does the artist Aaron Boyd illustrated about card art?
GT: SELECT COUNT(type) FROM cards WHERE artist = 'Aaron Boyd'
Pred: SELECT COUNT(DISTINCT types) AS card_types_count
FROM cards
WHERE artist = 'Aaron Boyd';
------------------------------
question: What type of promotion is of card 'Duress'?
GT: SELECT promoTypes FROM cards WHERE name = 'Duress' AND promoTypes IS NOT NULL
Pred: SELECT promoTypes
FROM cards
WHERE name = 'Duress';
------------------------------
question: What is the type of the card "Ancestor's Chosen" as originally printed?
GT: SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen' AND originalType IS NOT NULL
Pred: SELECT originalType 
FROM cards 
WHERE name = 'Ancestor''s Chosen';
------------------------------
question: cards are not directly linked to language but through table 'set'. you need to add set in covered table & rephrase your question
What are the languages available for the set that card 'Angel of Mercy' is in?
GT: SELECT language FROM set_translations WHERE id IN ( SELECT id FROM cards WHERE name = 'Angel of Mercy' )
Pred: SELECT st.language
FROM cards c
JOIN sets s ON c.setCode = s.code
JOIN set_translations st ON s.code = st.setCode
WHERE c.name = 'Angel of Mercy';
------------------------------
question: How many cards of legalities whose status is restricted have text boxes?
GT: SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isTextless = 0
Pred: SELECT COUNT(*) 
FROM cards c
JOIN legalities l ON c.uuid = l.uuid
WHERE l.status = 'restricted' AND c.isTextless = 0;
------------------------------
question: How many cards of legalities whose status is restricted are found in a starter deck?
GT: SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isStarter = 1
Pred: SELECT COUNT(*)
FROM cards c
JOIN legalities l ON c.uuid = l.uuid
WHERE l.status = 'restricted' AND c.isStarter = 1;
------------------------------
question: How many black border cards are only available on mtgo?
GT: SELECT COUNT(id) FROM cards WHERE availability = 'mtgo' AND borderColor = 'black'
Pred: SELECT COUNT(*) 
FROM cards 
WHERE borderColor = 'black' AND availability LIKE '%mtgo%';
------------------------------
question: What are the card layout of cards with keyword of flying?
GT: SELECT layout FROM cards WHERE keywords = 'Flying'
Pred: SELECT layout
FROM cards
WHERE keywords LIKE '%Flying%';
------------------------------
question: How many cards with original type of "Summon - Angel" have subtype other than "Angel"?
GT: SELECT COUNT(id) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel'
Pred: SELECT COUNT(*) 
FROM cards 
WHERE originalType = 'Summon - Angel' 
  AND subtypes IS NOT NULL 
  AND subtypes NOT LIKE '%Angel%';
------------------------------
question: How many cards are having future frame version and what are the legality status of these cards?
GT: SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future'
Pred: SELECT COUNT(*) AS card_count, l.status AS legality_status
FROM cards c
JOIN legalities l ON c.uuid = l.uuid
WHERE c.frameVersion = 'future' AND l.status = 'legal';
------------------------------
question: What are the cards for set OGW? State the colour for these cards.
GT: SELECT id, colors FROM cards WHERE id IN ( SELECT id FROM set_translations WHERE setCode = 'OGW' )
Pred: SELECT cards.name, cards.colors
FROM cards
JOIN sets ON cards.setCode = sets.code
WHERE sets.setCode = 'OGW';
------------------------------
question: What are the cards in set 10E with converted mana of 5 have translation and what are the languages?
GT: SELECT id, language FROM set_translations WHERE id = ( SELECT id FROM cards WHERE convertedManaCost = 5 ) AND setCode = '10E'
Pred: SELECT c.name, st.language
FROM cards c
JOIN set_translations st ON c.setCode = st.setCode
WHERE c.convertedManaCost = 5 AND c.setCode = '10E';
------------------------------
question: List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.
GT: SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'
Pred: SELECT c.name, r.date
FROM cards c
INNER JOIN rulings r ON c.uuid = r.uuid
WHERE c.originalType = 'Creature - Elf';
------------------------------
question: Pick 3 cards with rarity of uncommon, list down name these cards according to ascending order of it's ruling date.
GT: SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3
Pred: SELECT c.name
FROM cards c
JOIN rulings r ON c.uuid = r.uuid
WHERE c.rarity = 'uncommon'
ORDER BY r.date ASC
LIMIT 3;
------------------------------
question: On how many cards designed by John Avon is its foil non-powerful?
GT: SELECT COUNT(id) FROM cards WHERE (cardKingdomId IS NULL OR cardKingdomFoilId IS NULL) AND artist = 'John Avon'
Pred: SELECT COUNT(*)
FROM cards
WHERE artist = 'John Avon'
  AND cardKingdomFoilId IS NOT NULL
  AND cardKingdomId IS NOT NULL;
------------------------------
question: What is the  unconverted mana do all the cards created by Rob Alexander cost in total?
GT: SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'
Pred: SELECT SUM(CAST(REPLACE(manaCost, ',', '') AS REAL)) AS total_unconverted_mana
FROM cards
WHERE artist = 'Rob Alexander';
------------------------------
question: Lists all types of cards available in arena.
GT: SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL
Pred: SELECT subtypes AS type
FROM cards
WHERE availability = 'arena'
UNION
SELECT supertypes AS type
FROM cards
WHERE availability = 'arena';
------------------------------
question: What is the percentage of Story Spotlight cards that do not have a text box? List them by their ID.
GT: SELECT CAST(SUM(CASE WHEN isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards WHERE isStorySpotlight = 1
Pred: SELECT 
    id,
    CAST(SUM(CASE WHEN isStorySpotlight = 1 AND isTextless = 0 THEN 1 ELSE 0 END) AS REAL) / COUNT(*) * 100 AS percentage
FROM 
    cards
GROUP BY 
    id;
------------------------------
question: Calculate the percentage of cards in Spanish. List them by name.
GT: SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Spanish'
Pred: SELECT 
    c.name,
    (SUM(CASE WHEN fd.language = 'Spanish' THEN 1 ELSE 0 END) * 100.0 / COUNT(c.id)) AS percentage_spanish
FROM 
    cards c
JOIN 
    foreign_data fd ON c.uuid = fd.uuid
GROUP BY 
    c.name
ORDER BY 
    c.name;
------------------------------
question: How many Brazilian Portuguese translated sets are inside the Commander block?
GT: SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)' AND T1.block = 'Commander'
Pred: SELECT COUNT(*)
FROM sets s
JOIN set_translations st ON s.code = st.setCode
WHERE s.block = 'Commander' AND st.language = 'Portuguese (Brasil)';
------------------------------
question: Lists by ID all Creature-type cards with legal status.
GT: SELECT T1.id FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Creature'
Pred: SELECT c.id
FROM cards c
JOIN legalities l ON c.uuid = l.uuid
WHERE c.types = 'Creature' AND l.status = 'Legal';
------------------------------
question: Lists all types of cards in German.
GT: SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL
Pred: SELECT c.type
FROM cards c
JOIN foreign_data fd ON c.uuid = fd.uuid
WHERE fd.language = 'German' AND c.subtypes IS NOT NULL AND c.supertypes IS NOT NULL;
------------------------------
question: How many unknown power cards contain info about the triggered ability
GT: SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE (T1.power IS NULL OR T1.power = '*') AND T2.text LIKE '%triggered ability%'
Pred: SELECT COUNT(*)
FROM cards
WHERE (power IS NULL OR power = '*')
  AND text LIKE '%triggered ability%';
------------------------------
question: To which artist does the card with the text "Das perfekte Gegenmittel zu einer dichten Formation" belong?
GT: SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.flavorText LIKE '%DAS perfekte Gegenmittel zu einer dichten Formation%'
Pred: SELECT artist
FROM cards
WHERE text = 'Das perfekte Gegenmittel zu einer dichten Formation';
------------------------------
question: What is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?
GT: SELECT name FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French'
Pred: SELECT f.name AS foreign_name
FROM cards c
JOIN foreign_data f ON c.uuid = f.uuid
WHERE c.type = 'Creature'
  AND c.layout = 'normal'
  AND c.borderColor = 'black'
  AND c.artist = 'Matthew D. Wilson'
  AND f.language = 'French';
------------------------------
question: How many cards with print rarity have ruling text printed on 01/02/2007?
GT: SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T2.date = '2007-02-01'
Pred: SELECT COUNT(*)
FROM cards c
JOIN rulings r ON c.uuid = r.uuid
WHERE c.rarity = 'rare' AND r.date = '2007-02-01';
------------------------------
question: What percentage of cards with format commander and legal status do not have a content warning?
GT: SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'
Pred: SELECT 
    (COUNT(CASE WHEN c.hasContentWarning = 0 THEN 1 END) * 1.0 / COUNT(c.id)) * 100 AS percentage
FROM 
    cards c
JOIN 
    legalities l ON c.uuid = l.uuid
WHERE 
    l.format = 'commander' AND l.status = 'legal';
------------------------------
question: What percentage of cards without power are in French?
GT: SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL OR T1.power = '*'
Pred: WITH CardPowerLanguage AS (
    SELECT 
        c.uuid,
        c.power,
        f.language
    FROM 
        cards c
    LEFT JOIN 
        foreign_data f ON c.uuid = f.uuid
)
SELECT 
    (CAST(SUM(CASE WHEN language = 'French' AND (power IS NULL OR power = '*') THEN 1 ELSE 0 END) AS REAL) / 
     SUM(CASE WHEN power IS NULL OR power = '*' THEN 1 ELSE 0 END)) * 100 AS percentage
FROM 
    CardPowerLanguage;
------------------------------
question: Please provide the ids of top three powerful pairs of Kingdom Foil and Kingdom Cards sorted by Kingdom Foil id in alphabetical order.
GT: SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId LIMIT 3
Pred: SELECT id
FROM cards
WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL
ORDER BY cardKingdomFoilId
LIMIT 3;
------------------------------
question: What proportion of cards do not have a text box with a normal layout?
GT: SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards
Pred: SELECT 
    CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) / COUNT(*) * 100 AS proportion
FROM 
    cards
WHERE 
    isTextless = 1;
------------------------------
question: What are the card numbers that don't have multiple faces on a single card and have the subtypes Angel and Wizard?
GT: SELECT id FROM cards WHERE subtypes = 'Angel,Wizard' AND side IS NULL
Pred: SELECT number
FROM cards
WHERE otherFaceIds IS NULL
  AND subtypes LIKE '%Angel%'
  AND subtypes LIKE '%Wizard%';
------------------------------
question: Please provide top three sets that don't appear in Magic: The Gathering Online, along with their names in in alphabetical order.
GT: SELECT name FROM sets WHERE mtgoCode IS NULL ORDER BY name LIMIT 3
Pred: SELECT code, name
FROM sets
WHERE mtgoCode IS NULL OR mtgoCode = ''
ORDER BY name ASC
LIMIT 3;
------------------------------
question: What is the name of set number 5 and its translation?
GT: SELECT T1.name, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 5 GROUP BY T1.name, T2.translation
Pred: SELECT 
    sets.name AS set_name,
    set_translations.translation
FROM 
    sets
INNER JOIN 
    set_translations ON sets.code = set_translations.setCode
WHERE 
    sets.id = 5;
------------------------------
question: What is the language and expansion type of set number 206?
GT: SELECT T2.language, T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 206
Pred: SELECT s.type, st.language
FROM sets s
JOIN set_translations st ON s.code = st.setCode
WHERE s.id = 206;
------------------------------
question: Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Shadowmoor block in alphabetical order.
GT: SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2
Pred: SELECT 
    s.id AS setId,
    s.code AS setCode
FROM 
    cards c
JOIN 
    sets s ON c.setCode = s.code
JOIN 
    foreign_data fd ON c.uuid = fd.uuid
WHERE 
    s.block = 'Shadowmoor'
    AND fd.language = 'Italian'
GROUP BY 
    s.code, s.id
ORDER BY 
    s.code
LIMIT 2;
------------------------------
question: Which set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set ID in your response.
GT: SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese' AND T1.isFoilOnly = 1 AND T1.isForeignOnly = 0
Pred: SELECT sets.id
FROM sets
JOIN foreign_data ON sets.code = foreign_data.uuid
WHERE sets.isForeignOnly = 0
AND sets.isFoilOnly = 1
AND foreign_data.language = 'Japanese';
------------------------------
question: Which Russian set of cards contains the most cards overall?
GT: SELECT T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Russian' GROUP BY T1.baseSetSize ORDER BY T1.baseSetSize DESC LIMIT 1
Pred: SELECT s.name
FROM sets s
JOIN set_translations st ON s.code = st.setCode
WHERE st.language = 'Russian'
ORDER BY s.baseSetSize DESC
LIMIT 1;
------------------------------
question: What is the percentage of the set of cards that have Chinese Simplified as the language and are only available for online games?
GT: SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' AND T1.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode
Pred: SELECT 
    (CAST(COUNT(CASE WHEN c.isOnlineOnly = 1 THEN 1 END) AS REAL) * 100) / COUNT(*) AS percentage
FROM 
    cards c
JOIN 
    foreign_data fd ON c.uuid = fd.uuid
WHERE 
    fd.language = 'Chinese Simplified';
------------------------------
question: How many card border with black color ? List out the card id.
GT: SELECT id FROM cards WHERE borderColor = 'black' GROUP BY id
Pred: SELECT id, COUNT(id) AS count
FROM cards
WHERE borderColor = 'black';
------------------------------
question: How many cards have frame effect as extendedart? List out the id of those cards.
GT: SELECT id FROM cards WHERE frameEffects = 'extendedart' GROUP BY id
Pred: SELECT 
    id, 
    COUNT(*) AS card_count
FROM 
    cards
WHERE 
    frameEffects = 'extendedart'
GROUP BY 
    id;
------------------------------
question: Among black card borders, which card has full artwork?
GT: SELECT id FROM cards WHERE borderColor = 'black' AND isFullArt = 1
Pred: SELECT name
FROM cards
WHERE borderColor = 'black' AND isFullArt = 1;
------------------------------
question: Point out the language of set id "174"?
GT: SELECT language FROM set_translations WHERE id = 174
Pred: SELECT st.language
FROM sets s
JOIN set_translations st ON s.code = st.setCode
WHERE s.id = 174;
------------------------------
question: Which foreign language used by "A Pedra Fellwar"?
GT: SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'
Pred: SELECT fd.language
FROM cards c
JOIN foreign_data fd ON c.uuid = fd.uuid
WHERE c.name = 'A Pedra Fellwar';
------------------------------
question: State the set code of the set with release date of 07/13/2007?
GT: SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.releaseDate = '2007-07-13'
Pred: SELECT code 
FROM sets 
WHERE releaseDate = '07/13/2007';
------------------------------
question: Mention the base set size and set code of the set that was in block named "Masques" and "Mirage".
GT: SELECT DISTINCT T1.baseSetSize, T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block IN ('Masques', 'Mirage')
Pred: SELECT baseSetSize, setCode
FROM sets
WHERE block IN ('Masques', 'Mirage');
------------------------------
question: Give the code of sets have expansion type of 'expansion'?
GT: SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'expansion' GROUP BY T2.setCode
Pred: SELECT code
FROM sets
WHERE type = 'expansion';
------------------------------
question: Name the foreign name of the card that has boros watermark? List out the type of this card.
GT: SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'boros'
Pred: SELECT 
    fd.name AS foreign_name, 
    c.type
FROM 
    cards c
INNER JOIN 
    foreign_data fd ON c.uuid = fd.uuid
WHERE 
    c.watermark = 'boros';
------------------------------
question: What is the language and flavor text of the card that has colorpie watermark? List out the type of this card.
GT: SELECT DISTINCT T2.language, T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'colorpie'
Pred: SELECT f.language, f.flavorText, c.type
FROM cards c
INNER JOIN foreign_data f ON c.uuid = f.uuid
WHERE c.watermark = 'colorpie';
------------------------------
question: What is percentage of the cards with a converted Mana Cost of 10 in set of Abyssal Horror?
GT: SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id), T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Abyssal Horror'
Pred: SELECT 
    COUNT(CASE WHEN convertedManaCost = 10 THEN 1 END) * 100.0 / COUNT(*) AS percentage
FROM 
    cards
WHERE 
    name = 'Abyssal Horror';
------------------------------
question: Give the code of sets have expansion commander type?
GT: SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'commander'
Pred: SELECT code
FROM sets
WHERE type = 'expansion' AND block = 'commander';
------------------------------
question: Name the foreign name of the card that has abzan watermark? List out the type of this card.
GT: SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'abzan'
Pred: SELECT 
    fd.name AS foreign_name, 
    c.type
FROM 
    cards c
INNER JOIN 
    foreign_data fd ON c.uuid = fd.uuid
WHERE 
    c.watermark = 'abzan';
------------------------------
question: What is the language of the card that has azorius watermark? List out the type of this card.
GT: SELECT DISTINCT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'azorius'
Pred: SELECT 
    fd.language, 
    c.type
FROM 
    cards c
INNER JOIN 
    foreign_data fd ON c.uuid = fd.uuid
WHERE 
    c.watermark = 'Azorius';
------------------------------
question: Among the cards with a white border color, how many of them have unknown power?
GT: SELECT SUM(CASE WHEN power LIKE '%*%' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE borderColor = 'white'
Pred: SELECT COUNT(*)
FROM cards
WHERE borderColor = 'white'
  AND (power = '*' OR power IS NULL);
------------------------------
question: How many artists have designed a card with a black border color and is available in both "arena" and "mtgo" printing type?
GT: SELECT COUNT(CASE WHEN availability LIKE '%arena,mtgo%' AND borderColor = 'black' THEN 1 ELSE NULL END) FROM cards
Pred: SELECT COUNT(DISTINCT artist) AS total_artists
FROM cards
WHERE borderColor = 'black'
  AND availability LIKE '%arena,mtgo%';
------------------------------
question: How many translations are there for the set of cards with "Angel of Mercy" in it?
GT: SELECT COUNT(DISTINCT translation) FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Angel of Mercy' ) AND translation IS NOT NULL
Pred: SELECT COUNT(*) AS num_translations
FROM cards c
JOIN set_translations st ON c.setCode = st.setCode
WHERE c.name = 'Angel of Mercy';
------------------------------
question: For the set of cards with "Ancestor's Chosen" in it, is there a Korean version of it?
GT: SELECT IIF(SUM(CASE WHEN T2.language = 'Korean' AND T2.translation IS NOT NULL THEN 1 ELSE 0 END) > 0, 'YES', 'NO') FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'
Pred: SELECT fd.name AS foreign_name
FROM cards c
JOIN foreign_data fd ON c.uuid = fd.uuid
WHERE c.name = 'Ancestor''s Chosen' AND fd.language = 'Korean';
------------------------------
question: Did the set of cards with "Angel of Mercy" appear on Magic: The Gathering Online?
GT: SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'
Pred: SELECT s.mtgoCode
FROM cards c
JOIN sets s ON c.setCode = s.code
WHERE c.name = 'Angel of Mercy' AND s.mtgoCode IS NOT NULL;
------------------------------
question: Is the set of cards with Adarkar Valkyrie only available outside the United States?
GT: SELECT IIF(isForeignOnly = 1, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Adarkar Valkyrie'
Pred: SELECT s.isForeignOnly
FROM cards c
JOIN sets s ON c.setCode = s.code
WHERE c.name = 'Adarkar Valkyrie';
------------------------------
question: What's the German type of the card "Ancestor's Chosen"?
GT: SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'German'
Pred: SELECT fd.type
FROM cards c
JOIN foreign_data fd ON c.uuid = fd.uuid
WHERE c.name = 'Ancestor''s Chosen' AND fd.language = 'German';
------------------------------
question: Please list the Italian text ruling of all the cards in the set Coldsnap.
GT: SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'
Pred: SELECT r.text
FROM rulings r
JOIN cards c ON r.uuid = c.uuid
JOIN sets s ON c.setCode = s.code
JOIN set_translations st ON s.code = st.setCode
WHERE st.language = 'Italian' AND s.name = 'Coldsnap';
------------------------------
question: Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.
GT: SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC
Pred: SELECT 
    fd.name AS card_name
FROM 
    cards c
JOIN 
    sets s ON c.setCode = s.code
JOIN 
    foreign_data fd ON c.uuid = fd.uuid
WHERE 
    s.name = 'Coldsnap' 
    AND fd.language = 'Italian'
ORDER BY 
    c.convertedManaCost DESC
LIMIT 1;
------------------------------
question: For all cards illustrated by Jim Pavelec. and describe the text of the ruling of these cards. Do these cards have missing or degraded properties and values.
GT: SELECT T2.text , CASE WHEN T1.hasContentWarning = 1 THEN 'YES' ELSE 'NO' END FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Jim Pavelec'
Pred: SELECT 
    r.text AS ruling_text,
    c.hasContentWarning
FROM 
    cards c
INNER JOIN 
    rulings r ON c.uuid = r.uuid
WHERE 
    c.artist = 'Jim Pavelec';
------------------------------
question: What's the French name of the set of cards with "Tendo Ice Bridge" is in?
GT: SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL
Pred: SELECT st.translation AS FrenchSetName
FROM cards c
JOIN foreign_data fd ON c.uuid = fd.uuid
JOIN set_translations st ON fd.setCode = st.setCode
WHERE c.name = 'Tendo Ice Bridge' AND fd.language = 'French';
------------------------------
question: How many translations of the name of the set "Tenth Edition"?
GT: SELECT COUNT(DISTINCT T2.translation) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Tenth Edition' AND T2.translation IS NOT NULL
Pred: SELECT COUNT(st.translation) AS translation_count
FROM sets s
JOIN set_translations st ON s.code = st.setCode
WHERE s.name = 'Tenth Edition' AND st.translation IS NOT NULL;
------------------------------
question: Tell the Japanese name of the set which card "Fellwar Stone" is in it.
GT: SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL
Pred: SELECT st.translation
FROM cards c
JOIN sets s ON c.setCode = s.code
JOIN set_translations st ON s.code = st.setCode
WHERE c.name = 'Fellwar Stone' AND st.language = 'Japanese';
------------------------------
question: For all the set of cards that has Japanese translation, what is the percentage of them are only available in non-foil?
GT: SELECT CAST(SUM(CASE WHEN isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Japanese' )
Pred: WITH JapaneseSets AS (
    SELECT s.code
    FROM sets s
    INNER JOIN set_translations st ON s.code = st.setCode
    WHERE st.language = 'Japanese'
),
NonFoilPercentage AS (
    SELECT 
        CAST(SUM(CASE WHEN c.isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(c.id) AS percentage
    FROM cards c
    INNER JOIN JapaneseSets js ON c.setCode = js.code
)
SELECT percentage
FROM NonFoilPercentage;
------------------------------
question: For all the set of cards that has Brazil Portuguese translation, what is the percentage of them are only available online?
GT: SELECT CAST(SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Portuguese (Brazil)' )
Pred: SELECT 
    (SUM(CASE WHEN c.isOnlineOnly = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage
FROM 
    cards c
JOIN 
    foreign_data fd ON c.uuid = fd.uuid
WHERE 
    fd.language = 'Portuguese (Brazil)';
------------------------------
question: What is the most common visual frame effects among the incredibly powerful foils?
GT: SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(frameEffects) DESC LIMIT 1
Pred: SELECT frameEffects
FROM cards
WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL
GROUP BY frameEffects
ORDER BY COUNT(*) DESC
LIMIT 1;
------------------------------
question: In duels, what are the top 10 cards with the highest uncoverted mana cost?
GT: SELECT DISTINCT name FROM cards WHERE uuid IN ( SELECT uuid FROM legalities WHERE format = 'duel' ) ORDER BY manaCost DESC LIMIT 0, 10
Pred: SELECT c.name, c.manaCost
FROM cards c
INNER JOIN legalities l ON c.uuid = l.uuid
WHERE l.format = 'duel'
ORDER BY c.manaCost DESC
LIMIT 10;
------------------------------
question: When was the oldest mythic card released and what are its legal play formats?
GT: SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate LIMIT 1
Pred: SELECT c.originalReleaseDate, l.format
FROM cards c
INNER JOIN legalities l ON c.uuid = l.uuid
WHERE c.rarity = 'mythic'
  AND c.originalReleaseDate = (
    SELECT MIN(originalReleaseDate)
    FROM cards
    WHERE rarity = 'mythic'
  )
  AND l.status = 'legal';
------------------------------
question: How many rare enchantment Abundance cards are there whose play format status are all legal?
GT: SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.rarity = 'rare' AND T1.types = 'Enchantment' AND T1.name = 'Abundance' AND T2.status = 'Legal'
Pred: SELECT COUNT(*)
FROM cards c
INNER JOIN legalities l ON c.uuid = l.uuid
WHERE c.rarity = 'rare'
  AND c.types = 'Enchantment'
  AND c.name = 'Abundance'
  AND l.status = 'Legal'
GROUP BY c.name
HAVING COUNT(DISTINCT l.format) = 1;
------------------------------
question: Which of the play format has the highest number of banned status? Indicate the play format and the names of all the card meet the condition.
GT: WITH MaxBanned AS (SELECT format, COUNT(*) AS count_banned FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1) SELECT T2.format, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid INNER JOIN MaxBanned MB ON MB.format = T2.format WHERE T2.status = 'Banned'
Pred: SELECT l.format, c.name
FROM cards c
JOIN legalities l ON c.uuid = l.uuid
WHERE l.status = 'Banned'
AND l.format = (
    SELECT format
    FROM legalities
    WHERE status = 'Banned'
    GROUP BY format
    ORDER BY COUNT(*) DESC
    LIMIT 1
);
------------------------------
question: What is the language of the "Battlebond" set?
GT: SELECT language FROM set_translations WHERE id IN ( SELECT id FROM sets WHERE name = 'Battlebond' )
Pred: SELECT st.language
FROM sets s
JOIN set_translations st ON s.code = st.setCode
WHERE s.name = 'Battlebond';
------------------------------
question: Who is the illustrator that illustrated the least amount of cards? List the format of play of the cards that he/she illustrated.
GT: SELECT T1.artist, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid GROUP BY T1.artist ORDER BY COUNT(T1.id) ASC LIMIT 1
Pred: SELECT c.artist, l.format
FROM cards c
JOIN legalities l ON c.uuid = l.uuid
GROUP BY c.artist, l.format
HAVING COUNT(*) = (
    SELECT MIN(card_count)
    FROM (
        SELECT COUNT(*) AS card_count
        FROM cards
        GROUP BY artist
    )
);
------------------------------
question: What is the annual average number of sets that were released between 1/1/2012 to 12/31/2015? Indicate the common langugage of the card.
GT: SELECT (CAST(SUM(T1.id) AS REAL) / COUNT(T1.id)) / 4, T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.id = T2.id WHERE T1.releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY T1.releaseDate ORDER BY COUNT(T2.language) DESC LIMIT 1
Pred: WITH SetCounts AS (
    SELECT 
        strftime('%Y', releaseDate) AS year,
        COUNT(*) AS set_count
    FROM 
        sets
    WHERE 
        releaseDate BETWEEN '2012-01-01' AND '2015-12-31'
    GROUP BY 
        year
),
AverageSets AS (
    SELECT 
        AVG(set_count) AS average_sets
    FROM 
        SetCounts
),
CommonLanguage AS (
    SELECT 
        language
    FROM 
        set_translations st
    JOIN 
        sets s ON st.setCode = s.code
    WHERE 
        s.releaseDate BETWEEN '2012-01-01' AND '2015-12-31'
    GROUP BY 
        language
    ORDER BY 
        COUNT(*) DESC
    LIMIT 1
)
SELECT 
    (SELECT average_sets FROM AverageSets) AS average_sets,
    (SELECT language FROM CommonLanguage) AS common_language;
------------------------------
question: Find the uuid of cards in which the old school format is restricted or banned.
GT: SELECT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'Banned' OR status = 'Restricted')
Pred: SELECT c.uuid
FROM cards c
INNER JOIN legalities l ON c.uuid = l.uuid
WHERE l.format = 'oldschool' AND l.status IN ('restricted', 'banned');
------------------------------
question: Find and list the names of sets which doesn't have Japanese translation but have Korean translation.
GT: SELECT name FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Korean' AND language NOT LIKE '%Japanese%' )
Pred: SELECT s.name
FROM sets s
WHERE s.code NOT IN (
    SELECT st.setCode
    FROM set_translations st
    WHERE st.language = 'Japanese'
)
AND s.code IN (
    SELECT st.setCode
    FROM set_translations st
    WHERE st.language = 'Korean'
);
------------------------------
question: List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.
GT: SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'
Pred: SELECT c.frameVersion, c.name
FROM cards c
INNER JOIN legalities l ON c.uuid = l.uuid
WHERE c.artist = 'Allen Williams' AND l.status = 'Banned';
------------------------------
question: How many users last accessed the website after 2014/9/1?
GT: SELECT COUNT(Id) FROM users WHERE date(LastAccessDate) > '2014-09-01'
Pred: SELECT COUNT(Id) 
FROM users 
WHERE LastAccessDate > '2014-09-01';
------------------------------
question: How many users with more than 10 views created their account after the year 2013?
GT: SELECT COUNT(id) FROM users WHERE STRFTIME('%Y', CreationDate) > '2013' AND Views > 10
Pred: SELECT COUNT(*)
FROM users
WHERE Views > 10 AND CreationDate > '2013-01-01';
------------------------------
question: Who is the owner of the post "Eliciting priors from experts"?
GT: SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'
Pred: SELECT OwnerDisplayName
FROM posts
WHERE Title = 'Eliciting priors from experts';
------------------------------
question: What is the title of the post that is owned by csgillespie and has the highest popularity?
GT: SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1
Pred: SELECT Title
FROM posts
WHERE OwnerDisplayName = 'csgillespie'
ORDER BY ViewCount DESC
LIMIT 1;
------------------------------
question: What is the display name of the user who is the owner of the most valuable post?
GT: SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T1.FavoriteCount DESC LIMIT 1
Pred: SELECT OwnerDisplayName
FROM posts
WHERE FavoriteCount = (
    SELECT MAX(FavoriteCount)
    FROM posts
);
------------------------------
question: What is the display name of the user who last edited the post "Examples for teaching: Correlation does not mean causation"?
GT: SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'
Pred: SELECT LastEditorDisplayName
FROM posts
WHERE Title = 'Examples for teaching: Correlation does not mean causation';
------------------------------
question: Among the posts owned by csgillespie, how many of them are root posts?
GT: SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL
Pred: SELECT COUNT(*) 
FROM posts 
WHERE OwnerDisplayName = 'csgillespie' AND ParentId IS NULL;
------------------------------
question: What is the average number of badges obtained by a user with over 200 views?
GT: SELECT CAST(COUNT(T1.Id) AS REAL) / COUNT(DISTINCT T2.DisplayName) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Views > 200
Pred: SELECT AVG(COUNT(b.Id)) AS AverageBadges
FROM users u
JOIN badges b ON u.Id = b.UserId
WHERE u.Views > 200
GROUP BY u.Id;
------------------------------
question: Indicate the creation date of the maximum number of votes.
GT: SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1
Pred: SELECT CreationDate, COUNT(Id) AS vote_count
   FROM votes
   GROUP BY CreationDate
------------------------------
question: User No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished?
GT: SELECT IIF(T2.ClosedDate IS NULL, 'NOT well-finished', 'well-finished') AS resylt FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 23853 AND T1.CreationDate = '2013-07-12 09:08:18.0'
Pred: SELECT 
    c.PostId,
    CASE 
        WHEN p.ClosedDate IS NULL THEN 'Yes'
        ELSE 'No'
    END AS IsClosed
FROM 
    comments c
JOIN 
    posts p ON c.PostId = p.Id
WHERE 
    c.UserId = 23853 AND c.CreationDate = '2013-07-12 09:08:18.0';
------------------------------
question: For the user No.24, how many times is the number of his/her posts compared to his/her votes?
GT: SELECT CAST(COUNT(T2.Id) AS REAL) / COUNT(DISTINCT T1.Id) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.UserId = T2.OwnerUserId WHERE T1.UserId = 24
Pred: SELECT 
    CASE 
        WHEN (SELECT COUNT(Id) FROM votes WHERE UserId = 24) = 0 THEN NULL
        ELSE (SELECT COUNT(Id) FROM posts WHERE OwnerUserId = 24) / (SELECT COUNT(Id) FROM votes WHERE UserId = 24)
    END AS post_vote_ratio;
------------------------------
question: Name the user that commented 'thank you user93!'
GT: SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text = 'thank you user93!'
Pred: SELECT UserDisplayName
FROM comments
WHERE Text = 'thank you user93!';
------------------------------
question: Write all comments made by user 'A Lion.'
GT: SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'A Lion'
Pred: SELECT Text
FROM comments
WHERE UserDisplayName = 'A Lion';
------------------------------
question: Who is the editor of the post titled 'Open source tools for visualizing multi-dimensional data?'
GT: SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data?'
Pred: SELECT u.DisplayName
FROM posts p
INNER JOIN users u ON p.OwnerDisplayName = u.DisplayName
WHERE p.Title = 'Open source tools for visualizing multi-dimensional data';
------------------------------
question: List the title of posts which were edited by Vebjorn Ljosa.
GT: SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'
Pred: SELECT p.Title
FROM posts p
INNER JOIN users u ON p.LastEditorUserId = u.Id
WHERE u.DisplayName = 'Vebjorn Ljosa';
------------------------------
question: Write all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?'
GT: SELECT T2.Comment FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'
Pred: SELECT c.Text
FROM posts p
INNER JOIN comments c ON p.Id = c.PostId
WHERE p.Title = 'Why square the difference instead of taking the absolute value in standard deviation?';
------------------------------
question: Which user added a bounty amount of 50 to the post title mentioning variance?
GT: SELECT T3.DisplayName, T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T3.Id = T2.UserId WHERE T2.BountyAmount = 50 AND T1.Title LIKE '%variance%'
Pred: SELECT u.DisplayName
FROM votes v
JOIN posts p ON v.PostId = p.Id
JOIN users u ON v.UserId = u.Id
WHERE v.BountyAmount = 50 AND p.Title LIKE '%variance%';
------------------------------
question: Calculate the average view count of each post tagged as 'humor' and list the title and the comment of each post.
GT: SELECT AVG(T2.ViewCount), T2.Title, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.PostId  WHERE T2.Tags = '<humor>' GROUP BY T2.Title, T1.Text 
Pred: SELECT 
    p.Title, 
    c.Text, 
    AVG(p.ViewCount) AS AverageViewCount
FROM 
    posts p
JOIN 
    comments c ON p.Id = c.PostId
WHERE 
    p.Tags LIKE '%<humor>%'
GROUP BY 
    p.Title, 
    c.Text;
------------------------------
question: How many users from New York have a teacher and supporter badge?
GT: SELECT COUNT(DISTINCT T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name IN ('Supporter', 'Teacher') AND T2.Location = 'New York'
Pred: SELECT COUNT(u.Id) AS NumberOfUsers
FROM users u
JOIN badges b ON u.Id = b.UserId
WHERE u.Location = 'New York'
  AND b.Name IN ('Supporter', 'Teacher')
GROUP BY u.Id
HAVING COUNT(DISTINCT b.Name) = 2;
------------------------------
question: Which user created post ID 1 and what is the reputation of this user?
GT: SELECT T2.Id, T2.Reputation FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.PostId = 1
Pred: SELECT u.Reputation
FROM users u
JOIN posts p ON u.Id = p.OwnerUserId
WHERE p.Id = 1;
------------------------------
question: Which user have only one post history per post and having at least 1000 views?
GT: SELECT T2.UserId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T3.ViewCount >= 1000 GROUP BY T2.UserId HAVING COUNT(DISTINCT T2.PostHistoryTypeId) = 1
Pred: SELECT u.Id
FROM users u
JOIN posts p ON u.Id = p.OwnerUserId
JOIN postHistory ph ON p.Id = ph.PostId
WHERE p.ViewCount >= 1000
GROUP BY u.Id
HAVING COUNT(DISTINCT ph.PostId) = 1;
------------------------------
question: Which users have posted the most comments. List out the user's badge?
GT: SELECT Name FROM badges AS T1 INNER JOIN comments AS T2 ON T1.UserId = t2.UserId GROUP BY T2.UserId ORDER BY COUNT(T2.UserId) DESC LIMIT 1
Pred: WITH CommentCounts AS (
    SELECT 
        c.UserId,
        COUNT(c.Id) AS CommentCount
    FROM 
        comments c
    GROUP BY 
        c.UserId
),
MaxCommentCount AS (
    SELECT 
        MAX(CommentCount) AS MaxCount
    FROM 
        CommentCounts
),
TopCommentUsers AS (
    SELECT 
        cc.UserId
    FROM 
        CommentCounts cc
    JOIN 
        MaxCommentCount mcc ON cc.CommentCount = mcc.MaxCount
)
SELECT 
    tc.UserId,
    b.Name AS BadgeName
FROM 
    TopCommentUsers tc
JOIN 
    badges b ON tc.UserId = b.UserId;
------------------------------
question: What is the percentage difference of student badges given during 2010 and 2011?
GT: SELECT CAST(SUM(IIF(STRFTIME('%Y', Date) = '2010', 1, 0)) AS REAL) * 100 / COUNT(Id) - CAST(SUM(IIF(STRFTIME('%Y', Date) = '2011', 1, 0)) AS REAL) * 100 / COUNT(Id) FROM badges WHERE Name = 'Student'
Pred: SELECT 
    (SUM(CASE WHEN strftime('%Y', b.Date) = '2010' THEN 1 ELSE 0 END) - 
     SUM(CASE WHEN strftime('%Y', b.Date) = '2011' THEN 1 ELSE 0 END)) * 100.0 / 
    COUNT(b.Id) AS percentage_difference
FROM 
    badges b
WHERE 
    b.Name = 'Student';
------------------------------
question: What are the post history type IDs for post ID 3720 and how many unique users have commented on the post?
GT: SELECT T1.PostHistoryTypeId, (SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720) AS NumberOfUsers FROM postHistory AS T1 WHERE T1.PostId = 3720
Pred: WITH PostHistory AS (
    SELECT DISTINCT PostHistoryTypeId
    FROM postHistory
    WHERE PostId = 3720
),
CommentedUsers AS (
    SELECT COUNT(DISTINCT UserId) AS CommentedUsersCount
    FROM comments
    WHERE PostId = 3720
)
SELECT 
    ph.PostHistoryTypeId,
    cu.CommentedUsersCount
FROM PostHistory ph
CROSS JOIN CommentedUsers cu;
------------------------------
question: List out all post that are related to post ID 61217 and what is the popularity of this post?
GT: SELECT T1.ViewCount FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 61217
Pred: SELECT pl.PostId, p.ViewCount
FROM postLinks pl
JOIN posts p ON pl.PostId = p.Id
WHERE pl.RelatedPostId = 61217;
------------------------------
question: List out all post ID with score more than 60 and list out all the user ID that created these post.
GT: SELECT PostId, UserId FROM postHistory WHERE PostId IN ( SELECT Id FROM posts WHERE Score > 60 )
Pred: SELECT Id, OwnerUserId
FROM posts
WHERE Score > 60;
------------------------------
question: What is the sum of favourite count gained by user ID 686 in 2011?
GT: SELECT SUM(DISTINCT FavoriteCount) FROM posts WHERE Id IN ( SELECT PostId FROM postHistory WHERE UserId = 686 AND STRFTIME('%Y', CreationDate) = '2011' )
Pred: SELECT SUM(FavoriteCount) AS TotalFavoriteCount
FROM posts
WHERE OwnerUserId = 686
  AND strftime('%Y', CreationDate) = '2011';
------------------------------
question: How many users obtained the "Announcer" badge?
GT: SELECT COUNT(id) FROM badges WHERE Name = 'Announcer'
Pred: SELECT COUNT(DISTINCT UserId) AS NumberOfUsers
FROM badges
WHERE Name = 'Announcer';
------------------------------
question: State the detailed content of the comment which was created on 7/19/2010 7:25:47 PM.
GT: SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0'
Pred: SELECT Text
FROM comments
WHERE CreationDate = '2010-07-19 19:25:47';
------------------------------
question: What are the name of badge that users who have the highest reputation obtained?
GT: SELECT T2.name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId ORDER BY T1.Reputation DESC LIMIT 1
Pred: SELECT b.Name
FROM badges b
JOIN users u ON b.UserId = u.Id
WHERE u.Reputation = (
    SELECT MAX(Reputation)
    FROM users
);
------------------------------
question: What is the comment's rating score of the post which was created on 7/19/2010 7:19:56 PM
GT: SELECT T1.Score FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:19:56.0'
Pred: SELECT comments.Score
FROM comments
JOIN posts ON comments.PostId = posts.Id
WHERE posts.CreationDate = '2010-07-19 19:19:56.0';
------------------------------
question: Which users have the highest number of views?
GT: SELECT Id, DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )
Pred: SELECT DisplayName
FROM users
WHERE Views = (
    SELECT MAX(Views)
    FROM users
);
------------------------------
question: What is the name of tags used by John Salvatier's?
GT: SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Salvatier'
Pred: SELECT t.TagName
FROM users u
INNER JOIN posts p ON u.Id = p.OwnerUserId
INNER JOIN tags t ON p.Tags = t.Id
WHERE u.DisplayName = 'John Salvatier';
------------------------------
question: How many posts were created by Daniel Vassallo?
GT: SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Daniel Vassallo'
Pred: SELECT COUNT(Id) AS NumberOfPosts
FROM posts
WHERE OwnerDisplayName = 'Daniel Vassallo';
------------------------------
question: How many votes were made by Harlan?
GT: SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN votes AS T3 ON T3.PostId = T2.PostId WHERE T1.DisplayName = 'Harlan'
Pred: SELECT COUNT(votes.Id) AS VoteCount
FROM votes
JOIN users ON votes.UserId = users.Id
WHERE users.DisplayName = 'Harlan';
------------------------------
question: Which post by slashnick has the most answers count? State the post ID.
GT: SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1
Pred: SELECT Id
FROM posts
WHERE OwnerDisplayName = 'slashnick'
AND AnswerCount = (
    SELECT MAX(AnswerCount)
    FROM posts
    WHERE OwnerDisplayName = 'slashnick'
);
------------------------------
question: Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?
GT: SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1
Pred: SELECT 
    u.DisplayName AS OwnerDisplayName,
    SUM(p.ViewCount) AS TotalViewCount
FROM 
    posts p
JOIN 
    users u ON p.OwnerUserId = u.Id
WHERE 
    u.DisplayName IN ('Harvey Motulsky', 'Noah Snyder')
GROUP BY 
    u.DisplayName
ORDER BY 
    TotalViewCount DESC
LIMIT 1;
------------------------------
question: How many posts by Matt Parker have more than 4 votes?
GT: SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id INNER JOIN votes AS T4 ON T4.PostId = T3.Id WHERE T1.DisplayName = 'Matt Parker' GROUP BY T2.PostId, T4.Id HAVING COUNT(T4.Id) > 4
Pred: SELECT COUNT(p.Id) AS TotalPosts
FROM posts p
JOIN users u ON p.OwnerUserId = u.Id
JOIN votes v ON p.Id = v.PostId
WHERE u.DisplayName = 'Matt Parker'
GROUP BY p.Id
HAVING COUNT(v.Id) > 4;
------------------------------
question: How many negative comments did Neil McGuigan get in his posts?
GT: SELECT COUNT(T3.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T1.DisplayName = 'Neil McGuigan' AND T3.Score < 60
Pred: SELECT COUNT(c.Id) AS NegativeCommentsCount
FROM comments c
JOIN users u ON c.UserId = u.Id
WHERE c.Score < 60 AND u.DisplayName = 'Neil McGuigan';
------------------------------
question: State all the tags used by Mark Meckes in his posts that doesn't have comments.
GT: SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId WHERE T1.DisplayName = 'Mark Meckes' AND T3.CommentCount = 0
Pred: SELECT DISTINCT p.Tags
FROM posts p
WHERE p.OwnerDisplayName = 'Mark Meckes' AND p.CommentCount = 0;
------------------------------
question: Based on posts posted by Community, calculate the percentage of posts that use the R language.
GT: SELECT CAST(SUM(IIF(T3.TagName = 'r', 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'
Pred: SELECT 
    CAST(COUNT(CASE WHEN t.TagName = 'r' THEN p.Id END) AS REAL) / COUNT(p.Id) AS percentage
FROM 
    posts p
JOIN 
    tags t ON p.Tags LIKE '%' || t.TagName || '%'
JOIN 
    users u ON p.OwnerUserId = u.Id
WHERE 
    u.DisplayName = 'Community';
------------------------------
question: Calculate the difference in view count from post posted by Mornington and view count from posts posted by Amos.
GT: SELECT SUM(IIF(T1.DisplayName = 'Mornington', T3.ViewCount, 0)) - SUM(IIF(T1.DisplayName = 'Amos', T3.ViewCount, 0)) AS diff FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId
Pred: SELECT 
    SUM(CASE WHEN OwnerDisplayName = 'Mornington' THEN ViewCount ELSE 0 END) -
    SUM(CASE WHEN OwnerDisplayName = 'Amos' THEN ViewCount ELSE 0 END) AS calculation
FROM 
    posts;
------------------------------
question: How many posts were created on 21st July, 2010?
GT: SELECT COUNT(id) FROM postHistory WHERE date(CreationDate) = '2010-07-21'
Pred: SELECT COUNT(Id) AS TotalPosts
FROM posts
WHERE CreationDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59';
------------------------------
question: Describe the post title which got positive comments and display names of the users who posted those comments.
GT: SELECT T1.Title, T2.UserDisplayName FROM posts AS T1 INNER JOIN comments AS T2 ON T2.PostId = T2.Id WHERE T1.Score > 60
Pred: SELECT p.Title, c.UserDisplayName
FROM posts p
JOIN comments c ON p.Id = c.PostId
WHERE c.Score > 60;
------------------------------
question: Describe the post history counts and last edit date of the post title "What is the best introductory Bayesian statistics textbook?"
GT: SELECT T1.Id, T2.LastEditDate FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'What is the best introductory Bayesian statistics textbook?'
Pred: SELECT 
    p.Title,
    COUNT(ph.Id) AS PostHistoryCount,
    MAX(ph.CreationDate) AS LastEditDate
FROM 
    posts p
JOIN 
    postHistory ph ON p.Id = ph.PostId
WHERE 
    p.Title = 'What is the best introductory Bayesian statistics textbook?'
GROUP BY 
    p.Title;
------------------------------
question: Describe the last accessed date and location of the users who received the outliers badge.
GT: SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'
Pred: SELECT u.LastAccessDate, u.Location
FROM users u
INNER JOIN badges b ON u.Id = b.UserId
WHERE b.Name = 'Outliers';
------------------------------
question: List the post IDs and badge names of the user Samuel in 2013.
GT: SELECT T1.PostId, T2.Name FROM postHistory AS T1 INNER JOIN badges AS T2 ON T1.UserId = T2.UserId WHERE T1.UserDisplayName = 'Samuel' AND STRFTIME('%Y', T1.CreationDate) = '2013' AND STRFTIME('%Y', T2.Date) = '2013'
Pred: SELECT p.Id AS PostId, b.Name AS BadgeName
FROM users u
INNER JOIN badges b ON u.Id = b.UserId
INNER JOIN posts p ON u.Id = p.OwnerUserId
WHERE u.DisplayName = 'Samuel'
AND strftime('%Y', b.Date) = '2013'
AND strftime('%Y', p.CreationDate) = '2013';
------------------------------
question: What is the owner's display name of the most popular post?
GT: SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts ORDER BY ViewCount DESC LIMIT 1 )
Pred: SELECT OwnerDisplayName
FROM posts
WHERE ViewCount = (SELECT MAX(ViewCount) FROM posts);
------------------------------
question: Write down the related posts titles and link type IDs of the post "What are principal component scores?".
GT: SELECT T3.Title, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId INNER JOIN posts AS T3 ON T2.RelatedPostId = T3.Id WHERE T1.Title = 'What are principal component scores?'
Pred: -- Step 1: Find the PostId of the post with the title "What are principal component scores?"
SELECT pl.RelatedPostId, pl.LinkTypeId
FROM postLinks pl
WHERE pl.PostId = (
    SELECT Id
    FROM posts
    WHERE Title = 'What are principal component scores?'
);
------------------------------
question: Describe the display name of the parent ID for child post with the highest score.
GT: SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts WHERE ParentId IS NOT NULL ORDER BY Score DESC LIMIT 1 )
Pred: SELECT u.DisplayName
FROM users u
JOIN posts p ON u.Id = p.OwnerUserId
WHERE p.Id = (
    SELECT ParentId
    FROM posts
    WHERE ParentId IS NOT NULL
    ORDER BY Score DESC
    LIMIT 1
);
------------------------------
question: How old is the most influential user?
GT: SELECT Age FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )
Pred: SELECT MAX(Reputation) FROM users
------------------------------
question: How many posts with votes that were created in 2011 have a bounty of 50?
GT: SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T2.BountyAmount = 50 AND STRFTIME('%Y', T2.CreationDate) = '2011'
Pred: SELECT COUNT(*)
FROM posts p
JOIN votes v ON p.Id = v.PostId
WHERE strftime('%Y', p.CreationDate) = '2011' AND v.BountyAmount = 50;
------------------------------
question: What is the sum of score of the post on 2010-07-19?
GT: SELECT SUM(Score) FROM posts WHERE LasActivityDate LIKE '2010-07-19%'
Pred: SELECT SUM(Score) 
FROM posts 
WHERE LastActivityDate LIKE '2010-07-19%';
------------------------------
question: What is the title of the post with the oldest post link?
GT: SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T2.PostId = T1.Id ORDER BY T1.CreaionDate LIMIT 1
Pred: SELECT p.Title
FROM posts p
JOIN postLinks pl ON p.Id = pl.PostId
ORDER BY pl.CreationDate ASC
LIMIT 1;
------------------------------
question: Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more?
GT: SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4
Pred: SELECT COUNT(u.Id) AS TotalUsers
FROM users u
INNER JOIN posts p ON u.Id = p.OwnerUserId
WHERE u.Location = 'United Kingdom'
GROUP BY u.Id
HAVING SUM(p.FavoriteCount) >= 4;
------------------------------
question: What is the average number of posts voted by the oldest users?
GT: SELECT AVG(PostId) FROM votes WHERE UserId IN ( SELECT Id FROM users WHERE Age = ( SELECT MAX(Age) FROM users ) )
Pred: SELECT AVG(post_count) AS average_posts_voted
FROM (
    SELECT COUNT(v.PostId) AS post_count
    FROM users u
    JOIN votes v ON u.Id = v.UserId
    WHERE u.Age = (SELECT MAX(Age) FROM users)
    GROUP BY u.Id
) AS oldest_users_votes;
------------------------------
question: How many posts did Jay Stevens have in 2010?
GT: SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2010' AND T1.DisplayName = 'Jay Stevens'
Pred: SELECT COUNT(p.Id) AS TotalPosts
FROM posts p
INNER JOIN users u ON p.OwnerUserId = u.Id
WHERE u.DisplayName = 'Jay Stevens' AND strftime('%Y', p.CreationDate) = '2010';
------------------------------
question: Which post has the highest score? Please give its id and title's name.
GT: SELECT T1.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId ORDER BY T2.Score DESC LIMIT 1
Pred: SELECT Id, Title
FROM posts
WHERE Score = (SELECT MAX(Score) FROM posts);
------------------------------
question: Please list the users' display names whose posts had over 20000 views in 2011.
GT: SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2011' AND T2.ViewCount > 20000
Pred: SELECT u.DisplayName
FROM users u
JOIN posts p ON u.Id = p.OwnerUserId
WHERE p.ViewCount > 20000 AND strftime('%Y', p.CreationDate) = '2011';
------------------------------
question: Which is the most valuable post in 2010? Please give its id and the owner's display name.
GT: SELECT T2.OwnerUserId, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T1.CreationDate) = '2010' ORDER BY T2.FavoriteCount DESC LIMIT 1
Pred: SELECT p.Id, p.OwnerDisplayName
FROM posts p
WHERE strftime('%Y', p.CreationDate) = '2010'
ORDER BY p.FavoriteCount DESC
LIMIT 1;
------------------------------
question: What is the percentage of posts whose owners had a reputation of over 1000 in 2011?
GT: SELECT CAST(SUM(IIF(STRFTIME('%Y', T2.CreaionDate) = '2011' AND T1.Reputation > 1000, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId
Pred: SELECT 
    (SUM(CASE WHEN u.Reputation > 1000 THEN 1 ELSE 0 END) * 100.0 / COUNT(p.Id)) AS percentage
FROM 
    posts p
JOIN 
    users u ON p.OwnerUserId = u.Id
WHERE 
    strftime('%Y', p.CreationDate) = '2011';
------------------------------
question: Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.
GT: SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'
Pred: SELECT p.ViewCount, ph.UserDisplayName
FROM posts p
JOIN (
    SELECT PostId
    FROM postHistory
    WHERE Text = 'Computer Game Datasets'
    ORDER BY CreationDate DESC
    LIMIT 1
) ph2 ON p.Id = ph2.PostId
JOIN postHistory ph ON ph.PostId = ph2.PostId AND ph.CreationDate = (
    SELECT MAX(CreationDate)
    FROM postHistory
    WHERE Text = 'Computer Game Datasets'
);
------------------------------
question: Identify the total number of posts with views above average.
GT: SELECT Id FROM posts WHERE ViewCount > ( SELECT AVG(ViewCount) FROM posts )
Pred: SELECT COUNT(*) AS total_posts
FROM posts
WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts);
------------------------------
question: How many comments were added to the post with the highest score?
GT: SELECT COUNT(T2.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId GROUP BY T1.Id ORDER BY SUM(T1.Score) DESC LIMIT 1
Pred: SELECT COUNT(*) AS CommentCount
FROM comments
WHERE PostId = (SELECT Id FROM posts ORDER BY Score DESC LIMIT 1);
------------------------------
question: Identify the display name and location of the user, who was the last to edit the post with ID 183.
GT: SELECT T2.DisplayName, T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Id = 183 ORDER BY T1.LastEditDate DESC LIMIT 1
Pred: SELECT u.DisplayName, u.Location
FROM posts p
JOIN users u ON p.LastEditorUserId = u.Id
WHERE p.Id = 183;
------------------------------
question: How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.
GT: SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'
Pred: SELECT julianday(b.Date) - julianday(u.CreationDate) AS DaysToBadge
FROM users u
JOIN badges b ON u.Id = b.UserId
WHERE u.DisplayName = 'Zolomon';
------------------------------
question: Identify the number of posts and comments left by the user, who has the latest created user account.
GT: SELECT COUNT(T2.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T3.PostId = T2.Id ORDER BY T1.CreationDate DESC LIMIT 1
Pred: WITH LatestUser AS (
    SELECT Id
    FROM users
    ORDER BY CreationDate DESC
    LIMIT 1
),
UserPosts AS (
    SELECT COUNT(*) AS post_count
    FROM posts
    WHERE OwnerUserId = (SELECT Id FROM LatestUser)
),
UserComments AS (
    SELECT COUNT(*) AS comment_count
    FROM comments
    WHERE UserId = (SELECT Id FROM LatestUser)
)
SELECT 
    COALESCE((SELECT post_count FROM UserPosts), 0) AS post_count,
    COALESCE((SELECT comment_count FROM UserComments), 0) AS comment_count;
------------------------------
question: Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it.
GT: SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 10
Pred: SELECT c.Text, c.UserDisplayName
FROM comments c
JOIN posts p ON c.PostId = p.Id
WHERE p.Title = 'Analysing wind data with R'
ORDER BY c.CreationDate DESC
LIMIT 10;
------------------------------
question: Count the number of posts with a tag specified as 'careers'.
GT: SELECT COUNT(Id) FROM tags WHERE TagName = 'careers'
Pred: SELECT COUNT(*)
FROM posts p
JOIN tags t ON p.Tags LIKE '%' || t.TagName || '%'
WHERE t.TagName = 'careers';
------------------------------
question: What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?
GT: SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'
Pred: SELECT u.Reputation, p.ViewCount
FROM users u
JOIN posts p ON u.Id = p.OwnerUserId
WHERE u.DisplayName = 'Jarrod Dixon';
------------------------------
question: How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?
GT: SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'
Pred: SELECT 
    COUNT(c.Id) AS CommentCount,
    COALESCE(COUNT(a.Id), 0) AS AnswerCount
FROM 
    posts p
LEFT JOIN 
    comments c ON p.Id = c.PostId
LEFT JOIN 
    votes a ON p.Id = a.PostId AND a.VoteTypeId = 2
WHERE 
    p.Title = 'Clustering 1D data'
GROUP BY 
    p.Title;
------------------------------
question: Among all the posts posted by the most influential user, identify the percentage with a score above 50.
GT: SELECT CAST(SUM(CASE WHEN T2.Score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM users T1 INNER JOIN posts T2 ON T1.Id = T2.OwnerUserId INNER JOIN ( SELECT MAX(Reputation) AS max_reputation FROM users ) T3 ON T1.Reputation = T3.max_reputation
Pred: SELECT 
    (SUM(CASE WHEN p.Score > 50 THEN 1 ELSE 0 END) * 100.0 / COUNT(p.Id)) AS percentage
FROM 
    posts p
JOIN 
    users u ON p.OwnerUserId = u.Id
WHERE 
    u.Reputation = (SELECT MAX(Reputation) FROM users);
------------------------------
question: Among the tags with tag ID below 15, how many of them have 20 count of posts and below?
GT: SELECT COUNT(id) FROM tags WHERE Count <= 20 AND Id < 15
Pred: SELECT COUNT(*) AS tag_count
FROM tags
JOIN posts ON tags.Id = posts.Tags
WHERE tags.Id < 15
GROUP BY tags.Id
HAVING tags.Count <= 20;
------------------------------
question: List the creation date and age of the user that commented with webiste.
GT: SELECT T2.CreationDate, T2.Age FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.text LIKE '%http://%'
Pred: SELECT c.CreationDate, u.Age
FROM comments c
JOIN users u ON c.UserId = u.Id
WHERE c.Text LIKE '%http://%';
------------------------------
question: In comments with 0 score, how many of the posts have view count lower than 5?
GT: SELECT COUNT(T1.Id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ViewCount < 5 AND T2.Score = 0
Pred: SELECT COUNT(DISTINCT p.Id) AS TotalPosts
FROM posts p
JOIN comments c ON p.Id = c.PostId
WHERE c.Score = 0 AND p.ViewCount < 5;
------------------------------
question: In posts with 1 comment, how many of the comments have 0 score?
GT: SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T2.Score = 0
Pred: SELECT COUNT(*)
FROM posts p
JOIN comments c ON p.Id = c.PostId
WHERE p.CommentCount = 1 AND c.Score = 0;
------------------------------
question: Among products comments with 0 score, what is the total number of users ages 40 years old?
GT: SELECT COUNT(DISTINCT T1.id) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score = 0 AND T2.Age = 40
Pred: SELECT COUNT(DISTINCT u.Id) AS TotalUsers
FROM comments c
JOIN users u ON c.UserId = u.Id
WHERE c.Score = 0 AND u.Age = 40;
------------------------------
question: What is the up vote number of the user that commented "R is also lazy evaluated."?
GT: SELECT T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'R is also lazy evaluated.'
Pred: SELECT v.UpVotes
FROM votes v
WHERE v.UserId = (
    SELECT c.UserId
    FROM comments c
    WHERE c.Text = 'R is also lazy evaluated.'
);
------------------------------
question: Please list the full names of all the superheroes with over 15 super powers.
GT: SELECT DISTINCT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.full_name HAVING COUNT(T2.power_id) > 15
Pred: SELECT s.full_name
FROM superhero s
JOIN hero_power hp ON s.id = hp.hero_id
GROUP BY s.id
HAVING COUNT(hp.power_id) > 15;
------------------------------
question: Rank heroes published by Marvel Comics by their height in descending order.
GT: SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'
Pred: SELECT 
    s.superhero_name
FROM 
    superhero s
INNER JOIN 
    publisher p ON s.publisher_id = p.id
WHERE 
    p.publisher_name = 'Marvel Comics'
ORDER BY 
    s.height_cm DESC;
------------------------------
question: Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.
GT: SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour
Pred: SELECT 
    s.superhero_name,
    c.colour AS eye_colour,
    COUNT(s.id) AS eye_colour_count
FROM 
    superhero s
JOIN 
    colour c ON s.eye_colour_id = c.id
JOIN 
    publisher p ON s.publisher_id = p.id
WHERE 
    p.publisher_name = 'Marvel Comics'
GROUP BY 
    c.id
ORDER BY 
    eye_colour_count DESC;
------------------------------
question: Who is the dumbest superhero?
GT: SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value LIMIT 1
Pred: SELECT s.superhero_name
FROM superhero s
JOIN hero_attribute ha ON s.id = ha.hero_id
JOIN attribute a ON ha.attribute_id = a.id
WHERE a.attribute_name = 'Intelligence'
AND ha.attribute_value = (
    SELECT MIN(ha.attribute_value)
    FROM hero_attribute ha
    JOIN attribute a ON ha.attribute_id = a.id
    WHERE a.attribute_name = 'Intelligence'
);
------------------------------
question: What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics.
GT: SELECT (CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM superhero)), CAST(SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T3.id = T1.alignment_id WHERE T3.alignment = 'Bad'
Pred: SELECT 
    (CAST(SUM(CASE WHEN a.alignment = 'Bad' THEN 1 ELSE 0 END) AS REAL) / COUNT(s.id)) * 100 AS percentage_bad_aligned,
    COUNT(CASE WHEN p.publisher_name = 'Marvel Comics' THEN s.id ELSE NULL END) AS count_marvel
FROM 
    superhero s
LEFT JOIN 
    alignment a ON s.alignment_id = a.id
LEFT JOIN 
    publisher p ON s.publisher_id = p.id;
------------------------------
question: Give the publisher ID of Star Trek.
GT: SELECT id FROM publisher WHERE publisher_name = 'Star Trek'
Pred: SELECT publisher_id
FROM publisher
WHERE publisher_name = 'Star Trek';
------------------------------
question: How many bad superheroes are there?
GT: SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Bad'
Pred: SELECT COUNT(*) 
FROM superhero 
WHERE alignment_id = 1;
------------------------------
question: Provide the hair colour of the human superhero who is 185 cm tall.
GT: SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human'
Pred: SELECT c.colour
FROM superhero s
JOIN colour c ON s.hair_colour_id = c.id
JOIN race r ON s.race_id = r.id
WHERE s.height_cm = 185 AND r.race = 'human';
------------------------------
question: How many heroes have stealth power?
GT: SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Stealth'
Pred: SELECT COUNT(DISTINCT superhero.id) AS total_superheroes
FROM superhero
INNER JOIN hero_power ON superhero.id = hero_power.hero_id
INNER JOIN superpower ON hero_power.power_id = superpower.id
WHERE superpower.power_name = 'stealth';
------------------------------
question: What is the hero's full name with the highest attribute in strength?
GT: SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1
Pred: SELECT s.full_name
FROM superhero s
JOIN hero_attribute ha ON s.id = ha.hero_id
JOIN attribute a ON ha.attribute_id = a.id
WHERE a.attribute_name = 'strength'
AND ha.attribute_value = (
    SELECT MAX(ha.attribute_value)
    FROM hero_attribute ha
    JOIN attribute a ON ha.attribute_id = a.id
    WHERE a.attribute_name = 'strength'
);
------------------------------
question: What is the average of superheroes with no skin colour?
GT: SELECT CAST(COUNT(*) AS REAL) / SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id
Pred: SELECT 
    CAST(SUM(CASE WHEN s.skin_colour_id = 1 THEN 1 ELSE 0 END) AS REAL) / COUNT(*) AS average
FROM 
    superhero s;
------------------------------
question: Which superhero has the most durability published by Dark Horse Comics?
GT: SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1
Pred: SELECT s.superhero_name
FROM superhero s
JOIN publisher p ON s.publisher_id = p.id
JOIN hero_attribute ha ON s.id = ha.hero_id
JOIN attribute a ON ha.attribute_id = a.id
WHERE p.publisher_name = 'Dark Horse Comics'
  AND a.attribute_name = 'Durability'
  AND ha.attribute_value = (
    SELECT MAX(ha.attribute_value)
    FROM hero_attribute ha
    WHERE ha.attribute_id = a.id
      AND ha.hero_id = s.id
  );
------------------------------
question: List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.
GT: SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'
Pred: SELECT 
    c1.colour AS eye_colour,
    c2.colour AS hair_colour,
    c3.colour AS skin_colour
FROM 
    superhero s
INNER JOIN 
    gender g ON s.gender_id = g.id
INNER JOIN 
    colour c1 ON s.eye_colour_id = c1.id
INNER JOIN 
    colour c2 ON s.hair_colour_id = c2.id
INNER JOIN 
    colour c3 ON s.skin_colour_id = c3.id
INNER JOIN 
    publisher p ON s.publisher_id = p.id
WHERE 
    g.gender = 'Female' AND p.publisher_name = 'Dark Horse Comics';
------------------------------
question: How many percent of female heroes were published by Marvel Comics?
GT: SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T3.gender = 'Female'
Pred: SELECT 
    CAST(SUM(CASE WHEN g.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS percentage_female_heroes
FROM 
    superhero s
JOIN 
    gender g ON s.gender_id = g.id
JOIN 
    publisher p ON s.publisher_id = p.id
WHERE 
    p.publisher_name = 'Marvel Comics';
------------------------------
question: Calculate the average height for each superhero.
GT: SELECT CAST(SUM(height_cm) AS REAL) / COUNT(id) FROM superhero
Pred: SELECT superhero_name, AVG(height_cm) AS average_height
FROM superhero
GROUP BY superhero_name;
------------------------------
question: Which hero was the fastest?
GT: SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1
Pred: SELECT s.superhero_name
FROM superhero s
JOIN hero_attribute ha ON s.id = ha.hero_id
JOIN attribute a ON ha.attribute_id = a.id
WHERE a.attribute_name = 'Speed'
AND ha.attribute_value = (
    SELECT MAX(ha.attribute_value)
    FROM hero_attribute ha
    JOIN attribute a ON ha.attribute_id = a.id
    WHERE a.attribute_name = 'Speed'
);
------------------------------
question: Who is the tallest superhero?
GT: SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1
Pred: SELECT superhero_name
FROM superhero
WHERE height_cm = (SELECT MAX(height_cm) FROM superhero);
------------------------------
question: What is the power ID of cryokinesis?
GT: SELECT id FROM superpower WHERE power_name = 'Cryokinesis'
Pred: SELECT id 
FROM superpower 
WHERE power_name = 'cryokinesis';
------------------------------
question: List the full names of superheroes with missing weight.
GT: SELECT DISTINCT full_name FROM superhero WHERE full_name IS NOT NULL AND (weight_kg IS NULL OR weight_kg = 0)
Pred: SELECT full_name
FROM superhero
WHERE weight_kg = 0 OR weight_kg IS NULL;
------------------------------
question: What is the race of the superhero with maximum attribute value?
GT: SELECT T3.race FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN race AS T3 ON T1.race_id = T3.id ORDER BY T2.attribute_value DESC LIMIT 1
Pred: SELECT r.race
FROM superhero s
JOIN hero_attribute ha ON s.id = ha.hero_id
JOIN race r ON s.race_id = r.id
WHERE ha.attribute_value = (
    SELECT MAX(attribute_value)
    FROM hero_attribute
);
------------------------------
question: List down at least five full names of superheroes with blue eyes.
GT: SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5
Pred: SELECT superhero.full_name
FROM superhero
JOIN colour ON superhero.eye_colour_id = colour.id
WHERE colour.colour = 'Blue'
LIMIT 5;
------------------------------
question: Give the race of the blue-haired male superhero.
GT: SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Blue' AND T4.gender = 'Male'
Pred: SELECT r.race
FROM superhero s
INNER JOIN colour c ON s.hair_colour_id = c.id
INNER JOIN gender g ON s.gender_id = g.id
INNER JOIN race r ON s.race_id = r.id
WHERE c.colour = 'blue' AND g.gender = 'male';
------------------------------
question: Among the bad superheroes, what is the percentage of female superheroes?
GT: SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.alignment = 'Bad'
Pred: SELECT 
    ROUND(
        CAST(
            SUM(CASE WHEN g.gender = 'Female' THEN 1 ELSE 0 END) AS REAL
        ) / COUNT(s.id) * 100.0, 
        2
    ) AS percentage_female
FROM 
    superhero s
JOIN 
    gender g ON s.gender_id = g.id
JOIN 
    alignment a ON s.alignment_id = a.id
WHERE 
    a.alignment = 'Bad';
------------------------------
question: In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color.
GT: SELECT SUM(CASE WHEN T2.id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg = 0 OR T1.weight_kg is NULL
Pred: SELECT 
    SUM(CASE WHEN T2.id = 7 THEN 1 ELSE 0 END) - 
    SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) AS difference
FROM 
    superhero T1
JOIN 
    colour T2 ON T1.eye_colour_id = T2.id
WHERE 
    T1.weight_kg = 0
GROUP BY 
    T1.id;
------------------------------
question: Name the tallest superhero.
GT: SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1
Pred: SELECT MAX(height_cm) FROM superhero;
------------------------------
question: Among all superheroes in Marvel Comics, identify the percentage of 'good' superheroes.
GT: SELECT CAST(COUNT(CASE WHEN T3.alignment = 'Good' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.publisher_name = 'Marvel Comics'
Pred: SELECT 
    ROUND(
        CAST(
            SUM(CASE WHEN a.alignment = 'Good' THEN 1 ELSE 0 END) AS REAL
        ) / COUNT(s.id) * 100.0
    ) AS percentage_good_superheroes
FROM 
    superhero s
JOIN 
    alignment a ON s.alignment_id = a.id
JOIN 
    publisher p ON s.publisher_id = p.id
WHERE 
    p.publisher_name = 'Marvel Comics';
------------------------------
question: Please list the reference names of the drivers who are eliminated in the first period in race number 20.
GT: SELECT T2.driverRef FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 20 ORDER BY T1.q1 DESC LIMIT 5
Pred: SELECT d.driverRef
FROM qualifying q
JOIN drivers d ON q.driverId = d.driverId
WHERE q.raceId = 20 AND q.q1 = (
    SELECT MAX(q1)
    FROM qualifying
    WHERE raceId = 20
);
------------------------------
question: Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?
GT: SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'
Pred: SELECT races.url
FROM races
JOIN circuits ON races.circuitid = circuits.circuitid
WHERE circuits.name = 'Circuit de Barcelona-Catalunya';
------------------------------
question: Please list the positions of the circuits built by the constructor Renault.
GT: SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'Renault'
Pred: SELECT c.position
FROM circuits c
JOIN constructorStandings cs ON c.circuitId = cs.circuitId
JOIN constructors co ON cs.constructorId = co.constructorId
WHERE co.name = 'Renault';
------------------------------
question: How many races in the year 2010 are held on grand prixs outside Asia and Europe?
GT: SELECT COUNT(T3.raceId) FROM circuits AS T1 INNER JOIN races AS T3 ON T3.circuitID = T1.circuitId WHERE T1.country NOT IN ( 'Bahrain', 'China', 'Singapore', 'Japan', 'Korea', 'Turkey', 'UAE', 'Malaysia', 'Spain', 'Monaco', 'Azerbaijan', 'Austria', 'Belgium', 'France', 'Germany', 'Hungary', 'Italy', 'UK' ) AND T3.year = 2010
Pred: SELECT COUNT(*)
FROM races r
INNER JOIN circuits c ON r.circuitid = c.circuitid
WHERE r.year = 2010
  AND r.name = 'Grand Prix'
  AND c.country NOT IN ('Asia', 'Europe');
------------------------------
question: Where can I find the information about the races held on Sepang International Circuit?
GT: SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'
Pred: SELECT r.url
FROM races r
INNER JOIN circuits c ON r.circuitid = c.circuitid
WHERE c.name = 'Sepang International Circuit';
------------------------------
question: Which country is the constructor which got 1 point in the race No. 24 from?
GT: SELECT T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 24 AND T1.points = 1
Pred: SELECT c.country
FROM constructorStandings cs
INNER JOIN constructors c ON cs.constructorId = c.constructorId
WHERE cs.raceId = 24 AND cs.points = 1;
------------------------------
question: For the driver who had the Q2 time as 0:01:40 in the qualifying race No. 355, what is his nationality?
GT: SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 355 AND T1.q2 LIKE '1:40%'
Pred: SELECT d.nationality
FROM qualifying q
INNER JOIN drivers d ON q.driverId = d.driverId
WHERE q.raceId = 355 AND q.q2 = '0:01:40';
------------------------------
question: What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?
GT: SELECT T2.number FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 903 AND T1.q3 LIKE '1:54%'
Pred: SELECT number
FROM qualifying
WHERE raceId = 903 AND q3 = '0:01:54';
------------------------------
question: For all the drivers who finished the game in race No. 592, who is the oldest?
GT: SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 592 AND T2.time IS NOT NULL AND T1.dob IS NOT NULL ORDER BY T1.dob ASC LIMIT 1
Pred: SELECT d.driverid, d.forename, d.surname, d.dob
FROM drivers d
JOIN results r ON d.driverid = r.driverid
WHERE r.time IS NOT NULL AND r.raceid = 592
ORDER BY d.dob DESC
LIMIT 1;
------------------------------
question: Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.
GT: SELECT DISTINCT T2.forename, T2.surname, T2.url FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 161 AND T1.time LIKE '1:27%'
Pred: SELECT d.url
FROM drivers d
JOIN lapTimes l ON d.driverId = l.driverId
JOIN races r ON l.raceId = r.raceId
WHERE l.time LIKE '0:01:27%' AND r.raceId = 161;
------------------------------
question: For the driver who had the Q2 time as 0:01:15 in race No. 347, where is he from?
GT: SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 347 AND T1.q2 LIKE '1:15%'
Pred: SELECT d.nationality
FROM qualifying q
INNER JOIN drivers d ON q.driverId = d.driverId
WHERE q.raceId = 347 AND q.q2 = '0:01:15';
------------------------------
question: In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?
GT: SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 45 AND T1.q3 LIKE '1:33%'
Pred: SELECT d.code
FROM qualifying q
JOIN drivers d ON q.driverId = d.driverId
WHERE q.raceId = 45 AND q.q3 = '0:01:33';
------------------------------
question: For the race happened in 2015/11/29, how many drivers did not finish the game?
GT: SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NULL
Pred: SELECT COUNT(*) AS drivers_not_finished
FROM drivers d
INNER JOIN results r ON d.driverId = r.driverId
INNER JOIN races ra ON r.raceId = ra.raceId
WHERE ra.date = '2015-11-29' AND r.status != 'Finished';
------------------------------
question: For all the drivers who finished the game in race No. 872, who is the youngest?
GT: SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 872 AND T2.time IS NOT NULL ORDER BY T1.dob DESC LIMIT 1
Pred: SELECT d.driverRef, d.forename, d.surname
FROM drivers d
INNER JOIN results r ON d.driverId = r.driverId
WHERE r.raceId = 872 AND r.time IS NOT NULL
ORDER BY d.dob DESC
LIMIT 1;
------------------------------
question: Who was the driver that got the best lap time in the race No. 348? Give his full name.
GT: SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 348 ORDER BY T1.time ASC LIMIT 1
Pred: SELECT 
    d.forename || ' ' || d.surname AS driverName
FROM 
    drivers d
JOIN 
    lapTimes l ON d.driverId = l.driverId
WHERE 
    l.raceId = 348
ORDER BY 
    l.time ASC
LIMIT 1;
------------------------------
question: Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?
GT: SELECT (SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) - SUM(IIF(T2.raceId = 854, T2.fastestLapSpeed, 0))) * 100 / SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Paul' AND T1.surname = 'di Resta'
Pred: WITH FastestLapSpeedCTE AS (
    SELECT 
        r.raceId,
        r.fastestLapSpeed
    FROM 
        results r
    INNER JOIN 
        drivers d ON r.driverId = d.driverId
    WHERE 
        d.forename = 'Paul' AND d.surname = 'di Resta'
)
SELECT 
    (fastestLapSpeed - LAG(fastestLapSpeed) OVER (ORDER BY raceId)) / fastestLapSpeed * 100 AS speed_difference_percentage
FROM 
    FastestLapSpeedCTE
WHERE 
    raceId = 853;
------------------------------
question: Which year was the first Singapore Grand Prix?
GT: SELECT year FROM races WHERE name = 'Singapore Grand Prix' ORDER BY year ASC LIMIT 1
Pred: SELECT year
FROM races
WHERE name = 'Singapore Grand Prix';
------------------------------
question: How many races were there in 2005? Name all the races in descending order.
GT: SELECT name FROM races WHERE year = 2005 ORDER BY name DESC
Pred: SELECT 
    COUNT(*) AS total_races,
    (SELECT name FROM races WHERE year = 2005 ORDER BY name DESC) AS race_names
FROM 
    races
WHERE 
    year = 2005;
------------------------------
question: List the names of all races that occurred in the earliest recorded year and month.
GT: SELECT name FROM races WHERE STRFTIME('%Y', date) = ( SELECT STRFTIME('%Y', date) FROM races ORDER BY date ASC LIMIT 1 ) AND STRFTIME('%m', date) = ( SELECT STRFTIME('%m', date) FROM races ORDER BY date ASC LIMIT 1 )
Pred: SELECT name
FROM races
WHERE strftime('%Y-%m', date) = strftime('%Y-%m', MIN(date));
------------------------------
question: Name the races in year 2017 that are not hosted in year 2000.
GT: SELECT name FROM races WHERE year = 2017 AND name NOT IN ( SELECT name FROM races WHERE year = 2000 )
Pred: SELECT name
FROM races
WHERE year = 2017;
------------------------------
question: In which country was the first European Grand Prix hosted? Name the circuit and location.
GT: SELECT T1.country, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix' ORDER BY T2.year ASC LIMIT 1
Pred: SELECT c.country, c.name AS circuit_name, c.location
FROM races r
JOIN circuits c ON r.circuitid = c.circuitid
WHERE r.name = 'European Grand Prix'
ORDER BY r.year ASC
LIMIT 1;
------------------------------
question: When was the last f1 season whereby Brands Hatch hosted the British Grand Prix?
GT: SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch' AND T2.name = 'British Grand Prix' ORDER BY T2.year DESC LIMIT 1
Pred: SELECT MAX(r.year) AS last_season
FROM races r
JOIN circuits c ON r.circuitid = c.circuitid
WHERE c.name = 'Brands Hatch' AND r.name = 'British Grand Prix';
------------------------------
question: How many seasons has Silverstone Circuit hosted the United Kindom grand prix?
GT: SELECT COUNT(T2.circuitid) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit' AND T2.name = 'British Grand Prix'
Pred: SELECT COUNT(DISTINCT s.year) AS NumberOfSeasons
FROM races r
JOIN circuits c ON r.circuitid = c.circuitid
JOIN seasons s ON r.year = s.year
WHERE r.name = 'British Grand Prix'
AND c.name = 'Silverstone'
AND c.country = 'United Kingdom';
------------------------------
question: Name all drivers in the 2010 Singapore Grand Prix order by their position stands.
GT: SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Singapore Grand Prix' AND T1.year = 2010 ORDER BY T2.position ASC
Pred: SELECT 
    d.forename || ' ' || d.surname AS driver_name
FROM 
    drivers d
INNER JOIN 
    results r ON d.driverId = r.driverId
INNER JOIN 
    races ra ON r.raceId = ra.raceId
WHERE 
    ra.year = 2010 AND ra.name = 'Singapore Grand Prix'
ORDER BY 
    r.position;
------------------------------
question: State the driver with the most points scored. Find his full name with that points.
GT: SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId ORDER BY T2.points DESC LIMIT 1
Pred: SELECT 
    d.forename || ' ' || d.surname AS driver_name,
    SUM(r.points) AS total_points
FROM 
    drivers d
JOIN 
    results r ON d.driverId = r.driverId
GROUP BY 
    d.driverId, d.forename, d.surname
ORDER BY 
    total_points DESC
LIMIT 1;
------------------------------
question: Name the top 3 drivers and the points they scored in the 2017 Chinese Grand Prix.
GT: SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Chinese Grand Prix' AND T1.year = 2017 ORDER BY T2.points DESC LIMIT 3
Pred: -- Step 1: Create a CTE to rank drivers based on their points in the 2017 Chinese Grand Prix
WITH RankedDrivers AS (
    SELECT
        d.forename,
        d.surname,
        r.points,
        ROW_NUMBER() OVER (ORDER BY r.points DESC) AS rank
    FROM
        drivers d
    JOIN
        results r ON d.driverId = r.driverId
    JOIN
        races ra ON r.raceId = ra.raceId
    WHERE
        ra.year = 2017 AND ra.name = 'Chinese Grand Prix'
)

-- Step 2: Select the top 3 drivers from the CTE
SELECT
    rd.forename,
    rd.surname,
    rd.points
FROM
    RankedDrivers rd
WHERE
    rd.rank <= 3;
------------------------------
question: What is the best lap time recorded? List the driver and race with such recorded lap time.
GT: SELECT T2.milliseconds, T1.forename, T1.surname, T3.name FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.milliseconds ASC LIMIT 1
Pred: -- Step 1: Identify the relevant tables
-- Step 2: Determine the best lap time
-- Step 3: Join the tables
-- Step 4: Filter the results
-- Step 5: Select the required columns

SELECT 
    d.forename, 
    d.surname, 
    r.name AS race_name
FROM 
    drivers d
JOIN 
    lapTimes l ON d.driverId = l.driverId
JOIN 
    races r ON l.raceId = r.raceId
WHERE 
    l.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes);
------------------------------
question: Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.
GT: SELECT CAST(COUNT(CASE WHEN T2.position <> 1 THEN T2.position END) AS REAL) * 100 / COUNT(T2.driverStandingsId) FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.surname = 'Hamilton' AND T1.year >= 2010
Pred: SELECT 
    (COUNT(CASE WHEN r.position > 1 THEN 1 END) * 1.0 / COUNT(r.raceId)) * 100 AS percentage
FROM 
    drivers d
JOIN 
    results r ON d.driverId = r.driverId
JOIN 
    races ra ON r.raceId = ra.raceId
WHERE 
    d.surname = 'Hamilton' AND ra.year >= 2010;
------------------------------
question: Name the driver with the most winning. Mention his nationality and what is his maximum point scores.
GT: SELECT T1.forename, T1.surname, T1.nationality, MAX(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId WHERE T2.wins >= 1 GROUP BY T1.forename, T1.surname, T1.nationality ORDER BY COUNT(T2.wins) DESC LIMIT 1
Pred: SELECT 
    d.forename || ' ' || d.surname AS driver_name,
    d.nationality,
    MAX(ds.wins) AS max_wins,
    MAX(ds.points) AS max_points
FROM 
    drivers d
JOIN 
    driverStandings ds ON d.driverId = ds.driverId
GROUP BY 
    d.driverId, d.forename, d.surname, d.nationality
ORDER BY 
    max_wins DESC
LIMIT 1;
------------------------------
question: How old is the youngest Japanese driver? What is his name?
GT: SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1
Pred: SELECT 
    forename || ' ' || surname AS driver_name,
    (strftime('%Y', 'now') - strftime('%Y', dob)) AS age
FROM 
    drivers
WHERE 
    nationality = 'Japanese'
ORDER BY 
    age ASC
LIMIT 1;
------------------------------
question: List circuits which host 4 f1 races from year 1990 to 2000.
GT: SELECT DISTINCT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE STRFTIME('%Y', T2.date) BETWEEN '1990' AND '2000' GROUP BY T1.name HAVING COUNT(T2.raceId) = 4
Pred: SELECT 
    c.circuitRef, 
    c.name
FROM 
    races r
JOIN 
    circuits c ON r.circuitId = c.circuitId
WHERE 
    r.date BETWEEN '1990-01-01' AND '2000-12-31'
GROUP BY 
    c.circuitId
HAVING 
    COUNT(r.raceId) = 4;
------------------------------
question: Which race was Alex Yoong in when he was in track number less than 20?
GT: SELECT T1.name FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 20
Pred: SELECT DISTINCT r.name AS race_name
FROM drivers d
JOIN results res ON d.driverId = res.driverId
JOIN races r ON res.raceId = r.raceId
WHERE d.forename = 'Alex' AND d.surname = 'Yoong' AND res.position < 20;
------------------------------
question: How many times did Michael Schumacher won from races hosted in Sepang International Circuit?
GT: SELECT SUM(T2.wins) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId INNER JOIN circuits AS T4 ON T4.circuitId = T3.circuitId WHERE T1.forename = 'Michael' AND T1.surname = 'Schumacher' AND T4.name = 'Sepang International Circuit'
Pred: SELECT COUNT(*) AS wins
FROM drivers d
JOIN results r ON d.driverId = r.driverId
JOIN races ra ON r.raceId = ra.raceId
JOIN circuits c ON ra.circuitId = c.circuitId
WHERE d.forename = 'Michael' 
  AND d.surname = 'Schumacher' 
  AND c.name = 'Sepang International Circuit'
  AND r.points = (
    SELECT MAX(points) 
    FROM results 
    WHERE raceId = ra.raceId
  );
------------------------------
question: State the race and year of race in which Michael Schumacher had his fastest lap.
GT: SELECT T1.name, T1.year FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher' ORDER BY T2.milliseconds ASC LIMIT 1
Pred: SELECT r.name AS race_name, r.year AS race_year
FROM drivers d
JOIN results res ON d.driverId = res.driverId
JOIN races r ON res.raceId = r.raceId
WHERE d.forename = 'Michael' AND d.surname = 'Schumacher'
AND res.milliseconds = (
    SELECT MIN(milliseconds)
    FROM results
    WHERE driverId = (
        SELECT driverId
        FROM drivers
        WHERE forename = 'Michael' AND surname = 'Schumacher'
    )
);
------------------------------
question: What is Eddie Irvine's average points scored in year 2000?
GT: SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Eddie' AND T1.surname = 'Irvine' AND T3.year = 2000
Pred: SELECT AVG(r.points) AS average_points
FROM drivers d
JOIN results r ON d.driverId = r.driverId
JOIN races ra ON r.raceId = ra.raceId
WHERE d.forename = 'Eddie' AND d.surname = 'Irvine' AND ra.year = 2000;
------------------------------
question: Which was Lewis Hamilton first race? What was his points recorded for his first race event?
GT: SELECT T1.name, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.year ASC LIMIT 1
Pred: SELECT 
    d.forename || ' ' || d.surname AS driver_name,
    r.year,
    res.points
FROM 
    drivers d
JOIN 
    results res ON d.driverId = res.driverId
JOIN 
    races r ON res.raceId = r.raceId
WHERE 
    d.forename = 'Lewis' AND d.surname = 'Hamilton'
ORDER BY 
    r.year ASC
LIMIT 1;
------------------------------
question: List all races in 2017 and the hosting country order by date of the event.
GT: SELECT DISTINCT T2.name, T1.country FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2017 ORDER BY T2.date ASC
Pred: SELECT 
    r.name AS race_name,
    c.country AS hosting_country,
    r.date
FROM 
    races r
JOIN 
    circuits c ON r.circuitid = c.circuitid
WHERE 
    r.year = 2017
ORDER BY 
    r.date;
------------------------------
question: What is the most laps f1 races had? Name the race, year and circuit location where the races with most laps was hosted.
GT: SELECT T3.lap, T2.name, T2.year, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN lapTimes AS T3 ON T3.raceId = T2.raceId ORDER BY T3.lap DESC LIMIT 1
Pred: SELECT r.name AS race_name, r.year, c.location AS circuit_location
FROM races r
INNER JOIN circuits c ON r.circuitid = c.circuitid
WHERE r.raceid IN (
    SELECT raceid
    FROM results
    GROUP BY raceid
    HAVING MAX(laps) = (
        SELECT MAX(laps)
        FROM results
    )
);
------------------------------
question: Among all European Grand Prix races, what is the percentage of the races were hosted in Germany?
GT: SELECT CAST(COUNT(CASE WHEN T1.country = 'Germany' THEN T2.circuitID END) AS REAL) * 100 / COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix'
Pred: SELECT 
    (SUM(CASE WHEN r.country = 'Germany' THEN 1 ELSE 0 END) * 100.0 / COUNT(r.raceId)) AS percentage
FROM 
    races r
WHERE 
    r.name = 'European Grand Prix';
------------------------------
question: In which country can I find the circuit with the highest altitude?
GT: SELECT country FROM circuits ORDER BY alt DESC LIMIT 1
Pred: SELECT country
FROM circuits
WHERE alt = (SELECT MAX(alt) FROM circuits);
------------------------------
question: Which country is the oldest driver from?
GT: SELECT nationality FROM drivers WHERE dob IS NOT NULL ORDER BY dob ASC LIMIT 1
Pred: SELECT nationality
FROM drivers
ORDER BY dob DESC
LIMIT 1;
------------------------------
question: Please list the surnames of all the Italian drivers.
GT: SELECT surname FROM drivers WHERE nationality = 'Italian'
Pred: SELECT surname
FROM drivers
WHERE nationality = 'italian';
------------------------------
question: Please give more information about the Formula_1 races that used the Silverstone Circuit.
GT: SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'
Pred: SELECT r.url
FROM races r
JOIN circuits c ON r.circuitid = c.circuitid
WHERE c.name = 'Silverstone';
------------------------------
question: What time did the the 2010's Formula_1 race took place on the Abu Dhabi Circuit?
GT: SELECT T2.date, T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2010 AND T2.name = 'Abu Dhabi Grand Prix'
Pred: SELECT r.date
FROM races r
INNER JOIN circuits c ON r.circuitid = c.circuitid
WHERE r.year = 2010 AND c.circuitref = 'abudhabi';
------------------------------
question: Please list the exact dates on which a Formula_1 race took place on the Barcelona-Catalunya circuit.
GT: SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'
Pred: SELECT races.date
FROM races
JOIN circuits ON races.circuitid = circuits.circuitid
WHERE circuits.name = 'Barcelona-Catalunya';
------------------------------
question: Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name.
GT: SELECT T3.forename, T3.surname, T3.driverRef FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Canadian Grand Prix' AND T2.rank = 1 AND T1.year = 2007
Pred: SELECT d.driverRef
FROM races r
JOIN results res ON r.raceId = res.raceId
JOIN drivers d ON res.driverId = d.driverId
WHERE r.name = 'Canadian Grand Prix'
  AND r.year = 2007
  AND res.position = 1;
------------------------------
question: In which Formula_1 race did Lewis Hamilton rank the highest?
GT: SELECT name FROM races WHERE raceId IN ( SELECT raceId FROM results WHERE rank = 1 AND driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) )
Pred: SELECT r.name AS race_name
FROM drivers d
JOIN results res ON d.driverId = res.driverId
JOIN races r ON res.raceId = r.raceId
WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'
AND res.rank = (
    SELECT MIN(rank)
    FROM results
    WHERE driverId = (
        SELECT driverId
        FROM drivers
        WHERE forename = 'Lewis' AND surname = 'Hamilton'
    )
);
------------------------------
question: Which was the fastest lap for Lewis Hamilton in the 2008 Australian Grand Prix?
GT: SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton'
Pred: SELECT 
    lt.time AS fastest_lap_time
FROM 
    drivers d
JOIN 
    results r ON d.driverId = r.driverId
JOIN 
    races ra ON r.raceId = ra.raceId
JOIN 
    lapTimes lt ON r.driverId = lt.driverId AND r.raceId = lt.raceId
WHERE 
    d.forename = 'Lewis' AND d.surname = 'Hamilton'
    AND ra.name = 'Australian Grand Prix'
    AND ra.year = 2008
    AND lt.time = (
        SELECT 
            MIN(lt2.time)
        FROM 
            lapTimes lt2
        WHERE 
            lt2.driverId = d.driverId AND lt2.raceId = ra.raceId
    );
------------------------------
question: What's the finish time for the driver who ranked second in 2008's AustChineseralian Grand Prix?
GT: SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank = 2 AND T2.name = 'Chinese Grand Prix' AND T2.year = 2008
Pred: SELECT 
    res.time AS finish_time
FROM 
    races r
INNER JOIN 
    results res ON r.raceId = res.raceId
WHERE 
    r.name = 'Australian Grand Prix' 
    AND r.year = 2008 
    AND res.position = 2;
------------------------------
question: What is the average fastest lap time in seconds for Lewis Hamilton in all the Formula_1 races?
GT: SELECT AVG(CAST(SUBSTR(T2.fastestLapTime, 1, INSTR(T2.fastestLapTime, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(T2.fastestLapTime, INSTR(T2.fastestLapTime, ':') + 1) AS REAL)) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.surname = 'Hamilton' AND T1.forename = 'Lewis'
Pred: WITH FastestLapTimes AS (
    SELECT 
        r.raceId,
        r.fastestLapTime,
        (CAST(SUBSTR(r.fastestLapTime, 1, 2) AS INTEGER) * 60 + 
         CAST(SUBSTR(r.fastestLapTime, 4, 2) AS INTEGER) + 
         CAST(SUBSTR(r.fastestLapTime, 7, 3) AS REAL) / 1000) AS fastestLapTimeInSeconds
    FROM 
        results r
    INNER JOIN 
        drivers d ON r.driverId = d.driverId
    WHERE 
        d.forename = 'Lewis' AND d.surname = 'Hamilton'
)
SELECT 
    AVG(fastestLapTimeInSeconds) AS averageFastestLapTimeInSeconds
FROM 
    FastestLapTimes;
------------------------------
question: What is the rate of drivers completing all the laps in the 2008 Australian Grand Prix?
GT: SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.resultId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008
Pred: SELECT 
    SUM(CASE WHEN r.time IS NOT NULL THEN 1 ELSE 0 END) * 1.0 / COUNT(r.driverId) AS rate
FROM 
    results r
JOIN 
    races ra ON r.raceId = ra.raceId
WHERE 
    ra.year = 2008 AND ra.name = 'Australian Grand Prix';
------------------------------
question: How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix?
GT: WITH time_in_seconds AS ( SELECT T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6) AS REAL) ELSE CAST(SUBSTR(T1.time, 2) AS REAL) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL AND T2.year = 2008 ), champion_time AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = 1), last_driver_incremental AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = (SELECT MAX(positionOrder) FROM time_in_seconds) ) SELECT (CAST((SELECT time_seconds FROM last_driver_incremental) AS REAL) * 100) / (SELECT time_seconds + (SELECT time_seconds FROM last_driver_incremental) FROM champion_time)
Pred: WITH RaceDetails AS (
    SELECT raceId
    FROM races
    WHERE name = 'Australian Grand Prix' AND year = 2008
),
ChampionTime AS (
    SELECT MIN(time) AS champion_time
    FROM results
    WHERE raceId = (SELECT raceId FROM RaceDetails)
),
LastDriverTime AS (
    SELECT MAX(time) AS last_driver_time
    FROM results
    WHERE raceId = (SELECT raceId FROM RaceDetails)
)
SELECT 
    (CAST(REPLACE(SUBSTR((SELECT champion_time FROM ChampionTime), 1, 2), ':', '') AS REAL) * 60 + 
     CAST(REPLACE(SUBSTR((SELECT champion_time FROM ChampionTime), 4, 2), ':', '') AS REAL) + 
     CAST(REPLACE(SUBSTR((SELECT champion_time FROM ChampionTime), 7, 3), '.', '') AS REAL)) - 
    (CAST(REPLACE(SUBSTR((SELECT last_driver_time FROM LastDriverTime), 1, 2), ':', '') AS REAL) * 60 + 
     CAST(REPLACE(SUBSTR((SELECT last_driver_time FROM LastDriverTime), 4, 2), ':', '') AS REAL) + 
     CAST(REPLACE(SUBSTR((SELECT last_driver_time FROM LastDriverTime), 7, 3), '.', '') AS REAL)) AS time_difference,
    ((CAST(REPLACE(SUBSTR((SELECT champion_time FROM ChampionTime), 1, 2), ':', '') AS REAL) * 60 + 
     CAST(REPLACE(SUBSTR((SELECT champion_time FROM ChampionTime), 4, 2), ':', '') AS REAL) + 
     CAST(REPLACE(SUBSTR((SELECT champion_time FROM ChampionTime), 7, 3), '.', '') AS REAL)) - 
    (CAST(REPLACE(SUBSTR((SELECT last_driver_time FROM LastDriverTime), 1, 2), ':', '') AS REAL) * 60 + 
     CAST(REPLACE(SUBSTR((SELECT last_driver_time FROM LastDriverTime), 4, 2), ':', '') AS REAL) + 
     CAST(REPLACE(SUBSTR((SELECT last_driver_time FROM LastDriverTime), 7, 3), '.', '') AS REAL)) / 
    (CAST(REPLACE(SUBSTR((SELECT last_driver_time FROM LastDriverTime), 1, 2), ':', '') AS REAL) * 60 + 
     CAST(REPLACE(SUBSTR((SELECT last_driver_time FROM LastDriverTime), 4, 2), ':', '') AS REAL) + 
     CAST(REPLACE(SUBSTR((SELECT last_driver_time FROM LastDriverTime), 7, 3), '.', '') AS REAL)) * 100 AS percentage_difference
------------------------------
question: How many circuits are there in Adelaide, Australia?
GT: SELECT COUNT(circuitId) FROM circuits WHERE location = 'Adelaide' AND country = 'Australia'
Pred: SELECT COUNT(*) 
FROM circuits 
WHERE country = 'Australia' AND location = 'Melbourne';
------------------------------
question: Which constructor has the highest point?
GT: SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId ORDER BY T1.points DESC LIMIT 1
Pred: SELECT c.name
FROM constructors c
JOIN constructorStandings cs ON c.constructorId = cs.constructorId
GROUP BY c.name
ORDER BY SUM(cs.points) DESC
LIMIT 1;
------------------------------
question: How many Japanese constructors have 0 points in 2 races?
GT: SELECT COUNT(T1.raceId) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T2.nationality = 'Japanese' GROUP BY T1.constructorId HAVING COUNT(raceId) = 2
Pred: SELECT COUNT(*) AS count
FROM (
    SELECT cs.constructorId
    FROM constructorStandings cs
    JOIN constructors c ON cs.constructorId = c.constructorId
    WHERE cs.points = 0 AND c.nationality = 'Japanese'
    GROUP BY cs.constructorId
    HAVING COUNT(cs.raceId) = 2
) AS cs;
------------------------------
question: Which constructors have been ranked 1?
GT: SELECT DISTINCT T2.name FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.rank = 1
Pred: SELECT c.name
FROM constructorStandings cs
JOIN constructors c ON cs.constructorId = c.constructorId
WHERE cs.position = 1;
------------------------------
question: Please calculate the race completion percentage of Japanese drivers from 2007 to 2009.
GT: SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.raceId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T3.nationality = 'Japanese' AND T2.year BETWEEN 2007 AND 2009
Pred: SELECT 
    ROUND(
        (COUNT(CASE WHEN r.time IS NOT NULL THEN 1 END) * 100.0 / COUNT(*)), 
        2
    ) AS race_completion_percentage
FROM 
    drivers d
JOIN 
    results r ON d.driverId = r.driverId
JOIN 
    races ra ON r.raceId = ra.raceId
WHERE 
    d.nationality = 'Japanese' 
    AND ra.year BETWEEN 2007 AND 2009;
------------------------------
question: What is the average time in seconds of champion for each year, before year 1975?
GT: WITH time_in_seconds AS ( SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6,2) AS REAL )   + CAST(SUBSTR(T1.time, 9) AS REAL)/1000 ELSE 0 END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL ), champion_time AS ( SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1 ) SELECT year, AVG(time_seconds) FROM champion_time WHERE year < 1975 GROUP BY year HAVING AVG(time_seconds) IS NOT NULL
Pred: SELECT 
    r.year,
    AVG(strftime('%s', r.time) - strftime('%s', '00:00:00')) AS average_time_seconds
FROM 
    results r
JOIN 
    (SELECT 
         raceId, 
         MAX(points) AS max_points
     FROM 
         results
     GROUP BY 
         raceId) max_points ON r.raceId = max_points.raceId AND r.points = max_points.max_points
JOIN 
    races ra ON r.raceId = ra.raceId
WHERE 
    r.status = 'Finished' 
    AND r.time IS NOT NULL 
    AND ra.year < 1975
GROUP BY 
    r.year;
------------------------------
question: Which drivers born after 1975 have been ranked 2? Please give their forenames and surnames.
GT: SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) > '1975' AND T1.rank = 2
Pred: SELECT DISTINCT d.forename, d.surname
FROM drivers d
JOIN results r ON d.driverId = r.driverId
WHERE d.dob > '1975-12-31'
AND r.position = 2;
------------------------------
question: Which driver has the fastest lap time? Please give their forenames and surnames.
GT: SELECT T2.forename, T2.surname, T1.fastestLapTime FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime ASC LIMIT 1
Pred: SELECT d.forename, d.surname
FROM results r
JOIN drivers d ON r.driverId = d.driverId
WHERE r.fastestLapTime = (
    SELECT MIN(fastestLapTime)
    FROM results
);
------------------------------
question: What is the fastest lap number of the champion in 2009?
GT: SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T1.time LIKE '_:%:__.___'
Pred: SELECT 
    driverId
FROM 
    driverStandings
WHERE 
    year = 2009
ORDER BY 
    points DESC
LIMIT 1
------------------------------
question: From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50?
GT: SELECT CAST(SUM(IIF(STRFTIME('%Y', T3.dob) < '1985' AND T1.laps > 50, 1, 0)) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.year BETWEEN 2000 AND 2005
Pred: WITH RelevantDrivers AS (
    SELECT COUNT(DISTINCT r.driverId) AS relevant_count
    FROM results r
    JOIN races ra ON r.raceId = ra.raceId
    JOIN drivers d ON r.driverId = d.driverId
    WHERE strftime('%Y', d.dob) < '1985'
      AND r.laps > 50
      AND ra.year BETWEEN 2000 AND 2005
),
TotalDrivers AS (
    SELECT COUNT(DISTINCT r.driverId) AS total_count
    FROM results r
    JOIN races ra ON r.raceId = ra.raceId
    WHERE ra.year BETWEEN 2000 AND 2005
)
SELECT 
    CAST((SELECT relevant_count FROM RelevantDrivers) AS REAL) * 100 / (SELECT total_count FROM TotalDrivers) AS percentage
;
------------------------------
question: List out the code for drivers who have nationality in America.
GT: SELECT code FROM drivers WHERE Nationality = 'American'
Pred: SELECT code
FROM drivers
WHERE nationality = 'America';
------------------------------
question: How many driver participated in race ID number 18?
GT: SELECT COUNT(driverId) FROM driverStandings WHERE raceId = 18
Pred: SELECT COUNT(DISTINCT driverId) AS NumberOfDrivers
FROM results
WHERE raceId = 18;
------------------------------
question: State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?
GT: SELECT COUNT(*) FROM ( SELECT T1.nationality FROM drivers AS T1 ORDER BY JULIANDAY(T1.dob) DESC LIMIT 3) AS T3 WHERE T3.nationality = 'Dutch'
Pred: SELECT 
    d.code,
    SUM(CASE WHEN d.nationality = 'Netherlands' THEN 1 ELSE 0 END) AS netherlandic_drivers
FROM 
    drivers d
WHERE 
    d.driverId IN (
        SELECT 
            driverId 
        FROM 
            drivers 
        ORDER BY 
            dob DESC 
        LIMIT 3
    );
------------------------------
question: List out top 3 German drivers who were born from 1980-1990 and have the earliest lap time.
GT: SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1990' ORDER BY T1.time LIMIT 3
Pred: WITH DriverLapTimes AS (
    SELECT 
        d.driverId,
        d.forename,
        d.surname,
        l.time AS lap_time
    FROM 
        drivers d
    JOIN 
        laptimes l ON d.driverId = l.driverId
    WHERE 
        d.nationality = 'German'
        AND strftime('%Y', d.dob) BETWEEN '1980' AND '1990'
),
MinLapTimes AS (
    SELECT 
        driverId,
        MIN(lap_time) AS min_lap_time
    FROM 
        DriverLapTimes
    GROUP BY 
        driverId
),
RankedDrivers AS (
    SELECT 
        dlt.driverId,
        dlt.forename,
        dlt.surname,
        dlt.lap_time,
        mlt.min_lap_time,
        RANK() OVER (ORDER BY mlt.min_lap_time ASC) AS rank
    FROM 
        DriverLapTimes dlt
    JOIN 
        MinLapTimes mlt ON dlt.driverId = mlt.driverId
)
SELECT 
    rd.forename,
    rd.surname,
    rd.min_lap_time
FROM 
    RankedDrivers rd
WHERE 
    rd.rank <= 3;
------------------------------
question: List out top 10 Spanish drivers who were born before 1982 and have the latest lap time.
GT: SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Spanish' AND STRFTIME('%Y', T2.dob) < '1982' ORDER BY T1.time DESC LIMIT 10
Pred: SELECT d.driverRef, d.forename, d.surname, lt.time
FROM drivers d
JOIN laptimes lt ON d.driverId = lt.driverId
WHERE d.nationality = 'Spanish'
  AND strftime('%Y', d.dob) < '1982'
  AND lt.milliseconds = (
    SELECT MAX(lt.milliseconds)
    FROM laptimes lt
    WHERE lt.driverId = d.driverId
  )
ORDER BY lt.time DESC
LIMIT 10;
------------------------------
question: Which year has the lowest speed of lap time?
GT: SELECT T2.year FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId ORDER BY T1.time DESC LIMIT 1
Pred: SELECT r.year
FROM races r
JOIN results res ON r.raceid = res.raceid
ORDER BY 
    CAST(REPLACE(SUBSTR(res.time, 4, 2), ':', '') AS INTEGER) * 60 + 
    CAST(SUBSTR(res.time, 7, 2) AS INTEGER) + 
    CAST(SUBSTR(res.time, 10, 3) AS INTEGER) / 1000
LIMIT 1;
------------------------------
question: List the driver's ID of the top five driver, by descending order, the fastest time during the first lap of the race.
GT: SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time LIMIT 5
Pred: WITH FirstLapTimes AS (
    SELECT 
        driverId,
        MIN(time) AS fastest_time
    FROM 
        lapTimes
    WHERE 
        lap = 1
    GROUP BY 
        driverId
),
RankedDrivers AS (
    SELECT 
        driverId,
        fastest_time,
        ROW_NUMBER() OVER (ORDER BY fastest_time DESC) AS rank
    FROM 
        FirstLapTimes
)
SELECT 
    driverId
FROM 
    RankedDrivers
WHERE 
    rank <= 5;
------------------------------
question: How many times the circuits were held in Austria? Please give their location and coordinates.
GT: SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Austria'
Pred: SELECT 
    (SELECT COUNT(*) FROM circuits WHERE country = 'Austria') AS count,
    circuits.location,
    circuits.lat,
    circuits.lng
FROM 
    circuits
WHERE 
    circuits.country = 'Austria';
------------------------------
question: What race number has the most finishers?
GT: SELECT raceId FROM results GROUP BY raceId ORDER BY COUNT(time IS NOT NULL) DESC LIMIT 1
Pred: SELECT raceId, COUNT(*) AS num_finishers
FROM results
WHERE time IS NOT NULL
GROUP BY raceId
ORDER BY num_finishers DESC
LIMIT 1;
------------------------------
question: On what year did the youngest driver had his first qualifying race? Also state the name, date and time of the race.
GT: SELECT T3.year, T3.name, T3.date, T3.time FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1
Pred: WITH youngest_driver AS (
    SELECT driverId
    FROM drivers
    WHERE dob = (SELECT MAX(dob) FROM drivers)
),
first_qualifying_race AS (
    SELECT q.driverId, r.year, r.name, r.date, r.time
    FROM qualifying q
    JOIN races r ON q.raceId = r.raceId
    WHERE q.driverId = (SELECT driverId FROM youngest_driver)
    ORDER BY r.date
    LIMIT 1
)
SELECT year, name, time
FROM first_qualifying_race;
------------------------------
question: How many American drivers have puncture status.
GT: SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 on T1.driverId = T2.driverId INNER JOIN status AS T3 on T2.statusId = T3.statusId WHERE T3.status = 'Puncture' AND T1.nationality = 'American'
Pred: SELECT COUNT(*) AS count
FROM drivers d
JOIN results r ON d.driverId = r.driverId
WHERE d.nationality = 'American' AND r.status = 'Puncture';
------------------------------
question: Which of the Italian constructor got the highest point to date? Give its introduction website?
GT: SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId WHERE T1.nationality = 'Italian' ORDER BY T2.points DESC LIMIT 1
Pred: SELECT c.name, c.url
FROM constructors c
JOIN constructorstandings cs ON c.constructorid = cs.constructorid
WHERE c.nationality = 'Italian'
GROUP BY c.constructorid
ORDER BY SUM(cs.points) DESC
LIMIT 1;
------------------------------
question: What is the website of the constructor who tallied the most total wins.
GT: SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId ORDER BY T2.wins DESC LIMIT 1
Pred: SELECT c.url
FROM constructors c
JOIN constructorStandings cs ON c.constructorId = cs.constructorId
GROUP BY c.constructorId
ORDER BY SUM(cs.wins) DESC
LIMIT 1;
------------------------------
question: Among the drivers who participated in the French Grand Prix, who has the slowest time in the 3rd lap.
GT: SELECT T1.driverId FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'French Grand Prix' AND T1.lap = 3 ORDER BY T1.time DESC LIMIT 1
Pred: SELECT d.forename, d.surname
FROM drivers d
INNER JOIN laptimes l ON d.driverid = l.driverid
INNER JOIN races r ON l.raceid = r.raceid
WHERE r.name = 'French Grand Prix' AND l.lap = 3
ORDER BY l.time DESC
LIMIT 1;
------------------------------
question: In which race did the fastest 1st lap time was recorded? Please indicate the time in milliseconds.
GT: SELECT T1.milliseconds FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.lap = 1 ORDER BY T1.time LIMIT 1
Pred: SELECT r.name AS race_name, r.date AS race_date, lt.time AS fastest_lap_time_ms
FROM lapTimes lt
JOIN races r ON lt.raceId = r.raceId
WHERE lt.time = (
    SELECT MIN(time)
    FROM lapTimes
    WHERE lap = 1
)
AND lt.lap = 1;
------------------------------
question: List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985.
GT: SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1985' GROUP BY T2.forename, T2.surname ORDER BY AVG(T1.duration) LIMIT 3
Pred: WITH DriverPitStops AS (
    SELECT 
        d.driverId,
        d.forename,
        d.surname,
        AVG(p.duration) AS avg_pit_stop_duration
    FROM 
        drivers d
    JOIN 
        pitStops p ON d.driverId = p.driverId
    WHERE 
        d.nationality = 'German' AND 
        strftime('%Y', d.dob) BETWEEN '1980' AND '1985'
    GROUP BY 
        d.driverId
),
RankedDrivers AS (
    SELECT 
        driverId,
        forename,
        surname,
        avg_pit_stop_duration,
        ROW_NUMBER() OVER (ORDER BY avg_pit_stop_duration ASC) AS rank
    FROM 
        DriverPitStops
)
SELECT 
    driverId,
    forename,
    surname,
    avg_pit_stop_duration
FROM 
    RankedDrivers
WHERE 
    rank <= 3;
------------------------------
question: Who is the champion of the Canadian Grand Prix in 2008? Indicate his finish time.
GT: SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T2.year = 2008 AND T1.time LIKE '_:%:__.___'
Pred: WITH RaceResultsCTE AS (
    SELECT 
        r.raceId,
        r.year,
        r.name AS raceName,
        res.driverId,
        res.position,
        res.points,
        res.milliseconds,
        ROW_NUMBER() OVER (PARTITION BY r.raceId ORDER BY res.points DESC) AS rank
    FROM 
        races r
    INNER JOIN 
        results res ON r.raceId = res.raceId
    WHERE 
        r.year = 2008 AND r.name = 'Canadian Grand Prix'
)
SELECT 
    d.forename || ' ' || d.surname AS driverName,
    strftime('%H:%M:%S.%f', rr.milliseconds / 1000, 'unixepoch') AS finishTime
FROM 
    RaceResultsCTE rr
INNER JOIN 
    drivers d ON rr.driverId = d.driverId
WHERE 
    rr.rank = 1;
------------------------------
question: Find the full name, Wiki Pedia page link, and date of birth of German drivers born between 1971 and 1985. List it in descending order of date of birth.
GT: SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC
Pred: SELECT 
    d.forename || ' ' || d.surname AS full_name,
    d.url,
    d.dob
FROM 
    drivers d
WHERE 
    d.nationality = 'German' 
    AND strftime('%Y', d.dob) BETWEEN '1971' AND '1985'
ORDER BY 
    d.dob DESC;
------------------------------
question: In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?
GT: SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'
Pred: SELECT location, country, lat, lng
FROM circuits
WHERE name = 'Hungaroring';
------------------------------
question: Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team.
GT: SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T2.name ORDER BY SUM(T1.points) DESC LIMIT 1
Pred: SELECT 
    c.name AS constructor_name,
    c.nationality,
    SUM(cs.points) AS total_points
FROM 
    races r
JOIN 
    constructorStandings cs ON r.raceId = cs.raceId
JOIN 
    constructors c ON cs.constructorId = c.constructorId
WHERE 
    r.name = 'Monaco Grand Prix' 
    AND r.year BETWEEN 1980 AND 2010
GROUP BY 
    c.name, c.nationality
ORDER BY 
    total_points DESC
LIMIT 1;
------------------------------
question: What is the average score of Lewis Hamilton among all the Turkish Grand Prix?
GT: SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.name = 'Turkish Grand Prix'
Pred: SELECT AVG(r.points) AS average_score
FROM drivers d
JOIN results r ON d.driverId = r.driverId
JOIN races ra ON r.raceId = ra.raceId
WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' AND ra.name = 'Turkish Grand Prix';
------------------------------
question: What is the annual average number of races held during the first 10 years of the 21st century?
GT: SELECT CAST(SUM(CASE WHEN year BETWEEN 2000 AND 2010 THEN 1 ELSE 0 END) AS REAL) / 10 FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31'
Pred: SELECT AVG(race_count) AS average_races
FROM (
    SELECT year, COUNT(raceId) AS race_count
    FROM races
    WHERE year BETWEEN 2000 AND 2009
    GROUP BY year
) AS yearly_race_counts;
------------------------------
question: In terms of number of points acquired, how many victories did the driver who ranked 91st acquired?
GT: SELECT SUM(CASE WHEN points = 91 THEN wins ELSE 0 END) FROM driverStandings
Pred: SELECT ds.wins
FROM driverStandings ds
INNER JOIN drivers d ON ds.driverId = d.driverId
WHERE ds.positionText = '91';
------------------------------
question: Which racetrack hosted the most recent race? Indicate the full location.
GT: SELECT T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.date DESC LIMIT 1
Pred: SELECT location, country
FROM races
ORDER BY date DESC
LIMIT 1;
------------------------------
question: What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?
GT: SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE q3 IS NOT NULL AND T3.year = 2008 AND T3.circuitId IN ( SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit' ) ORDER BY CAST(SUBSTR(q3, 1, INSTR(q3, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(q3, INSTR(q3, ':') + 1, INSTR(q3, '.') - INSTR(q3, ':') - 1) AS REAL) + CAST(SUBSTR(q3, INSTR(q3, '.') + 1) AS REAL) / 1000 ASC LIMIT 1
Pred: SELECT d.forename || ' ' || d.surname AS driver_name
FROM qualifying q
JOIN races r ON q.raceid = r.raceid
JOIN circuits c ON r.circuitid = c.circuitid
JOIN drivers d ON q.driverid = d.driverid
WHERE r.year = 2008
  AND c.name = 'Marina Bay Street Circuit'
  AND q.position = 1
  AND q.raceid = (
    SELECT raceid
    FROM qualifying
    WHERE raceid = r.raceid
    ORDER BY position
    LIMIT 1 OFFSET 2
  );
------------------------------
question: As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined.
GT: SELECT T1.forename, T1.surname, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN driverStandings AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T2.raceId = T3.raceId ORDER BY JULIANDAY(T1.dob) DESC LIMIT 1
Pred: SELECT 
    d.forename || ' ' || d.surname AS driver_name,
    d.nationality,
    ra.name AS race_name
FROM 
    drivers d
JOIN 
    results r ON d.driverId = r.driverId
JOIN 
    races ra ON r.raceId = ra.raceId
WHERE 
    d.dob = (SELECT MIN(dob) FROM drivers)
    AND ra.date = (
        SELECT MIN(date) 
        FROM races 
        WHERE raceId IN (
            SELECT raceId 
            FROM results 
            WHERE driverId = d.driverId
        )
    );
------------------------------
question: How many wins was achieved by the oldest racer? Indicate his/her full name.
GT: SELECT SUM(T1.wins),T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId ORDER BY T2.dob ASC LIMIT 1
Pred: SELECT 
    d.forename || ' ' || d.surname AS driverName,
    SUM(ds.wins) AS totalWins
FROM 
    drivers d
JOIN 
    driverStandings ds ON d.driverId = ds.driverId
WHERE 
    d.dob = (SELECT MIN(dob) FROM drivers);
------------------------------
question: Among all the lap records set on various circuits, what is the time for the fastest one?
GT: SELECT time FROM lapTimes ORDER BY (CASE WHEN INSTR(time, ':') <> INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':') THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 3600 ELSE 0 END) + (CAST(SUBSTR(time, INSTR(time, ':') - 2 * (INSTR(time, ':') = INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':')), INSTR(time, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL)) + (CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000) ASC LIMIT 1
Pred: SELECT MIN(time) AS fastest_lap_time
FROM lapTimes;
------------------------------
question: Please list the time each driver spent at the pit stop during the 2011 Australian Grand Prix.
GT: SELECT T1.duration FROM pitStops AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2011 AND T2.name = 'Australian Grand Prix'
Pred: SELECT 
    ps.driverId,
    ps.duration
FROM 
    pitStops ps
JOIN 
    races r ON ps.raceId = r.raceId
WHERE 
    r.year = 2011 AND r.name = 'Australian Grand Prix'
ORDER BY 
    ps.driverId;
------------------------------
question: What is the lap record set by Lewis Hamilton in a Formula_1 race?
GT: SELECT T1.time FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'
Pred: SELECT MIN(lt.time) AS fastest_lap_time
FROM drivers d
JOIN lapTimes lt ON d.driverId = lt.driverId
WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';
------------------------------
question: Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names.
GT: WITH lap_times_in_seconds AS (SELECT driverId, (CASE WHEN SUBSTR(time, 1, INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 60 ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL) ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, '.') + 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000 ELSE 0 END) AS time_in_seconds FROM lapTimes) SELECT T2.forename, T2.surname, T1.driverId FROM (SELECT driverId, MIN(time_in_seconds) AS min_time_in_seconds FROM lap_times_in_seconds GROUP BY driverId) AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.min_time_in_seconds ASC LIMIT 20
Pred: SELECT d.forename || ' ' || d.surname AS driver_name
FROM drivers d
JOIN laptimes l ON d.driverId = l.driverId
WHERE l.time = (
    SELECT MIN(time)
    FROM laptimes
)
ORDER BY l.time ASC
LIMIT 20;
------------------------------
question: What was the position of the circuits during Lewis Hamilton's fastest lap in a Formula_1 race?
GT: SELECT T1.position FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.time ASC LIMIT 1
Pred: SELECT r.position AS circuit_position
FROM drivers d
JOIN results res ON d.driverId = res.driverId
JOIN races r ON res.raceId = r.raceId
JOIN circuits c ON r.circuitId = c.circuitId
WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'
AND (r.raceId, res.position) IN (
    SELECT raceId, position
    FROM results
    WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')
    ORDER BY time
    LIMIT 1
);
------------------------------
question: What is the lap record for the Austrian Grand Prix Circuit?
GT: WITH fastest_lap_times AS ( SELECT T1.raceId, T1.fastestLapTime FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL) SELECT MIN(fastest_lap_times.fastestLapTime) as lap_record FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix'
Pred: SELECT MIN(r.time) AS fastest_lap_time
FROM races ra
INNER JOIN circuits c ON ra.circuitid = c.circuitid
INNER JOIN results r ON ra.raceid = r.raceid
WHERE c.name = 'Austrian Grand Prix Circuit';
------------------------------
question: Please list the lap records for the circuits in Italy.
GT: WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1
Pred: WITH ItalianCircuits AS (
    SELECT circuitId
    FROM circuits
    WHERE country = 'Italy'
),
FastestLapTimes AS (
    SELECT 
        r.raceId,
        r.driverId,
        MIN(r.milliseconds) AS fastest_lap_time
    FROM 
        results r
    INNER JOIN 
        ItalianCircuits ic ON r.raceId = ic.circuitId
    GROUP BY 
        r.raceId, r.driverId
)
SELECT 
    d.forename || ' ' || d.surname AS driver_name,
    flt.fastest_lap_time
FROM 
    FastestLapTimes flt
INNER JOIN 
    drivers d ON flt.driverId = d.driverId;
------------------------------
question: In which Formula_1 race was the lap record for the Austrian Grand Prix Circuit set?
GT: WITH fastest_lap_times AS ( SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T2.name FROM races AS T2 INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN results AS T1 on T2.raceId = T1.raceId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix'
Pred: SELECT r.name AS race_name
FROM races r
JOIN circuits c ON r.circuitid = c.circuitid
JOIN lapTimes lt ON r.raceid = lt.raceid
WHERE c.name = 'Austrian Grand Prix'
AND lt.time = (
    SELECT MIN(lt2.time)
    FROM lapTimes lt2
    WHERE lt2.raceid = r.raceid
);
------------------------------
question: In the race a driver set the lap record for the Austrian Grand Prix Circuit, how long did he spent at the pit stop at that same race?
GT: WITH fastest_lap_times AS ( SELECT T1.raceId, T1.driverId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL), lap_record_race AS ( SELECT T1.raceId, T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix') SELECT T4.duration FROM lap_record_race INNER JOIN pitStops AS T4 on lap_record_race.raceId = T4.raceId AND lap_record_race.driverId = T4.driverId
Pred: SELECT pitStops.duration
FROM pitStops
WHERE pitStops.raceId = (
    SELECT races.raceId
    FROM races
    WHERE races.name = 'Austrian Grand Prix Circuit'
)
AND pitStops.driverId = (
    SELECT results.driverId
    FROM results
    WHERE results.raceId = (
        SELECT races.raceId
        FROM races
        WHERE races.name = 'Austrian Grand Prix Circuit'
    )
    AND results.fastestLapTime IS NOT NULL
);
------------------------------
question: Please list the location coordinates of the circuits whose lap record is 1:29.488.
GT: SELECT T3.lat, T3.lng FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T1.time = '1:29.488'
Pred: SELECT circuits.lat, circuits.lng
FROM results
INNER JOIN races ON results.raceid = races.raceid
INNER JOIN circuits ON races.circuitid = circuits.circuitid
WHERE results.time = '1:29.488';
------------------------------
question: What is the height of the tallest player? Indicate his name.
GT: SELECT player_name FROM Player ORDER BY height DESC LIMIT 1
Pred: SELECT height, player_name
FROM Player
WHERE height = (SELECT MAX(height) FROM Player);
------------------------------
question: What is the preferred foot when attacking of the player with the lowest potential?
GT: SELECT preferred_foot FROM Player_Attributes WHERE potential IS NOT NULL ORDER BY potential ASC LIMIT 1
Pred: SELECT preferred_foot
FROM Player_Attributes
ORDER BY potential ASC
LIMIT 1;
------------------------------
question: Among the players with an overall rating between 60 to 65, how many players whose going to be in all of your attack moves instead of defensing?
GT: SELECT COUNT(id) FROM Player_Attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low'
Pred: SELECT COUNT(*)
FROM Player p
JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id
WHERE pa.overall_rating >= 60 AND pa.overall_rating < 65 AND pa.defensive_work_rate = 'low';
------------------------------
question: Who are the top 5 players who perform better in crossing actions? Indicate their player id.
GT: SELECT id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5
Pred: SELECT player_api_id
FROM Player_Attributes
ORDER BY crossing DESC
LIMIT 5;
------------------------------
question: Give the name of the league had the most goals in the 2016 season?
GT: SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' GROUP BY t2.name ORDER BY SUM(t1.home_team_goal + t1.away_team_goal) DESC LIMIT 1
Pred: SELECT 
    l.name AS league_name
FROM 
    Match m
JOIN 
    League l ON m.country_id = l.country_id
WHERE 
    m.season = '2016'
GROUP BY 
    l.name
ORDER BY 
    SUM(m.home_team_goal + m.away_team_goal) DESC
LIMIT 1;
------------------------------
question: Which home team had lost the fewest matches in the 2016 season?
GT: SELECT teamDetails.team_long_name FROM Match AS matchData INNER JOIN Team AS teamDetails ON matchData.home_team_api_id = teamDetails.team_api_id WHERE matchData.season = '2015/2016' AND matchData.home_team_goal - matchData.away_team_goal < 0 GROUP BY matchData.home_team_api_id ORDER BY COUNT(*) ASC LIMIT 1
Pred: SELECT 
    t.team_long_name
FROM 
    Match m
JOIN 
    Team t ON m.home_team_api_id = t.team_api_id
WHERE 
    m.season = '2015/2016' AND m.home_team_goal < m.away_team_goal
GROUP BY 
    t.team_long_name
ORDER BY 
    COUNT(*) ASC
LIMIT 1;
------------------------------
question: Indicate the full names of the top 10 players with the highest number of penalties.
GT: SELECT t2.player_name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.id = t2.id ORDER BY t1.penalties DESC LIMIT 10
Pred: SELECT 
    p.player_name
FROM 
    Player p
JOIN 
    Player_Attributes pa ON p.player_api_id = pa.player_api_id
ORDER BY 
    pa.penalties DESC
LIMIT 10;
------------------------------
question: In Scotland Premier League, which away team won the most during the 2010 season?
GT: SELECT teamInfo.team_long_name FROM League AS leagueData INNER JOIN Match AS matchData ON leagueData.id = matchData.league_id INNER JOIN Team AS teamInfo ON matchData.away_team_api_id = teamInfo.team_api_id WHERE leagueData.name = 'Scotland Premier League' AND matchData.season = '2009/2010' AND matchData.away_team_goal - matchData.home_team_goal > 0 GROUP BY matchData.away_team_api_id ORDER BY COUNT(*) DESC LIMIT 1
Pred: SELECT 
    T.team_long_name,
    COUNT(*) AS wins
FROM 
    Match M
JOIN 
    Team T ON M.away_team_api_id = T.team_api_id
JOIN 
    League L ON M.league_id = L.id
WHERE 
    M.season = '2009/2010'
    AND M.away_team_goal > M.home_team_goal
    AND L.name = 'Scotland Premier League'
GROUP BY 
    M.away_team_api_id
ORDER BY 
    wins DESC
LIMIT 1;
------------------------------
question: What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed?
GT: SELECT t1.buildUpPlaySpeed FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id ORDER BY t1.buildUpPlaySpeed ASC LIMIT 4
Pred: -- Step 1: Calculate the maximum buildUpPlaySpeed for each team
WITH TeamSpeedCTE AS (
    SELECT 
        team_api_id,
        MAX(buildUpPlaySpeed) AS max_speed
    FROM 
        Team_Attributes
    GROUP BY 
        team_api_id
),

-- Step 2: Rank the teams based on their maximum buildUpPlaySpeed
RankedTeamsCTE AS (
    SELECT 
        team_api_id,
        max_speed,
        ROW_NUMBER() OVER (ORDER BY max_speed DESC) AS rank
    FROM 
        TeamSpeedCTE
)

-- Step 3: Select the top 4 teams with the highest buildUpPlaySpeed
SELECT 
    team_api_id,
    max_speed
FROM 
    RankedTeamsCTE
WHERE 
    rank <= 4;
------------------------------
question: At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015.
GT: SELECT DISTINCT DATETIME() - T2.birthday age FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id WHERE STRFTIME('%Y',t1.`date`) >= '2013' AND STRFTIME('%Y',t1.`date`) <= '2015' AND t1.sprint_speed >= 97
Pred: SELECT 
    (strftime('%Y', pa.date) - strftime('%Y', p.birthday)) - 
    (strftime('%m-%d', pa.date) < strftime('%m-%d', p.birthday)) AS age
FROM 
    Player p
JOIN 
    Player_Attributes pa ON p.player_api_id = pa.player_api_id
WHERE 
    pa.sprint_speed >= 97 AND 
    strftime('%Y', pa.date) BETWEEN '2013' AND '2015';
------------------------------
question: Give the name of the league with the highest matches of all time and how many matches were played in the said league.
GT: SELECT t2.name, t1.max_count FROM League AS t2 JOIN (SELECT league_id, MAX(cnt) AS max_count FROM (SELECT league_id, COUNT(id) AS cnt FROM Match GROUP BY league_id) AS subquery) AS t1 ON t1.league_id = t2.id
Pred: SELECT 
    l.name AS league_name, 
    COUNT(*) AS match_count
FROM 
    Match m
JOIN 
    League l ON m.league_id = l.id
GROUP BY 
    m.league_id
ORDER BY 
    match_count DESC
LIMIT 1;
------------------------------
question: List the players' api id who had the highest above average overall ratings in 2010.
GT: SELECT player_api_id FROM Player_Attributes WHERE SUBSTR(`date`, 1, 4) = '2010' ORDER BY overall_rating DESC LIMIT 1
Pred: WITH AverageOverallRating AS (
    SELECT AVG(overall_rating) AS avg_overall_rating
    FROM Player_Attributes
    WHERE strftime('%Y', date) = '2010'
),
MaxAboveAverageRating AS (
    SELECT MAX(overall_rating) AS max_overall_rating
    FROM Player_Attributes
    WHERE strftime('%Y', date) = '2010'
    AND overall_rating > (SELECT avg_overall_rating FROM AverageOverallRating)
)
SELECT pa.player_api_id
FROM Player_Attributes pa
JOIN MaxAboveAverageRating mar ON pa.overall_rating = mar.max_overall_rating
WHERE strftime('%Y', pa.date) = '2010';
------------------------------
question: Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.
GT: SELECT CAST(COUNT(CASE WHEN t2.preferred_foot = 'left' THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) BETWEEN '1987' AND '1992'
Pred: SELECT 
    (SUM(CASE WHEN preferred_foot = 'left' THEN 1 ELSE 0 END) * 100.0 / COUNT(player_fifa_api_id)) AS percentage
FROM 
    Player
WHERE 
    strftime('%Y', birthday) BETWEEN '1987' AND '1992';
------------------------------
question: List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy.
GT: SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 GROUP BY t1.id ORDER BY CAST(SUM(t2.heading_accuracy) AS REAL) / COUNT(t2.`player_fifa_api_id`) DESC LIMIT 10
Pred: SELECT 
    p.player_name,
    AVG(pa.heading_accuracy) AS avg_heading_accuracy
FROM 
    Player p
JOIN 
    Player_Attributes pa ON p.player_api_id = pa.player_api_id
WHERE 
    p.height > 180
GROUP BY 
    p.player_api_id
ORDER BY 
    avg_heading_accuracy DESC
LIMIT 10;
------------------------------
question: For the teams with normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing.
GT: SELECT t3.team_long_name FROM Team AS t3 INNER JOIN Team_Attributes AS t4 ON t3.team_api_id = t4.team_api_id WHERE t4.buildUpPlayDribblingClass = 'Normal' AND t4.chanceCreationPassing < ( SELECT CAST(SUM(t2.chanceCreationPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayDribblingClass = 'Normal' AND SUBSTR(t2.`date`, 1, 4) = '2014') ORDER BY t4.chanceCreationPassing DESC
Pred: SELECT 
    T.team_long_name
FROM 
    Team T
JOIN 
    Team_Attributes TA ON T.team_api_id = TA.team_api_id
WHERE 
    TA.buildUpPlayDribblingClass = 'Normal'
    AND TA.date >= '2014-01-01 00:00:00'
    AND TA.date <= '2014-01-31 00:00:00'
    AND TA.chanceCreationPassing < (
        SELECT AVG(chanceCreationPassing)
        FROM Team_Attributes
        WHERE date >= '2014-01-01 00:00:00'
        AND date <= '2014-01-31 00:00:00'
    )
ORDER BY 
    TA.chanceCreationPassing DESC;
------------------------------
question: List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season.
GT: SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2009/2010' GROUP BY t1.name HAVING (CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) - (CAST(SUM(t2.away_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) > 0
Pred: SELECT 
    l.name AS league_name
FROM 
    Match m
JOIN 
    Team t ON m.home_team_api_id = t.team_api_id
JOIN 
    League l ON t.country_id = l.country_id
WHERE 
    m.season = '2009/2010'
GROUP BY 
    l.name
HAVING 
    AVG(m.home_team_goal) > AVG(m.away_team_goal);
------------------------------
question: Among all the players whose weight is under 130, how many of them preferred foot in attacking is left?
GT: SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.weight < 130 AND t2.preferred_foot = 'left'
Pred: SELECT COUNT(*)
FROM Player p
INNER JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id
WHERE p.weight < 130 AND pa.preferred_foot = 'left';
------------------------------
question: Who has the highest average finishing rate between the highest and shortest football player?
GT: SELECT A FROM ( SELECT AVG(finishing) result, 'Max' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MAX(height) FROM Player ) UNION SELECT AVG(finishing) result, 'Min' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MIN(height) FROM Player ) ) ORDER BY result DESC LIMIT 1
Pred: SELECT 
    p.player_api_id,
    AVG(pa.finishing) AS avg_finishing_rate
FROM 
    Player p
JOIN 
    Player_Attributes pa ON p.player_api_id = pa.player_api_id
WHERE 
    p.height BETWEEN (SELECT MAX(height) FROM Player) AND (SELECT MIN(height) FROM Player)
GROUP BY 
    p.player_api_id
ORDER BY 
    avg_finishing_rate DESC
LIMIT 1;
------------------------------
question: How many players whose first names are Adam and weigh more than 170?
GT: SELECT COUNT(id) FROM Player WHERE weight > 170 AND player_name LIKE 'Adam%'
Pred: SELECT COUNT(DISTINCT p.player_api_id) AS player_count
FROM Player p
JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id
JOIN Team t ON p.player_api_id = t.team_api_id
WHERE p.player_name LIKE 'Adam%' AND p.weight > 170 AND t.buildUpPlaySpeedClass = 'Fast';
------------------------------
question: List out of players whose preferred foot is left.
GT: SELECT DISTINCT t1.id, t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.preferred_foot = 'left'
Pred: SELECT p.player_name
FROM Player p
JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id
WHERE pa.preferred_foot = 'left';
------------------------------
question: From 2010 to 2015, what was the average overall rating of players who are higher than 170?
GT: SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 170 AND STRFTIME('%Y',t2.`date`) >= '2010' AND STRFTIME('%Y',t2.`date`) <= '2015'
Pred: SELECT AVG(pa.overall_rating) AS average_overall_rating
FROM Player p
JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id
JOIN Match m ON p.player_api_id = m.home_player_1 OR p.player_api_id = m.away_player_1
WHERE p.height > 170
  AND strftime('%Y', m.date) BETWEEN '2010' AND '2015';
------------------------------
question: List all the football player with the highest balance score and potential score of 61.
GT: SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.potential = '61' ORDER BY t2.balance DESC LIMIT 1
Pred: SELECT p.player_name
FROM Player p
JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id
WHERE pa.potential = 61
AND pa.balance = (
    SELECT MAX(balance)
    FROM Player_Attributes
);
------------------------------
question: Which player is older, Aaron Lennon or Abdelaziz Barrada?
GT: SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1
Pred: SELECT player_name
FROM Player
WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada')
ORDER BY birthday DESC
LIMIT 1;
------------------------------
question: Which of these players performs the best in crossing actions, Alexis, Ariel Borysiuk or Arouna Kone?
GT: SELECT t1.player_name, t2.crossing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY t2.crossing DESC LIMIT 1
Pred: SELECT p.player_name
FROM Player p
JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id
WHERE p.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone')
ORDER BY pa.crossing DESC
LIMIT 1;
------------------------------
question: Among the players whose height is over 180, how many of them have a volley score of over 70?
GT: SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 AND t2.volleys > 70
Pred: SELECT COUNT(*) AS total_players
FROM Player p
JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id
WHERE p.height > 180 AND pa.volleys > 70;
------------------------------
question: What is the long passing score of the oldest player?
GT: SELECT t2.long_passing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t1.birthday ASC LIMIT 1
Pred: SELECT pa.long_passing
FROM Player_Attributes pa
JOIN (
    SELECT player_api_id
    FROM Player
    ORDER BY birthday ASC
    LIMIT 1
) AS oldest_player ON pa.player_api_id = oldest_player.player_api_id;
------------------------------
question: Give the name of the league had the most matches in the 2008/2009 season?
GT: SELECT t1.name FROM League AS t1 JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2008/2009' GROUP BY t1.name HAVING COUNT(t2.id) = (SELECT MAX(match_count) FROM (SELECT COUNT(t2.id) AS match_count FROM Match AS t2 WHERE t2.season = '2008/2009' GROUP BY t2.league_id))
Pred: SELECT l.name AS league_name
FROM (
    SELECT m.league_id, COUNT(*) AS match_count
    FROM Match m
    WHERE m.season = '2008/2009'
    GROUP BY m.league_id
    ORDER BY match_count DESC
    LIMIT 1
) AS subquery
JOIN League l ON subquery.league_id = l.id;
------------------------------
question: What is the average overall rating of the players born before the year 1986?
GT: SELECT SUM(t2.overall_rating) / COUNT(t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) < '1986'
Pred: SELECT AVG(pa.overall_rating) AS average_overall_rating
FROM Player p
JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id
WHERE strftime('%Y', p.birthday) < '1986';
------------------------------
question: How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?
GT: SELECT (SUM(CASE WHEN t1.player_name = 'Ariel Borysiuk' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id
Pred: WITH PlayerRatings AS (
    SELECT 
        p.player_name,
        pa.overall_rating
    FROM 
        Player p
    INNER JOIN 
        Player_Attributes pa ON p.player_api_id = pa.player_api_id
    WHERE 
        p.player_name IN ('Ariel Borysiuk', 'Paulin Puel')
)
SELECT 
    (SELECT overall_rating FROM PlayerRatings WHERE player_name = 'Ariel Borysiuk') - 
    (SELECT overall_rating FROM PlayerRatings WHERE player_name = 'Paulin Puel') AS rating_difference,
    ((SELECT overall_rating FROM PlayerRatings WHERE player_name = 'Ariel Borysiuk') - 
    (SELECT overall_rating FROM PlayerRatings WHERE player_name = 'Paulin Puel')) / 
    (SELECT overall_rating FROM PlayerRatings WHERE player_name = 'Paulin Puel') * 100 AS percentage_increase;
------------------------------
question: What is the average number of goals made by Parma as the away team while playing in Italy?
GT: SELECT CAST(SUM(T1.away_team_goal) AS REAL) / COUNT(T1.id) FROM "Match" AS T1 INNER JOIN TEAM AS T2 ON T1.away_team_api_id = T2.team_api_id INNER JOIN Country AS T3 ON T1.country_id = T3.id WHERE T2.team_long_name = 'Parma' AND T3.name = 'Italy'
Pred: SELECT AVG(M.away_team_goal) AS average_goals
FROM Match M
INNER JOIN Team T ON M.away_team_api_id = T.team_api_id
INNER JOIN Country C ON T.team_fifa_api_id = C.id
WHERE T.team_long_name = 'Parma' AND C.name = 'Italy';
------------------------------
question: How was Francesco Migliore's attacking work rate on 2015/5/1?
GT: SELECT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.`date` LIKE '2015-05-01%' AND t1.player_name = 'Francesco Migliore'
Pred: SELECT pa.attacking_work_rate
FROM Player p
INNER JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id
INNER JOIN Match m ON p.player_api_id = m.home_player_1 OR p.player_api_id = m.away_player_1
WHERE p.player_name = 'Francesco Migliore' AND m.date = '2015-05-01';
------------------------------
question: When was the first time did Kevin Constant have his highest crossing score? Give the date.
GT: SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1
Pred: SELECT pa.date
FROM Player p
JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id
WHERE p.player_name = 'Kevin Constant'
AND pa.crossing = (
    SELECT MAX(crossing)
    FROM Player_Attributes
    WHERE player_api_id = p.player_api_id
)
ORDER BY pa.date ASC
LIMIT 1;
------------------------------
question: What was the build up play speed class for "Willem II" on 2011/2/22?
GT: SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Willem II' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'
Pred: SELECT ta.buildUpPlaySpeedClass
FROM Team_Attributes ta
INNER JOIN Team t ON ta.team_api_id = t.id
WHERE t.team_long_name = 'Willem II' AND ta.date = '2012-02-22';
------------------------------
question: How was the build up play dribbling class for "LEI" on 2015/9/10?
GT: SELECT t2.buildUpPlayDribblingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'LEI' AND SUBSTR(t2.`date`, 1, 10) = '2015-09-10'
Pred: SELECT 
    CASE 
        WHEN T.team_short_name = 'LEI' THEN TA.buildUpPlayDribblingClass
        ELSE NULL
    END AS buildUpPlayDribblingClass
FROM 
    Team T
INNER JOIN 
    Team_Attributes TA ON T.team_api_id = TA.team_api_id
INNER JOIN 
    Match M ON T.team_api_id = M.home_team_api_id OR T.team_api_id = M.away_team_api_id
WHERE 
    M.date = '2015-09-10 00:00:00';
------------------------------
question: Tell the build Up play passing class for "FC Lorient" on 2010/2/22.
GT: SELECT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'FC Lorient' AND t2.`date` LIKE '2010-02-22%'
Pred: SELECT ta.buildUpPlayPassingClass
FROM Team t
INNER JOIN Match m ON t.team_api_id = m.home_team_api_id
INNER JOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id
WHERE m.date LIKE '2010-02-22%' AND t.team_long_name = 'FC Lorient';
------------------------------
question: State the chance creation passing class for "PEC Zwolle" on 2013/9/20.
GT: SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'PEC Zwolle' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'
Pred: SELECT ta.chance_creation_passing_class
FROM Team t
INNER JOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id
WHERE t.team_long_name = 'PEC Zwolle' AND ta.date = '2013-09-20 00:00:00';
------------------------------
question: What was the chance creation crossing class for "Hull City" on 2010/2/22?
GT: SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hull City' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'
Pred: SELECT ta.chance_creation_crossing_class
FROM Team t
JOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id
JOIN Match m ON t.team_api_id = m.home_team_api_id
WHERE t.team_long_name = 'Hull City' AND m.date = '2010-02-22 00:00:00';
------------------------------
question: For the team "Hannover 96", what was its defence aggression class on 2015/9/10?
GT: SELECT t2.chanceCreationShootingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hannover 96' AND t2.`date` LIKE '2015-09-10%'
Pred: SELECT ta.defenceAggressionClass
FROM Team t
INNER JOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id
WHERE t.team_long_name = 'Hannover 96'
  AND ta.date = '2015-09-10';
------------------------------
question: What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?
GT: SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Marko Arnautovic' AND SUBSTR(t2.`date`, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'
Pred: SELECT AVG(pa.overall_rating) AS average_overall_rating
FROM Player p
JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id
WHERE p.player_name = 'Marko Arnautovic'
AND pa.date BETWEEN '2007-02-22' AND '2016-04-21';
------------------------------
question: What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?
GT: SELECT (SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Jordan Bowery' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) LvsJ_percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-07-12'
Pred: SELECT 
    CASE 
        WHEN pa1.overall_rating > pa2.overall_rating THEN 
            (pa1.overall_rating - pa2.overall_rating) / pa2.overall_rating * 100
        ELSE 0
    END AS rating_difference_percentage
FROM 
    Player p1
JOIN 
    Player_Attributes pa1 ON p1.player_api_id = pa1.player_api_id
JOIN 
    Player p2 ON p2.player_api_id = pa2.player_api_id
JOIN 
    Player_Attributes pa2 ON p2.player_api_id = pa2.player_api_id
WHERE 
    pa1.date = '2013/7/12' 
    AND pa2.date = '2013/7/12' 
    AND p1.player_name = 'Landon Donovan' 
    AND p2.player_name = 'Jordan Bowery';
------------------------------
question: List down the name of players who are 35 years old and above.
GT: SELECT player_name FROM Player WHERE CAST((JULIANDAY('now') - JULIANDAY(birthday)) AS REAL) / 365 >= 35
Pred: SELECT player_name
FROM Player
WHERE (strftime('%Y', 'now') - strftime('%Y', birthday)) >= 35;
------------------------------
question: How many home team goal have been scored by Aaron Lennon?
GT: SELECT SUM(t2.home_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_9 WHERE t1.player_name = 'Aaron Lennon'
Pred: SELECT SUM(M.home_team_goal) AS total_goals
FROM Match M
JOIN Player P ON M.home_player_1 = P.player_api_id
WHERE P.player_name = 'Aaron Lennon'
AND (M.home_player_1 = P.player_api_id OR M.home_player_2 = P.player_api_id OR M.home_player_3 = P.player_api_id OR M.home_player_4 = P.player_api_id OR M.home_player_5 = P.player_api_id OR M.home_player_6 = P.player_api_id OR M.home_player_7 = P.player_api_id OR M.home_player_8 = P.player_api_id OR M.home_player_9 = P.player_api_id OR M.home_player_10 = P.player_api_id OR M.home_player_11 = P.player_api_id);
------------------------------
question: Sum up the away team goal scored by both Daan Smith and Filipe Ferreira.
GT: SELECT SUM(t2.away_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_5 WHERE t1.player_name IN ('Daan Smith', 'Filipe Ferreira')
Pred: SELECT 
    p.player_name, 
    SUM(m.away_team_goal) AS total_goals
FROM 
    Player p
INNER JOIN 
    Match m ON p.player_api_id = m.away_player_1 
    OR p.player_api_id = m.away_player_2 
    OR p.player_api_id = m.away_player_3 
    OR p.player_api_id = m.away_player_4 
    OR p.player_api_id = m.away_player_5 
    OR p.player_api_id = m.away_player_6 
    OR p.player_api_id = m.away_player_7 
    OR p.player_api_id = m.away_player_8 
    OR p.player_api_id = m.away_player_9 
    OR p.player_api_id = m.away_player_10 
    OR p.player_api_id = m.away_player_11
WHERE 
    p.player_name = 'Daan Smith' 
    OR p.player_name = 'Filipe Ferreira'
GROUP BY 
    p.player_name;
------------------------------
question: Calculate the total home team goal scored by players whose age are 30 years old and below.
GT: SELECT SUM(t2.home_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_1 WHERE datetime(CURRENT_TIMESTAMP, 'localtime') - datetime(T1.birthday) < 31
Pred: SELECT SUM(m.home_team_goal) AS total_home_goals
FROM Player p
JOIN Match m ON p.player_api_id = m.home_player_1 OR p.player_api_id = m.home_player_2 OR p.player_api_id = m.home_player_3 OR p.player_api_id = m.home_player_4 OR p.player_api_id = m.home_player_5 OR p.player_api_id = m.home_player_6 OR p.player_api_id = m.home_player_7 OR p.player_api_id = m.home_player_8 OR p.player_api_id = m.home_player_9 OR p.player_api_id = m.home_player_10 OR p.player_api_id = m.home_player_11
WHERE (strftime('%Y', 'now') - strftime('%Y', p.birthday)) <= 30;
------------------------------
question: State the name of the most strongest player.
GT: SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)
Pred: SELECT MAX(overall_rating) FROM Player_Attributes
------------------------------
question: State the name of players who came from Belgium.
GT: SELECT t3.player_name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id WHERE t1.name = 'Belgium'
Pred: SELECT DISTINCT p.player_name
FROM Player p
JOIN Match m ON p.player_api_id = m.home_player_1 OR p.player_api_id = m.away_player_1
JOIN Team t ON m.home_team_api_id = t.team_api_id OR m.away_team_api_id = t.team_api_id
JOIN League l ON t.team_api_id = l.id
JOIN Country c ON l.country_id = c.id
WHERE c.name = 'Belgium';
------------------------------
question: Locate players with vision scores of 90 and above, state the country of these players.
GT: SELECT DISTINCT t4.name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id INNER JOIN Match AS t3 ON t2.player_api_id = t3.home_player_8 INNER JOIN Country AS t4 ON t3.country_id = t4.id WHERE t1.vision > 89
Pred: SELECT P.player_name, C.name AS country_name
FROM Player P
INNER JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id
INNER JOIN Country C ON P.player_fifa_api_id = C.id
WHERE PA.vision >= 90;
------------------------------
question: Which country's players have the heaviest average weights?
GT: SELECT t1.name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id GROUP BY t1.name ORDER BY AVG(t3.weight) DESC LIMIT 1
Pred: SELECT 
    c.name AS country_name,
    AVG(p.weight) AS average_weight
FROM 
    Player p
JOIN 
    Team t ON p.player_fifa_api_id = t.team_fifa_api_id
JOIN 
    Country c ON t.team_api_id = c.id
GROUP BY 
    c.name
ORDER BY 
    average_weight DESC
LIMIT 1;
------------------------------
question: What is the average heights of Italy players?
GT: SELECT CAST(SUM(T1.height) AS REAL) / COUNT(T1.id) FROM Player AS T1 INNER JOIN Match AS T2 ON T1.id = T2.id INNER JOIN Country AS T3 ON T2.country_id = T3.ID WHERE T3.NAME = 'Italy'
Pred: SELECT AVG(p.height) AS AvgHeight
FROM Player p
JOIN Country c ON p.player_api_id = c.id
WHERE c.name = 'Italy';
------------------------------
question: What is the difference between players 6 and 23's jumping scores?
GT: SELECT SUM(CASE WHEN t1.id = 6 THEN t1.jumping ELSE 0 END) - SUM(CASE WHEN t1.id = 23 THEN t1.jumping ELSE 0 END) FROM Player_Attributes AS t1
Pred: SELECT 
    (SELECT jumping FROM Player_Attributes WHERE player_fifa_api_id = 6) - 
    (SELECT jumping FROM Player_Attributes WHERE player_fifa_api_id = 23) AS difference
------------------------------
question: Please provide top five football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking.
GT: SELECT id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential DESC LIMIT 5
Pred: -- Step 1: Find the minimum potential value
SELECT MIN(potential) AS min_potential
FROM Player_Attributes

-- Step 2: Use the minimum potential to filter players who prefer to use their right foot
SELECT p.player_api_id
FROM Player p
JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id
WHERE pa.potential = (
    SELECT MIN(potential)
    FROM Player_Attributes
)
AND p.preferred_foot = 'right'
LIMIT 5;
------------------------------
question: How many players had the highest potential score for crossing that preferred to use their left foots while attacking?
GT: SELECT COUNT(t1.id) FROM Player_Attributes AS t1 WHERE t1.preferred_foot = 'left' AND t1.crossing = ( SELECT MAX(crossing) FROM Player_Attributes)
Pred: SELECT MAX(crossing) FROM Player_Attributes
------------------------------
question: In the 2015–2016 season, how many games were played in the Italian Serie A league?
GT: SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Italy Serie A' AND t2.season = '2015/2016'
Pred: SELECT COUNT(*) AS total_matches
FROM Match m
JOIN League l ON m.league_id = l.id
WHERE m.season = '2015/2016' AND l.name = 'Serie A';
------------------------------
question: Please state the finishing rate and curve score of the player who has the heaviest weight.
GT: SELECT id, finishing, curve FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 1 ) LIMIT 1
Pred: SELECT pa.finishing, pa.curve
FROM Player p
INNER JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id
WHERE p.weight = (SELECT MAX(weight) FROM Player);
------------------------------
question: Please provide the full name of the away team that scored the most goals.
GT: SELECT t2.team_long_name FROM Match AS t1 INNER JOIN Team AS t2 ON t1.away_team_api_id = t2.team_api_id ORDER BY t1.away_team_goal DESC LIMIT 1
Pred: SELECT T.team_long_name
FROM Match M
JOIN Team T ON M.away_team_api_id = T.team_api_id
WHERE M.away_team_goal = (
    SELECT MAX(away_team_goal)
    FROM Match
    GROUP BY away_team_api_id
    ORDER BY SUM(away_team_goal) DESC
    LIMIT 1
);
------------------------------
question: What is the percentage of players that are under 180 cm who have an overall strength of more than 70?
GT: SELECT CAST(COUNT(CASE WHEN t2.overall_rating > 70 THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height < 180
Pred: SELECT 
    CAST(COUNT(CASE WHEN p.height < 180 AND pa.overall_rating > 70 THEN 1 END) AS REAL) / COUNT(*) * 100 AS percentage
FROM 
    Player p
INNER JOIN 
    Player_Attributes pa ON p.player_api_id = pa.player_api_id;
------------------------------
question: Are there more in-patient or outpatient who were male? What is the deviation in percentage?
GT: SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE SEX = 'M'
Pred: WITH MaleCounts AS (
    SELECT 
        SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS InpatientCount,
        SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) AS OutpatientCount
    FROM 
        Patient
    WHERE 
        SEX = 'M'
)
SELECT 
    InpatientCount,
    OutpatientCount,
    (InpatientCount * 100.0 / NULLIF(OutpatientCount, 0)) AS Percentage
FROM 
    MaleCounts;
------------------------------
question: What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient?
GT: SELECT SUM(CASE WHEN Admission = '+' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE Diagnosis = 'SLE'
Pred: SELECT 
    CAST(
        COUNT(CASE WHEN Admission = '-' THEN 1 END) AS REAL
    ) / 
    COUNT(CASE WHEN Admission = '+' THEN 1 END) AS Ratio
FROM 
    Patient
WHERE 
    Diagnosis = 'SLE';
------------------------------
question: For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with.
GT: SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2
Pred: SELECT 
    e.ID, 
    p.SEX, 
    e.Diagnosis
FROM 
    Examination e
INNER JOIN 
    Patient p ON e.ID = p.ID
WHERE 
    e.Thrombosis = 2;
------------------------------
question: For in-patient age 50 and above, what is their average anti-cardiolipin antibody (IgG) concentration?
GT: SELECT AVG(T2.`aCL IgG`) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) >= 50 AND T1.Admission = '+'
Pred: SELECT AVG(e."aCL IgG") AS Average_aCL_IgG
FROM Examination e
INNER JOIN Patient p ON e.ID = p.ID
WHERE p.Admission = '+'
AND (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) >= '50';
------------------------------
question: What was the age of the youngest patient when they initially arrived at the hospital?
GT: SELECT MIN(STRFTIME('%Y', `First Date`) - STRFTIME('%Y', Birthday)) FROM Patient
Pred: SELECT MIN(age) AS youngest_age
FROM (
    SELECT 
        (strftime('%Y', First_Date) - strftime('%Y', Birthday)) AS age
    FROM 
        Patient
) AS age_calculation;
------------------------------
question: What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.
GT: SELECT T2.Symptoms, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Symptoms IS NOT NULL ORDER BY T1.Birthday DESC LIMIT 1
Pred: SELECT 
    e.Symptoms,
    e.Diagnosis
FROM 
    Patient p
JOIN 
    Examination e ON p.ID = e.ID
WHERE 
    e.Symptoms IS NOT NULL
ORDER BY 
    p.Birthday ASC
LIMIT 1;
------------------------------
question: For the year that concluded on December 31, 1998, how many male patients on average were tested in the lab each month?
GT: SELECT CAST(COUNT(T1.ID) AS REAL) / 12 FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.Date) = '1998' AND T1.SEX = 'M'
Pred: SELECT 
    strftime('%Y-%m', L.Date) AS Month,
    COUNT(L.ID) / 12 AS Average_Male_Patients_Per_Month
FROM 
    Laboratory L
JOIN 
    Patient P ON L.ID = P.ID
WHERE 
    L.Date BETWEEN '1998-01-01' AND '1998-12-31'
    AND P.SEX = 'M'
GROUP BY 
    Month;
------------------------------
question: The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?
GT: SELECT T1.Date, STRFTIME('%Y', T2.`First Date`) - STRFTIME('%Y', T2.Birthday),T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SJS' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1
Pred: SELECT 
    (SELECT MAX(l.Date) 
     FROM Laboratory l 
     WHERE l.ID = (
         SELECT p.ID 
         FROM Patient p 
         WHERE p.Diagnosis = 'SJS' 
         ORDER BY p.Birthday ASC 
         LIMIT 1
     )
    ) AS latest_laboratory_date,
    (strftime('%Y', (SELECT p.First_Date 
                      FROM Patient p 
                      WHERE p.Diagnosis = 'SJS' 
                      ORDER BY p.Birthday ASC 
                      LIMIT 1)) - strftime('%Y', (SELECT p.Birthday 
                                                  FROM Patient p 
                                                  WHERE p.Diagnosis = 'SJS' 
                                                  ORDER BY p.Birthday ASC 
                                                  LIMIT 1))) AS age_at_first_arrival;
------------------------------
question: How many patients hadn't undergone a medical examination until at least a year following their initial hospital visit?
GT: SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND STRFTIME('%Y', T2.`Examination Date`) - STRFTIME('%Y', T1.`First Date`) >= 1
Pred: SELECT COUNT(*) 
FROM Examination e
INNER JOIN Patient p ON e.ID = p.ID
WHERE (strftime('%Y', e."Examination Date") - strftime('%Y', p."First Date")) >= 1;
------------------------------
question: How many underage patients were examined during the course of the three-year period from 1990 to 1993?
GT: SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.`Examination Date`) BETWEEN '1990' AND '1993' AND STRFTIME('%Y', T2.`Examination Date`) - STRFTIME('%Y', T1.Birthday) < 18
Pred: SELECT COUNT(*) 
FROM Examination e
JOIN Patient p ON e.ID = p.ID
WHERE strftime('%Y', p.Birthday) < '1982' 
AND strftime('%Y', e."Examination Date") BETWEEN '1990' AND '1993';
------------------------------
question: How many male patients have elevated total bilirubin count?
GT: SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 AND T1.SEX = 'M'
Pred: SELECT COUNT(Patient.ID) AS MaleCount
FROM Patient
INNER JOIN Laboratory ON Patient.ID = Laboratory.ID
WHERE Laboratory.`T-BIL` >= 2.0 AND Patient.SEX = 'M';
------------------------------
question: What is the most common illness that doctors identified among the patients whose lab work was done between 1/1/1985, and 12/31/1995?
GT: SELECT T2.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY T2.Diagnosis ORDER BY COUNT(T2.Diagnosis) DESC LIMIT 1
Pred: SELECT Diagnosis, COUNT(*) AS Count
FROM Examination
WHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31'
GROUP BY Diagnosis
ORDER BY Count DESC
LIMIT 1;
------------------------------
question: How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?
GT: SELECT STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday), T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.HGB DESC LIMIT 1
Pred: WITH MaxHGB AS (
    SELECT MAX(HGB) AS max_hgb
    FROM Laboratory
)
SELECT 
    (strftime('%Y', e."Examination Date") - strftime('%Y', p.Birthday)) AS age,
    e.Diagnosis
FROM Examination e
JOIN Laboratory l ON e.ID = l.ID
JOIN Patient p ON e.ID = p.ID
WHERE l.HGB = (SELECT max_hgb FROM MaxHGB);
------------------------------
question: Was the total cholesterol status for the patient id 2927464 on 1995-9-4 at the normal level?
GT: SELECT CASE WHEN `T-CHO` < 250 THEN 'Normal' ELSE 'Abnormal' END FROM Laboratory WHERE ID = 2927464 AND Date = '1995-09-04'
Pred: SELECT 
    CASE 
        WHEN T-CHO < 250 THEN 'Normal'
        ELSE 'Not Normal'
    END AS TotalCholesterolStatus
FROM 
    Laboratory
WHERE 
    ID = 2927464 AND Date = '1995-09-04';
------------------------------
question: What was the gender of the first AORTITIS diagnosed patient?
GT: SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' AND `First Date` IS NOT NULL ORDER BY `First Date` ASC LIMIT 1
Pred: SELECT SEX
FROM Patient
WHERE Diagnosis = 'AORTITIS'
ORDER BY First_Date ASC
LIMIT 1;
------------------------------
question: For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?
GT: SELECT `aCL IgA`, `aCL IgG`, `aCL IgM` FROM Examination WHERE ID IN ( SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19' ) AND `Examination Date` = '1993-11-12'
Pred: SELECT e."aCL IgM"
FROM "Examination" e
INNER JOIN "Patient" p ON e."ID" = p."ID"
WHERE p."Description" = '1994-02-19' 
  AND p."Diagnosis" = 'SLE' 
  AND e."Examination Date" = '1993-11-12';
------------------------------
question: For the patient who first came to the hospital on 1991/6/13 who was diagnosed with SJS, what is the total number of his/her Laboratory tests in 1995?
GT: SELECT COUNT(*) FROM Laboratory WHERE ID = ( SELECT ID FROM Patient WHERE `First Date` = '1991-06-13' AND Diagnosis = 'SJS' ) AND STRFTIME('%Y', Date) = '1995'
Pred: SELECT COUNT(lab.ID) AS total_laboratory_tests
FROM Laboratory lab
JOIN Patient pat ON lab.ID = pat.ID
WHERE pat.Diagnosis = 'SJS'
  AND pat.First_Date = '1991-06-13'
  AND strftime('%Y', lab.Date) = '1995';
------------------------------
question: For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981?
GT: SELECT CAST((SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END)) AS REAL) / SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18'
Pred: WITH MonthlyCholesterol AS (
    SELECT 
        p.ID,
        SUM(CASE WHEN l.Date LIKE '1981-11-%' THEN l."T-CHO" ELSE 0 END) AS NovemberCholesterol,
        SUM(CASE WHEN l.Date LIKE '1981-12-%' THEN l."T-CHO" ELSE 0 END) AS DecemberCholesterol
    FROM 
        Patient p
    INNER JOIN 
        Laboratory l ON p.ID = l.ID
    WHERE 
        p.Birthday = '1959-02-18'
    GROUP BY 
        p.ID
)
SELECT 
    (NovemberCholesterol - DecemberCholesterol) / NovemberCholesterol AS DecreaseRate
FROM 
    MonthlyCholesterol;
------------------------------
question: Lists all patients by ID who were diagnosed with Behcet's and had their exams between 01/01/197 and 12/31/1997.
GT: SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'Behcet'
Pred: SELECT e.ID
FROM Examination e
JOIN Patient p ON e.ID = p.ID
WHERE e."Examination Date" BETWEEN '1997-01-01' AND '1997-12-31'
AND p.Diagnosis = 'Behcet';
------------------------------
question: How many female patients born in 1964 were admitted to the hospital? List them by ID.
GT: SELECT ID FROM Patient WHERE STRFTIME('%Y', Birthday) = '1964' AND SEX = 'F' AND Admission = '+'
Pred: SELECT ID, COUNT(*) AS count
FROM Patient
WHERE SEX = 'F' AND strftime('%Y', Birthday) = '1964' AND Admission = '+'
GROUP BY ID;
------------------------------
question: What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?
GT: SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S' AND `aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S')
Pred: SELECT COUNT(*)
FROM Examination
WHERE Thrombosis = 2
  AND ANA_Pattern = 'S'
  AND aCL_IgM > (
    SELECT AVG(aCL_IgM) * 1.2
    FROM Examination
    WHERE Thrombosis = 2
      AND ANA_Pattern = 'S'
  );
------------------------------
question: What percentage of male patients who first presented to the hospital in 1981 were diagnosed with BEHCET?
GT: SELECT CAST(SUM(CASE WHEN Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE STRFTIME('%Y', `First Date`) = '1981' AND SEX = 'M'
Pred: SELECT 
    (COUNT(CASE WHEN Diagnosis = 'BEHCET' THEN 1 END) * 100.0 / COUNT(*)) AS percentage
FROM 
    Patient
WHERE 
    SEX = 'M' 
    AND strftime('%Y', First Date) = '1981';
------------------------------
question: List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range.
GT: SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.`T-BIL` < 2.0 AND T2.Date LIKE '1991-10-%'
Pred: SELECT l.ID
FROM Laboratory l
JOIN Patient p ON l.ID = p.ID
WHERE p.Admission = '-'
AND l.Date BETWEEN '1991-10-01' AND '1991-10-31'
AND l.T_BIL < 2.0;
------------------------------
question: When was the medical information on patient number 48473 first documented, and what disease did she have?
GT: SELECT `First Date`, Diagnosis FROM Patient WHERE ID = 48473
Pred: SELECT Description, Diagnosis
FROM Patient
WHERE ID = 48473;
------------------------------
question: How many patients who underwent testing in 1997 had protein levels outside the normal range?
GT: SELECT COUNT(ID) FROM Laboratory WHERE (ALB <= 6.0 OR ALB >= 8.5) AND STRFTIME('%Y', Date) = '1997'
Pred: SELECT COUNT(DISTINCT ID) 
FROM Laboratory 
WHERE strftime('%Y', Date) = '1997' 
AND (TP > 8.5 OR TP < 6);
------------------------------
question: What proportion of patients who had signs of thrombocytopenia had SLE diagnosed?
GT: SELECT CAST(SUM(CASE WHEN Diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Examination WHERE Symptoms = 'thrombocytopenia'
Pred: SELECT 
    (SUM(CASE WHEN Diagnosis = 'ITP' THEN 1 ELSE 0 END) * 100.0 / 
     SUM(CASE WHEN Diagnosis = 'SLE' THEN 1 ELSE 0 END)) AS Proportion
FROM 
    Examination
WHERE 
    Symptoms LIKE '%thrombocytopenia%';
------------------------------
question: How many male patients who underwent testing between 1995 and 1997 and were subsequently diagnosed with Behcet disease did not stay in the hospital for treatment?
GT: SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'Behcet' AND T1.SEX = 'M' AND STRFTIME('%Y', T2.`Examination Date`) BETWEEN '1995' AND '1997' AND T1.Admission = '-'
Pred: SELECT COUNT(*)
FROM Patient p
INNER JOIN Examination e ON p.ID = e.ID
WHERE p.SEX = 'M'
  AND e.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31'
  AND p.Diagnosis = 'Behcet'
  AND p.Admission = '-';
------------------------------
question: How many patients who were female got white blood cells that were below 3.5?
GT: SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC < 3.5 AND T1.SEX = 'F'
Pred: SELECT COUNT(DISTINCT p.ID) AS TotalFemaleWithLowWBC
FROM Patient p
INNER JOIN Laboratory l ON p.ID = l.ID
WHERE p.SEX = 'F' AND l.WBC < 3.5;
------------------------------
question: How long did it take after patient number 821298 arrived at the hospital for the first time before her evaluation began?
GT: SELECT STRFTIME('%d', T3.`Examination Date`) - STRFTIME('%d', T1.`First Date`) FROM Patient AS T1 INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T1.ID = 821298
Pred: SELECT DATEDIFF(e."Examination Date", p."First Date") AS DaysBeforeEvaluation
FROM Examination e
JOIN Patient p ON e.ID = p.ID
WHERE e.ID = 821298;
------------------------------
question: Was the patient with the number 57266's uric acid within a normal range?
GT: SELECT CASE WHEN (T1.SEX = 'F' AND T2.UA > 6.5) OR (T1.SEX = 'M' AND T2.UA > 8.0) THEN true ELSE false END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 57266
Pred: SELECT 
    CASE 
        WHEN p.SEX = 'M' AND l.UA > 8.0 THEN 'Yes'
        WHEN p.SEX = 'F' AND l.UA > 6.5 THEN 'Yes'
        ELSE 'No'
    END AS "Uric Acid within Normal Range"
FROM 
    Laboratory l
INNER JOIN 
    Patient p ON l.ID = p.ID
WHERE 
    l.ID = 57266;
------------------------------
question: List all patients with their sex and date of birthday, whose AST glutamic oxaloacetic transaminase (GOT) index is within normal range for loboratory examination in 1994.
GT: SELECT DISTINCT T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND STRFTIME('%Y', T2.Date) = '1994'
Pred: SELECT P.ID, P.SEX, P.Birthday
FROM Patient P
JOIN Laboratory L ON P.ID = L.ID
WHERE L.GOT < 60 AND strftime('%Y', L.Date) = '1994';
------------------------------
question: Provide the ID and age of patient with lactate dehydrogenase (LDH) between 100-300 index above the normal range.
GT: SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 600 AND T2.LDH < 800
Pred: SELECT 
    L.ID,
    (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS age
FROM 
    Laboratory L
INNER JOIN 
    Patient P ON L.ID = P.ID
WHERE 
    L.LDH BETWEEN 100 AND 300;
------------------------------
question: Name the ID of the patient who is born on the April 1st, 1982. Is his/her alkaliphophatase (ALP) within normal range?
GT: SELECT T1.ID , CASE WHEN T2.ALP < 300 THEN 'normal' ELSE 'abNormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1982-04-01'
Pred: SELECT 
    L.ID,
    CASE 
        WHEN L.ALP < 300 THEN 'Yes'
        ELSE 'No'
    END AS "Within Normal Range"
FROM 
    Laboratory L
INNER JOIN 
    Patient P ON L.ID = P.ID
WHERE 
    P.Birthday = '1982-04-01';
------------------------------
question: For all female patient with total protein (TP) beyond the normal index, what is the deviation of their TP idex from the normal.
GT: SELECT T2.TP - 8.5 FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.TP > 8.5
Pred: SELECT 
    L.ID,
    L.TP - 8.5 AS TP_Deviation
FROM 
    Laboratory L
INNER JOIN 
    Patient P ON L.ID = P.ID
WHERE 
    P.SEX = 'F' AND L.TP > 8.5;
------------------------------
question: Sort in descending order all patients by birthday for male patient with albumin not within range.
GT: SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND (T2.ALB <= 3.5 OR T2.ALB >= 5.5) ORDER BY T1.Birthday DESC
Pred: SELECT p.*, l.ALB
FROM Patient p
INNER JOIN Laboratory l ON p.ID = l.ID
WHERE p.SEX = 'M' AND (l.ALB <= 3.5 OR l.ALB >= 5.5)
ORDER BY p.Birthday DESC;
------------------------------
question: For all patient born in 1982, state if their albumin is within normal range.
GT: SELECT CASE WHEN T2.ALB >= 3.5 AND T2.ALB <= 5.5 THEN 'normal' ELSE 'abnormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1982'
Pred: SELECT 
    p.ID,
    CASE 
        WHEN l.ALB BETWEEN 3.5 AND 5.5 THEN 'Normal'
        ELSE 'Abnormal'
    END AS Albumin_Status
FROM 
    Patient p
JOIN 
    Laboratory l ON p.ID = l.ID
WHERE 
    strftime('%Y', p.Birthday) = '1982' AND
    l.ALB BETWEEN 3.5 AND 5.5;
------------------------------
question: What is the percentage of the female patient whose uric acid (UA) beyond the normal range?
GT: SELECT CAST(SUM(CASE WHEN T2.UA > 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F'
Pred: SELECT 
    (CAST(COUNT(l.ID) AS REAL) / COUNT(p.ID)) * 100 AS percentage
FROM 
    Laboratory l
JOIN 
    Patient p ON l.ID = p.ID
WHERE 
    p.SEX = 'F' AND l.UA > 6.5;
------------------------------
question: For all patients with normal uric acid (UA), what is the average UA index based on their latest laboratory examination result?
GT: SELECT AVG(T2.UA) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.UA < 6.5 AND T1.SEX = 'F') OR (T2.UA < 8.0 AND T1.SEX = 'M') AND T2.Date = ( SELECT MAX(Date) FROM Laboratory )
Pred: WITH LatestLaboratory AS (
    SELECT 
        l.ID,
        l.UA,
        ROW_NUMBER() OVER (PARTITION BY l.ID ORDER BY l.Date DESC) AS rn
    FROM 
        Laboratory l
)
SELECT 
    AVG(ll.UA) AS average_UA_index
FROM 
    LatestLaboratory ll
JOIN 
    Patient p ON ll.ID = p.ID
WHERE 
    ll.rn = 1
    AND (p.SEX = 'M' AND ll.UA < 8.0 OR p.SEX = 'F' AND ll.UA < 6.5);
------------------------------
question: Are there more male patients with creatinine not within the normal range than female? True or False?
GT: SELECT CASE WHEN SUM(CASE WHEN T1.SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) THEN 'True' ELSE 'False' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5
Pred: SELECT 
    CASE 
        WHEN SUM(CASE WHEN p.SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN p.SEX = 'F' THEN 1 ELSE 0 END) THEN 1
        ELSE 0
    END AS result
FROM 
    Patient p
JOIN 
    Laboratory l ON p.ID = l.ID
WHERE 
    l.CRE >= 1.5;
------------------------------
question: What is the highest total bilirubin level recorded? List out the patient details with ID, sex and birthday with that index.
GT: SELECT T2.`T-BIL`, T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.`T-BIL` DESC LIMIT 1
Pred: SELECT P.ID, P.SEX, P.Birthday
FROM Patient P
JOIN Laboratory L ON P.ID = L.ID
WHERE L.T_BIL = (SELECT MAX(T_BIL) FROM Laboratory);
------------------------------
question: List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range.
GT: SELECT T1.ID,T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 GROUP BY T1.SEX,T1.ID
Pred: SELECT 
    GROUP_CONCAT(DISTINCT p.ID) AS list,
    p.SEX
FROM 
    Laboratory l
INNER JOIN 
    Patient p ON l.ID = p.ID
WHERE 
    l."T-BIL" >= 2.0
GROUP BY 
    p.SEX;
------------------------------
question: Who is the oldest patient with the highest total cholesterol (T-CHO). State the patient ID and T-CHO index.
GT: SELECT T1.ID, T2.`T-CHO` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.`T-CHO` DESC, T1.Birthday ASC LIMIT 1
Pred: SELECT 
    p.ID AS Oldest_Patient_ID,
    MAX(l."T-CHO") AS Highest_Total_Cholesterol
FROM 
    Patient p
JOIN 
    Laboratory l ON p.ID = l.ID
WHERE 
    p.Birthday = (SELECT MIN(Birthday) FROM Patient);
------------------------------
question: List each patient's ID and blood glucose (GLU) index that were within normal range for patient's whose data was first recorded in 1991.
GT: SELECT DISTINCT T1.ID, T2.GLU FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.`First Date`) = '1991' AND T2.GLU < 180
Pred: SELECT 
    p.ID, 
    l.GLU
FROM 
    Laboratory l
JOIN 
    Patient p ON l.ID = p.ID
WHERE 
    strftime('%Y', p.Description) = '1991' 
    AND l.GLU < 180;
------------------------------
question: List the patient ID, sex and birthday who has abnormal white blood cell count. Group them by sex and list the patient by age in ascending order.
GT: SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC <= 3.5 OR T2.WBC >= 9.0 GROUP BY T1.SEX,T1.ID ORDER BY T1.Birthday ASC
Pred: SELECT 
    p.ID,
    p.SEX,
    p.Birthday,
    (julianday('now') - julianday(p.Birthday)) / 365.25 AS Age
FROM 
    Patient p
JOIN 
    Laboratory l ON p.ID = l.ID
WHERE 
    l.WBC <= 3.5 OR l.WBC >= 9.0
GROUP BY 
    p.SEX
ORDER BY 
    Age ASC;
------------------------------
question: What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age.
GT: SELECT DISTINCT T1.Diagnosis, T1.ID , STRFTIME('%Y', CURRENT_TIMESTAMP) -STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5
Pred: SELECT 
    l.ID, 
    (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) AS age, 
    p.Diagnosis
FROM 
    Laboratory l
JOIN 
    Patient p ON l.ID = p.ID
WHERE 
    l.RBC < 3.5;
------------------------------
question: Among all outpatients, list out those have low hemoglobin level. State the different IDs and their sex.
GT: SELECT DISTINCT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HGB < 10 AND T1.Admission = '-'
Pred: SELECT DISTINCT p.ID, p.SEX
FROM Patient p
JOIN Laboratory l ON p.ID = l.ID
WHERE p.Admission = '-' AND l.HBG < 10;
------------------------------
question: Among the patients who were diagnosed with SLE, who is the oldest with normal hemoglobin level. Provide the ID and sex.
GT: SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.HGB > 10 AND T2.HGB < 17 ORDER BY T1.Birthday ASC LIMIT 1
Pred: WITH RecentLaboratory AS (
    SELECT 
        p.ID,
        p.SEX,
        p.Birthday,
        l.HGB,
        ROW_NUMBER() OVER (PARTITION BY p.ID ORDER BY l.Date DESC) AS rn
    FROM 
        Patient p
    INNER JOIN 
        Laboratory l ON p.ID = l.ID
)
SELECT 
    ID,
    SEX
FROM 
    RecentLaboratory
WHERE 
    rn = 1
    AND Diagnosis = 'SLE'
    AND HGB > 10
    AND HGB < 17
ORDER BY 
    Birthday DESC
LIMIT 1;
------------------------------
question: For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?
GT: SELECT SUM(CASE WHEN T2.PLT <= 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.PLT >= 400 THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID
Pred: SELECT 
    SUM(CASE WHEN PLT < 100 THEN 1 ELSE 0 END) - 
    SUM(CASE WHEN PLT > 400 THEN 1 ELSE 0 END) AS calculation
FROM 
    Laboratory
WHERE 
    PLT <= 100 OR PLT >= 400;
------------------------------
question: For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level.
GT: SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) < 50 AND STRFTIME('%Y', T2.Date) = '1984'
Pred: SELECT L.*, P.*
FROM Laboratory L
JOIN Patient P ON L.ID = P.ID
WHERE strftime('%Y', L.Date) = '1984'
  AND strftime('%Y', 'now') - strftime('%Y', P.Birthday) < 50
  AND L.PLT BETWEEN 100 AND 400;
------------------------------
question: For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)?
GT: SELECT CAST(SUM(CASE WHEN T2.PT >= 14 AND T1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 55
Pred: SELECT 
    ROUND(
        CAST(SUM(CASE WHEN p.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) / 
        SUM(CASE WHEN l.PT >= 14 THEN 1 ELSE 0 END), 
        2
    ) AS percentage
FROM 
    Patient p
JOIN 
    Laboratory l ON p.ID = l.ID
WHERE 
    (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) > 55
    AND l.PT >= 14;
------------------------------
question: For the examinations done after 1997/1/1, how many of them have the result of an inactivated partial prothrom bin time?
GT: SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.Date > '1997-01-01' AND T2.APTT >= 45
Pred: SELECT COUNT(*) 
FROM Examination 
WHERE `Examination Date` > '1997-01-01' AND APTT < 45;
------------------------------
question: Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level?
GT: SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T2.WBC > 3.5 AND T2.WBC < 9.0 AND T1.SEX = 'M'
Pred: SELECT COUNT(DISTINCT p.ID) AS MaleCount
FROM Patient p
INNER JOIN Laboratory l ON p.ID = l.ID
WHERE p.SEX = 'M'
  AND l.WBC > 3.5
  AND l.WBC < 9.0
  AND (l.FG <= 150 OR l.FG >= 450);
------------------------------
question: How many patients born after 1980/1/1 have an abnormal fibrinogen level?
GT: SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T1.Birthday > '1980-01-01'
Pred: SELECT COUNT(DISTINCT p.ID) 
FROM Patient p
JOIN Laboratory l ON p.ID = l.ID
WHERE p.Birthday > '1980-01-01' AND l.FG NOT BETWEEN 150 AND 450;
------------------------------
question: Please list the disease names of the patients that have a proteinuria level higher than normal.
GT: SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` >= 30
Pred: SELECT DISTINCT e.Diagnosis
FROM Examination e
JOIN Laboratory l ON e.ID = l.ID
WHERE l."U-PRO" >= 30;
------------------------------
question: Which patient has a normal proteinuria level and is diagnosed with SLE? Please give his or her patient ID.
GT: SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` > 0 AND T2.`U-PRO` < 30 AND T1.Diagnosis = 'SLE'
Pred: SELECT L.ID
FROM Laboratory L
INNER JOIN Examination E ON L.ID = E.ID
WHERE L."U-PRO" > 0 AND L."U-PRO" < 30 AND E.Diagnosis = 'SLE';
------------------------------
question: How many patients with an Ig G higher than normal?
GT: SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG >= 2000
Pred: SELECT COUNT(DISTINCT ID) 
FROM Laboratory 
WHERE IGG >= 2000;
------------------------------
question: Among the patients with a normal Ig G level, how many of them have symptoms?
GT: SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG BETWEEN 900 AND 2000 AND T3.Symptoms IS NOT NULL
Pred: SELECT COUNT(DISTINCT l.ID) AS count
FROM Laboratory l
INNER JOIN Examination e ON l.ID = e.ID
WHERE l.IGG > 900 AND l.IGG < 2000 AND e.Symptoms IS NOT NULL;
------------------------------
question: For the patient who has the highest Ig A within the normal range, what is his or her diagnosis?
GT: SELECT patientData.Diagnosis FROM Patient AS patientData INNER JOIN Laboratory AS labData ON patientData.ID = labData.ID WHERE labData.IGA BETWEEN 80 AND 500 ORDER BY labData.IGA DESC LIMIT 1
Pred: SELECT P.Diagnosis
FROM Patient P
JOIN Laboratory L ON P.ID = L.ID
WHERE L.IGA = (
    SELECT MAX(IGA)
    FROM Laboratory
    WHERE IGA BETWEEN 80 AND 500
);
------------------------------
question: How many patients with a normal Ig A level came to the hospital after 1990/1/1?
GT: SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 AND  strftime('%Y',  T1.`First Date`) > '1990'
Pred: SELECT COUNT(Lab.ID) AS Total_Patients
FROM Laboratory Lab
INNER JOIN Patient Pat ON Lab.ID = Pat.ID
WHERE Lab.IGA > 80 AND Lab.IGA < 500
AND strftime('%Y', Pat."First Date") >= '1990';
------------------------------
question: For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with?
GT: SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGM NOT BETWEEN 40 AND 400 GROUP BY T1.Diagnosis ORDER BY COUNT(T1.Diagnosis) DESC LIMIT 1
Pred: WITH AbnormalIgM AS (
    SELECT 
        e.ID,
        e.Diagnosis
    FROM 
        Examination e
    JOIN 
        Laboratory l ON e.ID = l.ID
    WHERE 
        l.IGM <= 40 OR l.IGM >= 400
),
DiagnosisCounts AS (
    SELECT 
        Diagnosis,
        COUNT(*) AS Count
    FROM 
        AbnormalIgM
    GROUP BY 
        Diagnosis
),
RankedDiagnoses AS (
    SELECT 
        Diagnosis,
        Count,
        ROW_NUMBER() OVER (ORDER BY Count DESC) AS Rank
    FROM 
        DiagnosisCounts
)
SELECT 
    Diagnosis
FROM 
    RankedDiagnoses
WHERE 
    Rank = 1;
------------------------------
question: How many patients with a abnormal C-reactive protein don't have their data recorded?
GT: SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.CRP = '+' ) AND T1.Description IS NULL
Pred: SELECT COUNT(DISTINCT p.ID) AS count
FROM Laboratory l
JOIN Patient p ON l.ID = p.ID
WHERE l.CRP = '+' AND p.Description IS NULL;
------------------------------
question: How many patients with a normal Rhuematoid Factor has a positive measure of degree of coagulation?
GT: SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.RA = '-' OR T2.RA = '+-') AND T3.KCT = '+'
Pred: SELECT COUNT(DISTINCT l.ID) 
FROM Laboratory l
JOIN Examination e ON l.ID = e.ID
WHERE l.RF IN ('-', '+-') AND e.KCT = '+';
------------------------------
question: How many patients with a normal RF don't have thrombosis?
GT: SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND T1.Thrombosis = 0
Pred: SELECT COUNT(DISTINCT ID) AS Total_Patients
FROM Examination
WHERE RF < 20 AND Thrombosis = '0';
------------------------------
question: How many patients with a normal level of complement 3 have a P pattern observed in the sheet of ANA examination?
GT: SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.C3 > 35 AND T1.`ANA Pattern` = 'P'
Pred: SELECT COUNT(DISTINCT l.ID) AS Total_Patients
FROM Laboratory l
INNER JOIN Examination e ON l.ID = e.ID
WHERE l.C3 > 35 AND e.ANA Pattern = 'P';
------------------------------
question: Among the patients have blood clots in veins, how many of them have a normal level of complement 4?
GT: SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.C4 > 10 AND T1.Diagnosis = 'APS'
Pred: SELECT COUNT(DISTINCT e.ID) AS num_patients
FROM Examination e
INNER JOIN Laboratory l ON e.ID = l.ID
WHERE e.Thrombosis = 1 AND l.C4 > 10;
------------------------------
question: How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital?
GT: SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP = 'negative' OR T2.RNP = '0' AND T1.Admission = '+'
Pred: SELECT COUNT(DISTINCT L.ID) AS Total_Patient
FROM Laboratory L
INNER JOIN Patient P ON L.ID = P.ID
WHERE L.RNP IN ('-', '+-') AND P.Admission = '+';
------------------------------
question: Among the patients with normal anti-SM, how many of them does not have thrombosis?
GT: SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('negative','0') AND T1.Thrombosis = 0
Pred: SELECT COUNT(*)
FROM Examination e
INNER JOIN Laboratory l ON e.ID = l.ID
WHERE e.Thrombosis = 0 AND l.SM IN ('-', '+-');
------------------------------
question: For the patients with an abnormal anti-SM, please list the IDs of the three youngest ones.
GT: SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM NOT IN ('negative','0') ORDER BY T1.Birthday DESC LIMIT 3
Pred: SELECT ID
FROM Patient
WHERE SM NOT IN ('negative', '0')
ORDER BY Birthday DESC
LIMIT 3;
------------------------------
question: Please list the IDs of the patients who had the examination done after 1997/1/1 and had a normal anti-scl70.
GT: SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SC170 IN ('negative','0') AND T2.Date > 1997-01-01
Pred: SELECT ID
FROM Examination
WHERE Examination Date > '1997-01-01' AND SC170 IN ('negative', '0');
------------------------------
question: Among the patients who has a normal anti-scl70, how many of them are female and does not have any symptom?
GT: SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.SC170 = 'negative' OR T2.SC170 = '0') AND T1.SEX = 'F' AND T3.Symptoms IS NULL
Pred: SELECT COUNT(DISTINCT p.ID) 
FROM Patient p 
JOIN Examination e ON p.ID = e.ID 
WHERE e.SC170 IN ('negative', '0') 
  AND p.SEX = 'F' 
  AND e.Symptoms IS NULL;
------------------------------
question: How many patients with a normal anti-SSA came to the hospital before 2000?
GT: SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA IN ('negative', '0') AND STRFTIME('%Y', T2.Date) < '2000'
Pred: SELECT COUNT(DISTINCT p.ID) AS "Number of distinct ones"
FROM Patient p
JOIN Laboratory l ON p.ID = l.ID
WHERE l.SSA IN ('-', '+')
AND strftime('%Y', p."First Date") < '2000';
------------------------------
question: Which patient is the first patient with an abnormal anti-SSA to come to the hospital? Please give his or her ID.
GT: SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`First Date` IS NOT NULL AND T2.SSA NOT IN ('negative', '0') ORDER BY T1.`First Date` ASC LIMIT 1
Pred: SELECT p.ID
FROM Patient p
INNER JOIN Examination e ON p.ID = e.ID
WHERE e.SSA NOT IN ('negative', '0')
ORDER BY p."First Date"
LIMIT 1;
------------------------------
question: How many patients have a normal anti-SSB and are diagnosed with SLE in the examination?
GT: SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB = 'negative' OR '0' AND T1.Diagnosis = 'SLE'
Pred: SELECT COUNT(DISTINCT L.ID) 
FROM Laboratory L 
JOIN Examination E ON L.ID = E.ID 
WHERE L.SSB IN ('-', '+-') AND E.Diagnosis = 'SLE';
------------------------------
question: For the patients whose anti-SSB are normal, how many of them have other symptoms observed in their examination?
GT: SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB = 'negative' OR '0' AND T1.Symptoms IS NOT NULL
Pred: SELECT COUNT(DISTINCT ID) AS count
FROM Examination
WHERE SSB IN ('negative', '0') AND Symptoms IS NOT NULL;
------------------------------
question: Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male?
GT: SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA IN ('negative', '0') AND T2.SSB IN ('negative', '0') AND T1.SEX = 'M'
Pred: SELECT COUNT(DISTINCT p.ID) AS MaleCount
FROM Patient p
INNER JOIN Laboratory l ON p.ID = l.ID
WHERE p.SEX = 'M' AND l.CENTROMEA IN ('-', '+-') AND l.SSB IN ('-', '+-');
------------------------------
question: For the patients who have an abnormal level of anti-DNA, please list the diseases they are diagnosed with.
GT: SELECT DISTINCT(T1.Diagnosis) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA >= 8
Pred: SELECT examination.Diagnosis
FROM Laboratory
INNER JOIN Examination ON Laboratory.ID = Examination.ID
WHERE Laboratory.DNA >= 8;
------------------------------
question: What is the percentage of patient who has a abnormal level of glutamic oxaloacetic transaminase level, yet he or she is diagnosed with SLE?
GT: SELECT COUNT(CASE WHEN T1.Diagnosis LIKE '%SLE%' THEN T1.ID ELSE 0 END) / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`GOT` >= 60
Pred: SELECT 
    (CAST(COUNT(CASE WHEN p.Diagnosis = 'SLE' THEN 1 ELSE NULL END) AS REAL) / COUNT(l.ID)) * 100 AS percentage
FROM 
    Laboratory l
JOIN 
    Patient p ON l.ID = p.ID
WHERE 
    l.GOT >= 60;
------------------------------
question: Among the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born?
GT: SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT >= 60 ORDER BY T1.Birthday DESC LIMIT 1
Pred: SELECT p.Birthday
FROM Laboratory l
INNER JOIN Patient p ON l.ID = p.ID
WHERE l.GOT >= 60
ORDER BY p.Birthday ASC
LIMIT 1;
------------------------------
question: Please list the top three patients' birthdays with the highest glutamic pylvic transaminase in the normal range.
GT: SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT < 60 ORDER BY T2.GPT DESC LIMIT 3
Pred: WITH RankedLaboratory AS (
    SELECT 
        L.ID,
        L.GPT,
        P.Birthday,
        ROW_NUMBER() OVER (PARTITION BY L.ID ORDER BY L.GPT DESC) AS rank
    FROM 
        Laboratory L
    INNER JOIN 
        Patient P ON L.ID = P.ID
    WHERE 
        L.GPT < 60
)
SELECT 
    Birthday
FROM 
    RankedLaboratory
WHERE 
    rank <= 3;
------------------------------
question: For the patient with the highest lactate dehydrogenase in the normal range, when was his or her data first recorded?
GT: SELECT T1.`First Date` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH < 500 ORDER BY T2.LDH ASC LIMIT 1
Pred: SELECT p."First Date"
FROM Laboratory l
JOIN Patient p ON l.ID = p.ID
WHERE l.LDH = (
    SELECT MAX(LDH)
    FROM Laboratory
    WHERE LDH < 500
);
------------------------------
question: When is the latest patient's medical data recorded? This patient should have an abnormal level of lactate dehydrogenase.
GT: SELECT T1.`First Date` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH >= 500 ORDER BY T1.`First Date` DESC LIMIT 1
Pred: WITH LatestPatient AS (
    SELECT ID
    FROM Patient
    ORDER BY First_Date DESC
    LIMIT 1
),
AbnormalLDH AS (
    SELECT L.Date
    FROM LatestPatient LP
    JOIN Laboratory L ON LP.ID = L.ID
    WHERE L.LDH >= 500
)
SELECT Date
FROM AbnormalLDH;
------------------------------
question: For the patients who are diagnosed with SJS, how many of them have a normal level of total protein?
GT: SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' AND T2.TP > 6.0 AND T2.TP < 8.5
Pred: SELECT COUNT(*)
FROM Laboratory L
INNER JOIN Patient P ON L.ID = P.ID
WHERE P.Diagnosis = 'SJS' AND L.TP BETWEEN 6.0 AND 8.5;
------------------------------
question: What is the examination date of the patient whose albumin is the highest in the normal range?
GT: SELECT Date FROM Laboratory WHERE ALB > 3.5 AND ALB < 5.5 ORDER BY ALB DESC LIMIT 1
Pred: SELECT Date
FROM Examination
WHERE ID IN (
    SELECT ID
    FROM Laboratory
    WHERE ALB = (
        SELECT MAX(ALB)
        FROM Laboratory
        WHERE ALB > 3.5 AND ALB < 5.5
    )
    AND ALB > 3.5 AND ALB < 5.5
);
------------------------------
question: What is the anti Cardiolipin antibody concentration of the female patient with the highest uric acid level in the normal range?
GT: SELECT T3.`aCL IgG`, T3.`aCL IgM`, T3.`aCL IgA` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T1.SEX = 'F' AND T2.UA > 6.5 ORDER BY T2.UA DESC LIMIT 1
Pred: SELECT 
    e."aCL IgG", 
    e."aCL IgM", 
    e."aCL IgA"
FROM 
    Examination e
JOIN 
    Patient p ON e.ID = p.ID
WHERE 
    p.SEX = 'F' 
    AND e.UA > 6.50
ORDER BY 
    e.UA DESC
LIMIT 1;
------------------------------
question: Please list the patient's ID whose creatinine level is normal and whose anti Cardiolipin antibody concentration level is the highest.
GT: SELECT T2.ID FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.CRE < 1.5 ORDER BY T2.`aCL IgA` DESC LIMIT 1
Pred: SELECT L.ID
FROM Laboratory L
WHERE L.CRE < 1.5
AND L.aCL_IgA = (
    SELECT MAX(aCL_IgA)
    FROM Laboratory
);
------------------------------
question: Among the patients whose total bilirubin is over the normal range, how many of them have a peripheral pattern observed in the sheet of ANA examination?
GT: SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-BIL` >= 2 AND T3.`ANA Pattern` LIKE '%P%'
Pred: SELECT COUNT(DISTINCT l.ID) AS Total_Patients
FROM Laboratory l
INNER JOIN Examination e ON l.ID = e.ID
WHERE l."T-BIL" >= 2.0 AND e."ANA Pattern" LIKE '%P%';
------------------------------
question: Among the patients whose total cholesterol is within the normal range, how many of them have a P pattern observed in the sheet of ANA examination?
GT: SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T3.`ANA Pattern` = 'P' AND T2.`T-CHO` < 250
Pred: SELECT COUNT(DISTINCT l.ID) AS Total_Patients
FROM Laboratory l
INNER JOIN Examination e ON l.ID = e.ID
WHERE l."T-CHO" < 250 AND e."ANA Pattern" = 'P';
------------------------------
question: What is the disease name of the patient who has the highest level of triglyceride within the normal range?
GT: SELECT T1.Diagnosis FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG < 200 ORDER BY T2.TG DESC LIMIT 1
Pred: SELECT Diagnosis
FROM Examination
WHERE TG = (
    SELECT MAX(TG)
    FROM Examination
    WHERE TG < 200
);
------------------------------
question: How many patients diagnosed with SLE have a normal white blood cell level?
GT: SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.WBC BETWEEN 3.5 AND 9
Pred: SELECT COUNT(DISTINCT p.ID) AS Total_SLE_Patients
FROM Patient p
INNER JOIN Laboratory l ON p.ID = l.ID
WHERE p.Diagnosis = 'SLE' AND l.WBC BETWEEN 3.5 AND 9.0;
------------------------------
question: Please list the patient's ID if he or she has an abnormal level of red blood cell and is followed at the outpatient clinic.
GT: SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.RBC <= 3.5 OR T2.RBC >= 6) AND T1.Admission = '-'
Pred: SELECT L.ID
FROM Laboratory L
INNER JOIN Patient P ON L.ID = P.ID
WHERE L.RBC <= 3.5 OR L.RBC >= 6.0
AND P.Admission = '-';
------------------------------
question: Among the patients who have a normal platelet level, how many of them have other symptoms observed?
GT: SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 100 AND T2.PLT < 400 AND T1.Diagnosis IS NOT NULL
Pred: SELECT COUNT(*) AS Total_Patients
FROM Laboratory L
INNER JOIN Examination E ON L.ID = E.ID
WHERE L.PLT > 100 AND L.PLT < 400 AND E.Symptoms IS NOT NULL;
------------------------------
question: Please list a patient's platelet level if it is within the normal range and if he or she is diagnosed with MCTD.
GT: SELECT T2.PLT FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'MCTD' AND T2.PLT BETWEEN 100 AND 400
Pred: SELECT l.PLT
FROM Laboratory l
INNER JOIN Examination e ON l.ID = e.ID
WHERE l.PLT > 100 AND l.PLT < 400 AND e.Diagnosis = 'MCTD';
------------------------------
question: How many students in the Student_Club are from the College of Engineering?
GT: SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'
Pred: SELECT COUNT(*)
FROM member m
JOIN major mj ON m.link_to_major = mj.major_id
WHERE m.position = 'Student_Club' AND mj.college = 'College of Engineering';
------------------------------
question: Please list the full names of the students in the Student_Club that come from the Art and Design Department.
GT: SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department'
Pred: SELECT 
    m.first_name || ' ' || m.last_name AS full_name
FROM 
    member m
JOIN 
    major mj ON m.link_to_major = mj.major_id
JOIN 
    event e ON m.member_id = e.link_to_member
WHERE 
    e.event_name = 'Student_Club' 
    AND mj.department = 'Art and Design Department';
------------------------------
question: How many students of the Student_Club have attended the event "Women's Soccer"?
GT: SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'
Pred: SELECT COUNT(*) AS total_members
FROM event e
INNER JOIN attendance a ON e.event_id = a.link_to_event
INNER JOIN member m ON a.link_to_member = m.member_id
WHERE e.event_name = 'Women''s Soccer'
AND m.position = 'Student'
AND m.position = 'Student_Club';
------------------------------
question: Among the students from the Student_Club who attended the event "Women's Soccer", how many of them want a T-shirt that's in medium size?
GT: SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium'
Pred: SELECT COUNT(*) AS total_members
FROM event e
INNER JOIN attendance a ON e.event_id = a.link_to_event
INNER JOIN member m ON a.link_to_member = m.member_id
WHERE e.event_name = 'Women''s Soccer'
AND m.t_shirt_size = 'Medium'
AND m.position = 'Student_Club';
------------------------------
question: What is the event that has the highest attendance of the students from the Student_Club?
GT: SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_name ORDER BY COUNT(T2.link_to_event) DESC LIMIT 1
Pred: SELECT e.event_name
FROM event e
JOIN attendance a ON e.event_id = a.link_to_event
JOIN member m ON a.link_to_member = m.member_id
WHERE m.position = 'Student_Club'
GROUP BY e.event_id
ORDER BY COUNT(a.link_to_event) DESC
LIMIT 1;
------------------------------
question: How many events of the Student_Club did Sacha Harrison attend in 2019?
GT: SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Sacha' AND T3.last_name = 'Harrison' AND SUBSTR(T1.event_date, 1, 4) = '2019'
Pred: SELECT COUNT(e.event_id) AS total_events_attended
FROM event e
JOIN attendance a ON e.event_id = a.link_to_event
JOIN member m ON a.link_to_member = m.member_id
WHERE e.event_date LIKE '2019%' 
  AND e.event_name = 'Student_Club' 
  AND m.first_name = 'Sacha' 
  AND m.last_name = 'Harrison';
------------------------------
question: Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?
GT: SELECT T1.event_name FROM event AS T1  INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id  HAVING COUNT(T2.link_to_event) > 10 EXCEPT SELECT T1.event_name  FROM event AS T1  WHERE T1.type = 'Meeting'
Pred: SELECT COUNT(*) AS meeting_count
FROM (
    SELECT e.event_id
    FROM event e
    JOIN attendance a ON e.event_id = a.link_to_event
    JOIN member m ON a.link_to_member = m.member_id
    WHERE e.type = 'Meeting'
      AND m.first_name || ' ' || m.last_name LIKE '%Student_Club%'
    GROUP BY e.event_id
    HAVING COUNT(DISTINCT a.link_to_member) > 10
) AS meeting_events;
------------------------------
question: List the full name of all the members of the Student_Club who attended the "Laugh Out Loud" event.
GT: SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'
Pred: SELECT 
    m.first_name || ' ' || m.last_name AS full_name
FROM 
    member m
INNER JOIN 
    attendance a ON m.member_id = a.link_to_member
INNER JOIN 
    event e ON a.link_to_event = e.event_id
WHERE 
    e.event_name = 'Laugh Out Loud';
------------------------------
question: How much did the Student_Club members spend on food in September Meeting?
GT: SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Food' AND SUBSTR(T1.event_date, 6, 2) = '09'
Pred: SELECT SUM(b.spent) AS total_spent_on_food
FROM event e
INNER JOIN budget b ON e.event_id = b.link_to_event
INNER JOIN attendance a ON e.event_id = a.link_to_event
INNER JOIN member m ON a.link_to_member = m.member_id
WHERE e.event_name = 'September Meeting'
  AND b.category = 'Food'
  AND m.position = 'Student_Club';
------------------------------
question: List the full name of the Student_Club members that grew up in Illinois state.
GT: SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'
Pred: SELECT m.first_name || ' ' || m.last_name AS full_name
FROM member m
JOIN zip_code z ON m.zip = z.zip_code
WHERE m.position = 'Student Club Member' AND z.state = 'Illinois';
------------------------------
question: What department offers the major that Pierce and Guidi took?
GT: SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.last_name = 'Pierce' OR T1.last_name = 'Guidi'
Pred: SELECT m.department
FROM member AS mb
INNER JOIN major AS m ON mb.link_to_major = m.major_id
WHERE mb.first_name = 'Pierce' AND mb.last_name = 'Guidi';
------------------------------
question: Was each expense in October Meeting on October 8, 2019 approved?
GT: SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date LIKE '2019-10-08%'
Pred: SELECT DISTINCT e.event_name, ex.approved
FROM event e
JOIN attendance a ON e.event_id = a.link_to_event
JOIN member m ON a.link_to_member = m.member_id
JOIN expense ex ON m.member_id = ex.link_to_member
WHERE e.event_name = 'October Meeting'
  AND e.event_date = '2019-10-08'
  AND ex.approved = 'true';
------------------------------
question: Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.
GT: SELECT SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2019' THEN T2.spent ELSE 0 END) - SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2020' THEN T2.spent ELSE 0 END) AS num FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event
Pred: WITH EventBudget AS (
    SELECT 
        e.event_id,
        e.event_name,
        e.event_date,
        b.spent
    FROM 
        event e
    JOIN 
        budget b ON e.event_id = b.link_to_event
    WHERE 
        e.event_name = 'Student_Club'
),
YearlySpent AS (
    SELECT 
        SUBSTR(event_date, 1, 4) AS year,
        SUM(spent) AS total_spent
    FROM 
        EventBudget
    GROUP BY 
        year
)
SELECT 
    (SELECT total_spent FROM YearlySpent WHERE year = '2019') - 
    (SELECT total_spent FROM YearlySpent WHERE year = '2020') AS difference;
------------------------------
question: What was the cost for the "Posters" on 2019/9/4?
GT: SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04'
Pred: SELECT e.cost
FROM event AS ev
JOIN expense AS e ON ev.event_id = e.link_to_budget
WHERE ev.event_name = 'Posters' AND ev.event_date = '2019-09-04';
------------------------------
question: What is the status of the event which bought "Post Cards, Posters" on 2019/8/20?
GT: SELECT T1.event_status FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Post Cards, Posters' AND T2.expense_date = '2019-08-20'
Pred: SELECT e.event_status
FROM event e
JOIN budget b ON e.event_id = b.link_to_event
JOIN expense ex ON b.budget_id = ex.link_to_budget
WHERE ex.expense_description = 'Post Cards, Posters'
  AND ex.expense_date = '2019-8-20';
------------------------------
question: Who was the first one paid his/her dues? Tell the full name.
GT: SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.source = 'Dues' ORDER BY T2.date_received LIMIT 1
Pred: SELECT m.first_name || ' ' || m.last_name AS full_name
FROM member m
JOIN (
    SELECT link_to_member, MIN(date_received) AS earliest_payment_date
    FROM income
    WHERE source = 'Dues'
    GROUP BY link_to_member
) i ON m.member_id = i.link_to_member
ORDER BY i.earliest_payment_date ASC
LIMIT 1;
------------------------------
question: How many times was the budget in Advertisement for "Yearly Kickoff" meeting more than "October Meeting"?
GT: SELECT CAST(SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.type = 'Meeting'
Pred: WITH AdvertisementBudgets AS (
    SELECT 
        b.amount,
        e.event_name
    FROM 
        budget b
    INNER JOIN 
        event e ON b.link_to_event = e.event_id
    WHERE 
        b.category = 'Advertisement'
),
EventSums AS (
    SELECT 
        event_name,
        SUM(amount) AS total_amount
    FROM 
        AdvertisementBudgets
    GROUP BY 
        event_name
)
SELECT 
    COUNT(*) AS count
FROM (
    SELECT 
        (SELECT total_amount FROM EventSums WHERE event_name = 'Yearly Kickoff') /
        (SELECT total_amount FROM EventSums WHERE event_name = 'October Meeting') AS ratio
) AS RatioCTE
WHERE 
    ratio > 1;
------------------------------
question: What percentage was the budget for Parking to the total budget for the "November Speaker"?
GT: SELECT CAST(SUM(CASE WHEN T1.category = 'Parking' THEN T1.amount ELSE 0 END) AS REAL) * 100 / SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Speaker'
Pred: SELECT 
    (SUM(CASE WHEN b.category = 'Parking' THEN b.amount ELSE 0 END) / 
     COUNT(CASE WHEN e.event_name = 'November Speaker' THEN 1 ELSE NULL END)) * 100 AS percentage
FROM 
    budget b
JOIN 
    event e ON b.link_to_event = e.event_id;
------------------------------
question: What are the expenses of the budget with the lowest remaining?
GT: SELECT T2.expense_description FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget ORDER BY T1.remaining LIMIT 1
Pred: SELECT MIN(remaining) AS min_remaining
   FROM budget
------------------------------
question: List all the members who attended the event "October Meeting".
GT: SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'October Meeting'
Pred: SELECT DISTINCT m.first_name, m.last_name
FROM event e
JOIN attendance a ON e.event_id = a.link_to_event
JOIN member m ON a.link_to_member = m.member_id
WHERE e.event_name = 'October Meeting';
------------------------------
question: Which college do most of the members go to?
GT: SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id GROUP BY T2.major_id ORDER BY COUNT(T2.college) DESC LIMIT 1
Pred: SELECT m.college, COUNT(m.major_id) AS member_count
FROM member AS m
JOIN major AS mj ON m.link_to_major = mj.major_id
GROUP BY m.college
ORDER BY member_count DESC
LIMIT 1;
------------------------------
question: List all the expenses incurred by the vice president.
GT: SELECT T2.expense_id, T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'
Pred: SELECT e.expense_description
FROM expense e
JOIN member m ON e.link_to_member = m.member_id
WHERE m.position = 'Vice President';
------------------------------
question: List the name of students that have attended more than 7 events.
GT: SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T2.link_to_member HAVING COUNT(T2.link_to_event) > 7
Pred: SELECT 
    m.first_name || ' ' || m.last_name AS full_name
FROM 
    member m
INNER JOIN 
    attendance a ON m.member_id = a.link_to_member
GROUP BY 
    m.member_id
HAVING 
    COUNT(a.link_to_event) > 7;
------------------------------
question: State the name of students from Georgetown, South Carolina.
GT: SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Georgetown' AND T2.state = 'South Carolina'
Pred: SELECT m.first_name || ' ' || m.last_name AS full_name
FROM member m
JOIN zip_code z ON m.zip = z.zip_code
WHERE z.city = 'Georgetown' AND z.state = 'South Carolina';
------------------------------
question: How many income generated by Grant Gilmour?
GT: SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Grant' AND T1.last_name = 'Gilmour'
Pred: SELECT COUNT(i.income_id) AS total_income
FROM income i
JOIN member m ON i.link_to_member = m.member_id
WHERE m.first_name = 'Grant' AND m.last_name = 'Gilmour';
------------------------------
question: Which student was able to generate income more than $40?
GT: SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount > 40
Pred: SELECT 
    m.first_name || ' ' || m.last_name AS full_name
FROM 
    member m
INNER JOIN 
    income i ON m.member_id = i.link_to_member
WHERE 
    m.position = 'Student' AND i.amount > 40;
------------------------------
question: What is the total expense for the Yearly Kickoff?
GT: SELECT SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'Yearly Kickoff'
Pred: SELECT SUM(ex.cost) AS total_expense
FROM event e
JOIN expense ex ON e.event_id = ex.link_to_event
WHERE e.event_name = 'Yearly Kickoff';
------------------------------
question: Which student has been entrusted to manage the budget for the Yearly Kickoff?
GT: SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Yearly Kickoff'
Pred: SELECT m.first_name || ' ' || m.last_name AS full_name
FROM event e
JOIN budget b ON e.event_id = b.link_to_event
JOIN member m ON b.link_to_event = m.member_id
WHERE e.event_name = 'Yearly Kickoff';
------------------------------
question: Which students manage to generate the highest income. State his/her full name along with the income source.
GT: SELECT T1.first_name, T1.last_name, T2.source FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.first_name, T1.last_name, T2.source ORDER BY SUM(T2.amount) DESC LIMIT 1
Pred: SELECT m.first_name, m.last_name, i.source, i.amount
FROM member m
JOIN income i ON m.member_id = i.link_to_member
WHERE i.amount = (
    SELECT MAX(amount)
    FROM income
);
------------------------------
question: Which event has the lowest cost?
GT: SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget ORDER BY T3.cost LIMIT 1
Pred: SELECT e.event_name
FROM event e
JOIN expense ex ON e.event_id = ex.link_to_event
GROUP BY e.event_id
HAVING MIN(ex.cost) = (
    SELECT MIN(cost)
    FROM expense
);
------------------------------
question: What is the ratio between students majored in finance and physics?
GT: SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio FROM major
Pred: SELECT 
    (SELECT COUNT(*) 
     FROM member m 
     JOIN major mj ON m.link_to_major = mj.major_id 
     WHERE mj.major_name = 'Finance') /
    (SELECT COUNT(*) 
     FROM member m 
     JOIN major mj ON m.link_to_major = mj.major_id 
     WHERE mj.major_name = 'Physics') AS ratio;
------------------------------
question: Provide the number of events attended by Luisa Guidi. What is her major?
GT: SELECT COUNT(T3.link_to_event), T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T2.first_name = 'Luisa' AND T2.last_name = 'Guidi'
Pred: SELECT COUNT(a.link_to_event) AS event_count, m.major_name
FROM member m
JOIN attendance a ON m.member_id = a.link_to_member
JOIN major mj ON m.link_to_major = mj.major_id
WHERE m.first_name = 'Luisa' AND m.last_name = 'Guidi';
------------------------------
question: Did Maya Mclean attend the 'Women's Soccer' event?
GT: SELECT CASE WHEN T3.event_name = 'Women''s Soccer' THEN 'YES' END AS result FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean'
Pred: SELECT e.event_name
FROM member m
JOIN attendance a ON m.member_id = a.link_to_member
JOIN event e ON a.link_to_event = e.event_id
WHERE m.first_name = 'Maya' AND m.last_name = 'Mclean' AND e.event_name = 'Women''s Soccer';
------------------------------
question: Identify the type of expenses and their total value approved for 'October Meeting' event.
GT: SELECT T1.type, SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting'
Pred: SELECT 
    e.type AS expense_type,
    SUM(e.cost) AS total_value
FROM 
    event ev
JOIN 
    budget b ON ev.event_id = b.link_to_event
JOIN 
    expense e ON b.budget_id = e.link_to_budget
WHERE 
    ev.event_name = 'October Meeting' 
    AND e.approved = 'true'
GROUP BY 
    e.type;
------------------------------
question: Among the budgets for Food, which one has the highest budgeted amount?
GT: SELECT budget_id FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget )
Pred: SELECT MAX(amount) AS max_budget_amount
FROM budget
WHERE category = 'Food';
------------------------------
question: Among the budgets for Advertising, list out top three which have the most budgeted amount?
GT: SELECT budget_id FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3
Pred: SELECT amount
FROM budget
WHERE category = 'Advertisement'
ORDER BY amount DESC
LIMIT 3;
------------------------------
question: List out the full name and total cost that member id "rec4BLdZHS2Blfp4v" incurred?
GT: SELECT T1.first_name, T1.last_name, SUM(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v'
Pred: SELECT 
    m.first_name || ' ' || m.last_name AS full_name,
    SUM(e.cost) AS total_cost
FROM 
    member m
INNER JOIN 
    expense e ON m.member_id = e.link_to_member
WHERE 
    m.member_id = 'rec4BLdZHS2Blfp4v'
GROUP BY 
    m.first_name, m.last_name;
------------------------------
question: Calculate the percentage of members who are major Business in the list?
GT: SELECT CAST(SUM(CASE WHEN T2.major_name = 'Business' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member'
Pred: SELECT 
    CAST(COUNT(*) AS REAL) * 100.0 / (SELECT COUNT(*) FROM member) AS percentage
FROM 
    member m
JOIN 
    major mj ON m.link_to_major = mj.major_id
WHERE 
    mj.major_name = 'Business' AND m.position = 'Member';
------------------------------
question: List the last name of members with a major in environmental engineering and include its department and college name.
GT: SELECT T2.last_name, T1.department, T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member' AND T1.major_name = 'Environmental Engineering'
Pred: SELECT m.last_name, mj.major_name, mj.department, mj.college
FROM member m
INNER JOIN major mj ON m.link_to_major = mj.major_id
WHERE mj.major_name = 'Environmental Engineering';
------------------------------
question: What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?
GT: SELECT DISTINCT T2.category, T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' AND T2.spent = 0 AND T1.type = 'Guest Speaker'
Pred: SELECT b.category
FROM event e
JOIN budget b ON e.event_id = b.link_to_event
WHERE e.type = 'Guest Speaker'
  AND e.location = 'MU 215'
  AND b.spent = 0;
------------------------------
question: Which countries have zip codes with post office boxes?
GT: SELECT DISTINCT county FROM zip_code WHERE type = 'PO Box' AND county IS NOT NULL
Pred: SELECT DISTINCT county
FROM zip_code
WHERE type = 'PO Box';
------------------------------
question: Please provide links to events for members who have paid more than 50 dollar.
GT: SELECT DISTINCT T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T1.cost > 50
Pred: SELECT DISTINCT e.link_to_event
FROM expense AS ex
JOIN budget AS b ON ex.link_to_budget = b.budget_id
JOIN event AS e ON b.link_to_event = e.event_id
WHERE ex.cost > 50;
------------------------------
question: Which members who were approved from 1/10/2019 to 11/19/2019? Please identify the member who attended the event and the link to their event.
GT: SELECT DISTINCT T1.link_to_member, T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE date(SUBSTR(T1.expense_date, 1, 10)) BETWEEN '2019-01-10' AND '2019-11-19' AND T1.approved = 'true'
Pred: SELECT m.first_name, m.last_name, a.link_to_event
FROM member m
INNER JOIN attendance a ON m.member_id = a.link_to_member
INNER JOIN expense e ON a.link_to_member = e.link_to_member
WHERE e.approved = 'true' AND e.expense_date BETWEEN '2019-01-10' AND '2019-11-19';
------------------------------
question: Please indicate the college of the person whose first name is Katy with the link to the major "rec1N0upiVLy5esTO".
GT: SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.link_to_major = 'rec1N0upiVLy5esTO' AND T1.first_name = 'Katy'
Pred: SELECT m.college
FROM member AS m
JOIN major AS mj ON m.link_to_major = mj.major_id
WHERE m.first_name = 'Katy' AND m.link_to_major = 'rec1N0upiVLy5esTO';
------------------------------
question: How many members have education major in the College of Education & Human Services?
GT: SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member' AND T2.major_name LIKE '%Education%' AND T2.college = 'College of Education & Human Services'
Pred: SELECT COUNT(*)
FROM member m
JOIN major mj ON m.link_to_major = mj.major_id
WHERE mj.major_name = 'Education'
  AND m.position = 'Member'
  AND mj.college = 'College of Education & Human Services';
------------------------------
question: List the expenses that spend more than fifty dollars on average.
GT: SELECT expense_description FROM expense GROUP BY expense_description HAVING AVG(cost) > 50
Pred: SELECT expense_description, AVG(cost) AS average_cost
FROM expense
GROUP BY expense_description
HAVING AVG(cost) > 50;
------------------------------
question: Find the full name of members whose t-shirt size is extra large.
GT: SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large'
Pred: SELECT first_name || ' ' || last_name AS full_name
FROM member
WHERE t_shirt_size = 'X-Large';
------------------------------
question: Find the name and date of events with expenses for pizza that were more than fifty dollars but less than a hundred dollars.
GT: SELECT T1.event_name, T1.event_date FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T3.expense_description = 'Pizza' AND T3.cost > 50 AND T3.cost < 100
Pred: SELECT e.event_name, e.event_date
FROM event e
JOIN expense ex ON e.event_id = ex.link_to_event
WHERE ex.expense_description = 'Pizza' AND ex.cost > 50 AND ex.cost < 100;
------------------------------
question: In the events with more than forty incomes, list the city and country in which the event is happening.
GT: SELECT DISTINCT T3.city, T3.county FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN zip_code AS T3 ON T3.zip_code = T2.zip WHERE T1.amount > 40
Pred: SELECT z.city, z.county
FROM event e
JOIN income i ON e.event_id = i.link_to_member
JOIN zip_code z ON e.location = z.zip_code
GROUP BY e.event_id
HAVING COUNT(i.income_id) > 40;
------------------------------
question: Among the members who incurred expenses in more than one event, who paid the most amount?
GT: SELECT T2.member_id FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN budget AS T3 ON T1.link_to_budget = T3.budget_id INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id GROUP BY T2.member_id HAVING COUNT(DISTINCT T4.event_id) > 1 ORDER BY SUM(T1.cost) DESC LIMIT 1
Pred: SELECT m.first_name, m.last_name, e.total_expenses
FROM (
    SELECT e.link_to_member, SUM(e.cost) AS total_expenses
    FROM expense e
    JOIN budget b ON e.link_to_budget = b.budget_id
    JOIN event ev ON b.link_to_event = ev.event_id
    GROUP BY e.link_to_member
    HAVING COUNT(DISTINCT ev.event_id) > 1
) e
JOIN member m ON e.link_to_member = m.member_id
ORDER BY e.total_expenses DESC
LIMIT 1;
------------------------------
question: What is the average amount paid by students in a position other than a member?
GT: SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN member as T2 ON T1.link_to_member = T2.member_id WHERE T2.position != 'Member'
Pred: SELECT 
    CAST(SUM(e.cost) AS REAL) / COUNT(e.event_id) AS average_amount_paid
FROM 
    member m
JOIN 
    expense e ON m.member_id = e.link_to_member
WHERE 
    m.position != 'Member';
------------------------------
question: List the name of events with less than average parking cost.
GT: SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)
Pred: SELECT e.event_name
FROM event e
JOIN expense ex ON e.event_id = ex.link_to_event
WHERE ex.category = 'Parking'
AND ex.cost < (
    SELECT AVG(cost)
    FROM expense
    WHERE category = 'Parking'
);
------------------------------
question: What is the percentage of the cost for the meeting events?
GT: SELECT SUM(CASE WHEN T1.type = 'Meeting' THEN T3.cost ELSE 0 END) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget
Pred: SELECT 
    (CAST(SUM(e.cost) AS REAL) / COUNT(DISTINCT ev.event_id)) * 100 AS percentage
FROM 
    event ev
JOIN 
    budget b ON ev.event_id = b.link_to_event
JOIN 
    expense e ON b.budget_id = e.link_to_budget
WHERE 
    ev.type = 'Meeting';
------------------------------
question: Which budget allowed the most money for water, chips, and cookies?
GT: SELECT T2.budget_id FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Water, chips, cookies' ORDER BY T1.cost DESC LIMIT 1
Pred: SELECT expense_description
FROM expense
WHERE cost = (
    SELECT MAX(cost)
    FROM expense
    WHERE expense_description = 'Water, chips, cookies'
) AND expense_description = 'Water, chips, cookies';
------------------------------
question: List the full name of the top five members who spend the most money in the descending order of spending.
GT: SELECT T3.first_name, T3.last_name FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id ORDER BY T2.spent DESC LIMIT 5
Pred: SELECT 
    m.first_name || ' ' || m.last_name AS full_name,
    SUM(e.cost) AS total_spent
FROM 
    member m
JOIN 
    expense e ON m.member_id = e.link_to_member
GROUP BY 
    m.member_id
ORDER BY 
    total_spent DESC
LIMIT 5;
------------------------------
question: Calculate the difference in the percentage of members in New Jersey and Vermont.
GT: SELECT CAST((SUM(CASE WHEN T2.state = 'New Jersey' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.state = 'Vermont' THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T1.member_id) AS diff FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip
Pred: WITH StateCounts AS (
    SELECT 
        COUNT(CASE WHEN z.state = 'New Jersey' THEN 1 END) AS new_jersey_count,
        COUNT(CASE WHEN z.state = 'Vermont' THEN 1 END) AS vermont_count,
        COUNT(m.member_id) AS total_member_count
    FROM member m
    JOIN zip_code z ON m.zip = z.zip_code
    WHERE m.position = 'Member'
),
PercentageCalculation AS (
    SELECT 
        (new_jersey_count * 100.0 / total_member_count) AS new_jersey_percentage,
        (vermont_count * 100.0 / total_member_count) AS vermont_percentage
    FROM StateCounts
)
SELECT 
    new_jersey_percentage - vermont_percentage AS state_difference
FROM PercentageCalculation;
------------------------------
question: Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.
GT: SELECT DISTINCT T3.first_name, T3.last_name, T4.amount FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T3.member_id = T2.link_to_member INNER JOIN income AS T4 ON T4.link_to_member = T3.member_id WHERE T4.date_received = '2019-09-09'
Pred: SELECT m.first_name, m.last_name, i.amount
FROM member m
INNER JOIN income i ON m.member_id = i.link_to_member
WHERE i.date_received = '9/9/2019';
------------------------------
question: Calculate the total amount spent on speaker gifts and list the name of the event they were spent on.
GT: SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' GROUP BY T2.event_name
Pred: SELECT 
    e.event_name, 
    SUM(b.spent) AS total_spent
FROM 
    budget b
JOIN 
    event e ON b.link_to_event = e.event_id
WHERE 
    b.category = 'Speaker Gifts'
GROUP BY 
    e.event_name;
------------------------------
question: What is the ratio of customers who pay in EUR against customers who pay in CZK?
GT: SELECT CAST(SUM(IIF(Currency = 'EUR', 1, 0)) AS FLOAT) / SUM(IIF(Currency = 'CZK', 1, 0)) AS ratio FROM customers
Pred: SELECT 
    (SELECT COUNT(*) FROM customers WHERE Currency = 'EUR') / 
    (SELECT COUNT(*) FROM customers WHERE Currency = 'CZK') AS Ratio_EUR_to_CZK;
------------------------------
question: Which customers, paying in CZK, consumed the most gas in 2011?
GT: SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Date BETWEEN 201101 AND 201112 GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1
Pred: SELECT 
    c.CustomerID,
    SUM(y.Consumption) AS TotalConsumption
FROM 
    customers c
JOIN 
    yearmonth y ON c.CustomerID = y.CustomerID
WHERE 
    c.Currency = 'CZK'
    AND y.Date BETWEEN '201101' AND '201112'
GROUP BY 
    c.CustomerID
ORDER BY 
    TotalConsumption DESC
LIMIT 10;
------------------------------
question: How many customers in KAM had a consumption of less than 30,000 for the year 2012?
GT: SELECT COUNT(*) FROM ( SELECT T2.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND SUBSTRING(T2.Date, 1, 4) = '2012' GROUP BY T2.CustomerID HAVING SUM(T2.Consumption) < 30000 ) AS t1
Pred: SELECT COUNT(*) 
FROM customers c
JOIN yearmonth y ON c.CustomerID = y.CustomerID
WHERE c.Segment = 'KAM' 
  AND y.Consumption < 30000 
  AND y.Date BETWEEN '201201' AND '201212';
------------------------------
question: Which year recorded the most gas use paid in EUR?
GT: SELECT SUBSTRING(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY SUBSTRING(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1
Pred: SELECT 
    strftime('%Y', t1.Date) AS Year,
    SUM(t1.Amount) AS TotalGasUse
FROM 
    transactions_1k t1
JOIN 
    customers t2 ON t1.CustomerID = t2.CustomerID
WHERE 
    t2.Currency = 'EUR'
GROUP BY 
    Year
ORDER BY 
    TotalGasUse DESC
LIMIT 1;
------------------------------
question: Which year recorded the most consumption of gas paid in CZK?
GT: SELECT SUBSTR(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' GROUP BY SUBSTR(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1
Pred: SELECT 
    SUBSTR(ym.Date, 1, 4) AS Year,
    SUM(ym.Consumption) AS TotalConsumption
FROM 
    yearmonth ym
JOIN 
    customers c ON ym.CustomerID = c.CustomerID
WHERE 
    c.Currency = 'CZK'
GROUP BY 
    SUBSTR(ym.Date, 1, 4)
ORDER BY 
    TotalConsumption DESC
LIMIT 1;
------------------------------
question: What was the gas consumption peak month for SME customers in 2013?
GT: SELECT SUBSTR(T2.Date, 5, 2) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME' GROUP BY SUBSTR(T2.Date, 5, 2) ORDER BY SUM(T2.Consumption) DESC LIMIT 1
Pred: SELECT 
    y.Date
FROM 
    yearmonth y
JOIN 
    customers c ON y.CustomerID = c.CustomerID
WHERE 
    c.Segment = 'SME' AND y.Date LIKE '2013%'
ORDER BY 
    y.Consumption DESC
LIMIT 1;
------------------------------
question: What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?
GT: SELECT CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Consumption = ( SELECT MIN(Consumption) FROM yearmonth ) AND T2.Date BETWEEN 201301 AND 201312
Pred: WITH CustomerConsumption AS (
    SELECT 
        c.CustomerID,
        c.Segment,
        SUM(y.Consumption) AS TotalConsumption
    FROM 
        yearmonth y
    INNER JOIN 
        customers c ON y.CustomerID = c.CustomerID
    WHERE 
        y.Date BETWEEN '201301' AND '201312'
        AND c.Currency = 'CZK'
    GROUP BY 
        c.CustomerID, c.Segment
),
RankedConsumption AS (
    SELECT 
        CustomerID,
        Segment,
        TotalConsumption,
        ROW_NUMBER() OVER (PARTITION BY Segment ORDER BY TotalConsumption ASC) AS ConsumptionRank
    FROM 
        CustomerConsumption
),
LowestConsumption AS (
    SELECT 
        CustomerID,
        Segment,
        TotalConsumption
    FROM 
        RankedConsumption
    WHERE 
        ConsumptionRank = 1
),
SegmentAverage AS (
    SELECT 
        Segment,
        AVG(TotalConsumption) AS AverageConsumption
    FROM 
        LowestConsumption
    GROUP BY 
        Segment
)
SELECT 
    (SELECT AverageConsumption FROM SegmentAverage WHERE Segment = 'SME') - 
    (SELECT AverageConsumption FROM SegmentAverage WHERE Segment = 'LAM') AS SMEvsLAM,
    (SELECT AverageConsumption FROM SegmentAverage WHERE Segment = 'LAM') - 
    (SELECT AverageConsumption FROM SegmentAverage WHERE Segment = 'KAM') AS LAMvsKAM,
    (SELECT AverageConsumption FROM SegmentAverage WHERE Segment = 'KAM') - 
    (SELECT AverageConsumption FROM SegmentAverage WHERE Segment = 'SME') AS KAMvsSME;
------------------------------
question: Which of the three segments—SME, LAM and KAM—has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?
GT: SELECT CAST((SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0))) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0)), CAST(SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) , CAST(SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID
Pred: WITH YearlyConsumption AS (
    SELECT
        c.Segment,
        SUM(CASE WHEN ym.Date LIKE '2012%' THEN ym.Consumption ELSE 0 END) AS Consumption2012,
        SUM(CASE WHEN ym.Date LIKE '2013%' THEN ym.Consumption ELSE 0 END) AS Consumption2013
    FROM yearmonth ym
    INNER JOIN customers c ON ym.CustomerID = c.CustomerID
    WHERE c.Currency = 'EUR'
    GROUP BY c.Segment
),
SegmentTrends AS (
    SELECT
        Segment,
        Consumption2012,
        Consumption2013,
        (Consumption2013 - Consumption2012) AS IncreaseOrDecrease,
        ((Consumption2013 - Consumption2012) / Consumption2013) * 100 AS PercentageIncrease
    FROM YearlyConsumption
)
SELECT
    Segment,
    IncreaseOrDecrease,
    PercentageIncrease
FROM (
    SELECT
        Segment,
        IncreaseOrDecrease,
        PercentageIncrease,
        RANK() OVER (ORDER BY PercentageIncrease DESC) AS RankIncrease,
        RANK() OVER (ORDER BY PercentageIncrease ASC) AS RankDecrease
    FROM SegmentTrends
)
WHERE RankIncrease = 1 OR RankDecrease = 1;
------------------------------
question: Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?
GT: SELECT SUM(Currency = 'CZK') - SUM(Currency = 'EUR') FROM customers WHERE Segment = 'SME'
Pred: SELECT 
    SUM(CASE WHEN c.Currency = 'CZK' THEN t.Amount ELSE 0 END) -
    SUM(CASE WHEN c.Currency = 'EUR' THEN t.Amount ELSE 0 END) AS AmountDifference
FROM 
    transactions_1k t
JOIN 
    customers c ON t.CustomerID = c.CustomerID
WHERE 
    c.Segment = 'SME';
------------------------------
question: Which LAM customer used the Euro as their currency and had the highest consumption in October 2013?
GT: SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T2.Date = '201310' AND T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1
Pred: SELECT c.CustomerID
FROM customers c
JOIN yearmonth y ON c.CustomerID = y.CustomerID
WHERE c.Segment = 'LAM'
  AND c.Currency = 'Euro'
  AND y.Date = '201310'
ORDER BY y.Consumption DESC
LIMIT 1;
------------------------------
question: Which country has more "value for money" gas stations? Please give a total number of "value for money" gas stations in each country.
GT: SELECT Country , ( SELECT COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' ) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY COUNT(GasStationID) DESC LIMIT 1
Pred: SELECT 
    Country, 
    COUNT(*) AS TotalValueForMoneyStations
FROM 
    gasstations
WHERE 
    Segment = 'Value for money'
GROUP BY 
    Country
ORDER BY 
    TotalValueForMoneyStations DESC
LIMIT 1;
------------------------------
question: What percentage of KAM customers pay in euros?
GT: SELECT CAST(SUM(Currency = 'EUR') AS FLOAT) * 100 / COUNT(CustomerID) FROM customers WHERE Segment = 'KAM'
Pred: WITH KAMCustomers AS (
    SELECT 
        c.CustomerID,
        SUM(CASE WHEN c.Currency = 'EUR' THEN t.Amount ELSE 0 END) AS TotalAmountEuro,
        SUM(t.Amount) AS TotalAmount
    FROM customers c
    INNER JOIN transactions_1k t ON c.CustomerID = t.CustomerID
    WHERE c.Segment = 'KAM'
    GROUP BY c.CustomerID
)
SELECT 
    (SUM(TotalAmountEuro) / SUM(TotalAmount)) * 100 AS PercentageKAMUsesEuro
FROM KAMCustomers;
------------------------------
question: What percentage of Slovakian gas stations are premium?
GT: SELECT CAST(SUM(IIF(Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / COUNT(GasStationID) FROM gasstations WHERE Country = 'SVK'
Pred: SELECT 
    (CAST(SUM(CASE WHEN Segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS PercentageOfPremiumGasStations
FROM 
    gasstations
WHERE 
    Country = 'Slovakia';
------------------------------
question: Which client segment consumed the least in September 2013?
GT: SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1
Pred: SELECT 
    c.Segment
FROM 
    customers c
JOIN 
    yearmonth y ON c.CustomerID = y.CustomerID
WHERE 
    y.Date = '201309'
GROUP BY 
    c.Segment
ORDER BY 
    SUM(y.Consumption) ASC
LIMIT 1;
------------------------------
question: What is the highest monthly consumption in the year 2012?
GT: SELECT SUM(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012' GROUP BY SUBSTR(Date, 5, 2) ORDER BY SUM(Consumption) DESC LIMIT 1
Pred: SELECT 
    Date,
    SUM(Consumption) AS TotalConsumption
FROM 
    yearmonth
WHERE 
    Date LIKE '2012%'
GROUP BY 
    Date
ORDER BY 
    TotalConsumption DESC
LIMIT 1;
------------------------------
question: What is the biggest monthly consumption of the customers who use euro as their currency?
GT: SELECT SUM(T2.Consumption) / 12 AS MonthlyConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY MonthlyConsumption DESC LIMIT 1
Pred: WITH MonthlyConsumption AS (
    SELECT 
        y.CustomerID,
        AVG(y.Consumption) AS AverageMonthlyConsumption
    FROM 
        yearmonth y
    INNER JOIN 
        customers c ON y.CustomerID = c.CustomerID
    WHERE 
        c.Currency = 'EUR'
    GROUP BY 
        y.CustomerID
)
SELECT 
    MAX(AverageMonthlyConsumption) AS BiggestMonthlyConsumption
FROM 
    MonthlyConsumption;
------------------------------
question: Please list the product description of the products bought in transactions in euro.
GT: SELECT DISTINCT T1.ProductID, T3.Description FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Currency = 'EUR'
Pred: SELECT 
    p.Description
FROM 
    transactions_1k t
JOIN 
    customers c ON t.CustomerID = c.CustomerID
JOIN 
    products p ON t.ProductID = p.ProductID
WHERE 
    c.Currency = 'EUR';
------------------------------
question: Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?
GT: SELECT COUNT(*) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' AND T1.Consumption > 1000.00
Pred: SELECT COUNT(DISTINCT c.CustomerID) AS TotalCustomers
FROM customers c
JOIN yearmonth y ON c.CustomerID = y.CustomerID
WHERE c.Currency = 'EUR' AND y.Consumption > 1000;
------------------------------
question: What is the average total price of the transactions taken place in gas stations in the Czech Republic?
GT: SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'
Pred: SELECT AVG(t.Amount * t.Price) AS AverageTotalPrice
FROM transactions_1k t
INNER JOIN gasstations g ON t.GasStationID = g.GasStationID
WHERE g.Country = 'CZE';
------------------------------
question: For the customers who paid in the euro, what is their average total price of the transactions?
GT: SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Currency = 'EUR'
Pred: SELECT AVG(SUM(t.Price)) AS AverageTotalPrice
FROM customers c
JOIN transactions_1k t ON c.CustomerID = t.CustomerID
WHERE c.Currency = 'EUR';
------------------------------
question: Which customer paid the most in 2012/8/25?
GT: SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY SUM(Price) DESC LIMIT 1
Pred: SELECT CustomerID, SUM(Amount) AS TotalAmount
FROM transactions_1k
WHERE Date = '2012-08-25'
GROUP BY CustomerID
ORDER BY TotalAmount DESC
LIMIT 1;
------------------------------
question: For the earliest customer, what segment did he/she have?
GT: SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID ORDER BY Date ASC LIMIT 1
Pred: SELECT Segment
FROM customers
WHERE CustomerID = (SELECT MIN(CustomerID) FROM customers);
------------------------------
question: For the customer who paid 124.05 in 2012/8/24, how much did he/she spend during the January of 2012? And what is the date and expenses exactly?
GT: SELECT T1.CustomerID, T2.Date, T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Price = 124.05 AND T2.Date = '201201'
Pred: SELECT 
    t1.Date, 
    t1.Amount, 
    SUM(t1.Amount) OVER (PARTITION BY t1.CustomerID) AS TotalAmount
FROM 
    transactions_1k t1
WHERE 
    t1.CustomerID = (
        SELECT 
            t2.CustomerID 
        FROM 
            transactions_1k t2 
        WHERE 
            t2.Date = '2012-08-24' 
            AND t2.Amount = 124.05
    )
    AND t1.Date BETWEEN '2012-01-01' AND '2012-01-31';
------------------------------
question: There's one customer spent 214582.17 in the June of 2013, which currency did he/she use?
GT: SELECT T2.Currency FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201306' AND T1.Consumption = 214582.17
Pred: SELECT c.Currency
FROM transactions_1k t
JOIN customers c ON t.CustomerID = c.CustomerID
WHERE t.Date LIKE '201306%'
GROUP BY t.CustomerID, c.Currency
HAVING SUM(t.Amount) = 214582.17;
------------------------------
question: What's the nationality of the customer who spent 548.4 in 2012/8/24?
GT: SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Price = 548.4
Pred: SELECT c.Country
FROM transactions_1k t
JOIN customers c ON t.CustomerID = c.CustomerID
WHERE t.Amount = 548.4 AND t.Date = '2012-08-24';
------------------------------
question: What is the percentage of the customers who used EUR in 2012/8/25?
GT: SELECT CAST(SUM(IIF(T2.Currency = 'EUR', 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-25'
Pred: SELECT 
    (CAST(COUNT(CASE WHEN c.Currency = 'EUR' THEN 1 END) AS REAL) / COUNT(*)) * 100 AS percentage_eur
FROM 
    customers c
JOIN 
    transactions_1k t ON c.CustomerID = t.CustomerID
WHERE 
    t.Date = '2012-08-25';
------------------------------
question: For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013?
GT: SELECT CAST(SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) - SUM(IIF(SUBSTR(Date, 1, 4) = '2013', Consumption, 0)) AS FLOAT) / SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) FROM yearmonth WHERE CustomerID = ( SELECT T1.CustomerID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' AND T1.Price = 634.8 )
Pred: WITH CustomerTransactions AS (
    SELECT CustomerID
    FROM transactions_1k
    WHERE Amount = 634.8 AND Date = '2012-08-25'
),
YearlyConsumption AS (
    SELECT 
        ym.CustomerID,
        SUM(CASE WHEN ym.Date LIKE '2012%' THEN ym.Consumption ELSE 0 END) AS consumption_2012,
        SUM(CASE WHEN ym.Date LIKE '2013%' THEN ym.Consumption ELSE 0 END) AS consumption_2013
    FROM yearmonth ym
    INNER JOIN CustomerTransactions ct ON ym.CustomerID = ct.CustomerID
    GROUP BY ym.CustomerID
)
SELECT 
    (yc.consumption_2012 - yc.consumption_2013) / yc.consumption_2012 AS consumption_decrease_rate
FROM YearlyConsumption yc;
------------------------------
question: Which gas station has the highest amount of revenue?
GT: SELECT GasStationID FROM transactions_1k GROUP BY GasStationID ORDER BY SUM(Price) DESC LIMIT 1
Pred: WITH StationRevenue AS (
    SELECT 
        t.GasStationID,
        SUM(t.Amount) AS TotalRevenue
    FROM 
        transactions_1k t
    GROUP BY 
        t.GasStationID
)
SELECT 
    sr.GasStationID,
    sr.TotalRevenue
FROM 
    StationRevenue sr
ORDER BY 
    sr.TotalRevenue DESC
LIMIT 1;
------------------------------
question: What is the percentage of "premium" against the overall segment in Country = "SVK"?
GT: SELECT CAST(SUM(IIF(Country = 'SVK' AND Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations
Pred: SELECT 
    CASE 
        WHEN Segment = 'Premium' THEN 'Premium'
        ELSE 'Other'
    END AS Segment,
    (CAST(SUM(CASE WHEN Segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS Percentage
FROM 
    gasstations
WHERE 
    Country = 'SVK'
GROUP BY 
    Segment;
------------------------------
question: What is the amount spent by customer "38508" at the gas stations? How much had the customer spent in January 2012?
GT: SELECT SUM(T1.Price) , SUM(IIF(T3.Date = '201201', T1.Price, 0)) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.CustomerID = '38508'
Pred: SELECT SUM(Amount) AS TotalSpent
FROM transactions_1k
WHERE CustomerID = 38508 AND Date = '201201';
------------------------------
question: Which are the top five best selling products? Please state the full name of them.
GT: SELECT T2.Description FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Amount DESC LIMIT 5
Pred: WITH ProductSales AS (
    SELECT 
        p.ProductID,
        p.Description,
        SUM(t.Amount) AS total_sales
    FROM 
        products p
    JOIN 
        transactions_1k t ON p.ProductID = t.ProductID
    GROUP BY 
        p.ProductID, p.Description
),
RankedProducts AS (
    SELECT 
        ps.ProductID,
        ps.Description,
        ps.total_sales,
        RANK() OVER (ORDER BY ps.total_sales DESC) AS sales_rank
    FROM 
        ProductSales ps
)
SELECT 
    rp.Description
FROM 
    RankedProducts rp
WHERE 
    rp.sales_rank <= 5;
------------------------------
question: Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used?
GT: SELECT T2.CustomerID, SUM(T2.Price / T2.Amount), T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = ( SELECT CustomerID FROM yearmonth ORDER BY Consumption DESC LIMIT 1 ) GROUP BY T2.CustomerID, T1.Currency
Pred: WITH CustomerSpending AS (
    SELECT 
        t.CustomerID,
        SUM(t.Amount) AS total_amount,
        SUM(t.Price) AS total_price
    FROM transactions_1k t
    GROUP BY t.CustomerID
),
TopSpendingCustomer AS (
    SELECT 
        CustomerID,
        total_amount,
        total_price,
        ROW_NUMBER() OVER (ORDER BY total_amount DESC) AS rank
    FROM CustomerSpending
)
SELECT 
    tsc.CustomerID,
    tsc.total_price / tsc.total_amount AS average_price_per_item,
    c.Currency
FROM TopSpendingCustomer tsc
JOIN customers c ON tsc.CustomerID = c.CustomerID
WHERE tsc.rank = 1;
------------------------------
question: For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012.
GT: SELECT T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Price / T1.Amount > 29.00 AND T1.ProductID = 5 AND T2.Date = '201208'
Pred: WITH FilteredTransactions AS (
    SELECT 
        t.CustomerID,
        t.Price / t.Amount AS PricePerUnit
    FROM 
        transactions_1k t
    WHERE 
        t.ProductID = 5 AND
        t.Price / t.Amount > 29.00
)
SELECT 
    ft.CustomerID,
    CASE 
        WHEN ym.Consumption > 100 THEN 'High'
        WHEN ym.Consumption BETWEEN 50 AND 100 THEN 'Medium'
        ELSE 'Low'
    END AS ConsumptionStatus
FROM 
    FilteredTransactions ft
JOIN 
    yearmonth ym ON ft.CustomerID = ym.CustomerID
WHERE 
    ym.Date = '201208';
------------------------------
EX Accuracy (greedy search): 0.5286831812255541
Done: 0 0
Done: 11 0
Done: 21 0
Done: 20 0
Done: 10 0
Done: 12 0
Done: 7 1
Done: 24 0
Done: 22 0
Done: 8 1
Done: 2 1
Done: 18 1
Done: 9 1
Done: 1 0
Done: 4 1
Done: 19 1
Done: 16 0
Done: 17 0
Done: 31 0
Done: 30 0
Done: 5 1
Done: 34 0
Done: 25 0
Done: 15 0
Done: 14 1
Done: 36 0
Done: 26 0
Done: 37 1
Done: 6 0
Done: 3 1
Done: 13 1
Done: 40 0
Done: 23 0
Done: 35 1
Done: 44 1
Done: 42 0
Done: 33 0
Done: 51 0
Done: 29 1
Done: 27 0
Done: 54 0
Done: 43 0
Done: 38 1
Done: 41 0
Done: 47 1
Done: 52 1
Done: 32 1
Done: 45 1
Done: 39 1
Done: 48 1
Done: 50 1
Done: 46 0
Done: 60 1
Done: 59 1
Done: 61 1
Done: 55 1
Done: 53 0
Done: 58 0
Done: 56 1
Done: 74 0
Done: 76 0
Done: 80 0
Done: 81 0
Done: 57 1
Done: 70 0
Done: 68 0
Done: 64 1
Done: 67 1
Done: 65 0
Done: 69 1
Done: 71 0
Done: 62 1
Done: 66 0
Done: 49 0
Done: 86 0
Done: 75 0
Done: 28 0
Done: 83 0
Done: 73 0
Done: 79 1
Done: 63 0
Done: 78 0
Done: 77 0
Done: 88 1
Done: 87 0
Done: 85 0
Done: 72 1
Done: 91 0
Done: 82 0
Done: 103 1
Done: 92 1
Done: 93 0
Done: 105 1
Done: 99 1
Done: 90 0
Done: 98 0
Done: 94 0
Done: 89 1
Done: 107 0
Done: 97 1
Done: 96 1
Done: 100 1
Done: 117 1
Done: 112 0
Done: 109 0
Done: 118 0
Done: 122 1
Done: 111 1
Done: 115 1
Done: 125 0
Done: 113 1
Done: 123 1
Done: 124 0
Done: 119 1
Done: 121 1
Done: 114 0
Done: 130 0
Done: 133 0
Done: 136 0
Done: 131 0
Done: 137 0
Done: 134 1
Done: 126 1
Done: 132 0
Done: 127 1
Done: 142 0
Done: 139 1
Done: 138 0
Done: 145 0
Done: 140 1
Done: 147 0
Done: 143 1
Done: 149 0
Done: 146 0
Done: 153 0
Done: 152 0
Done: 148 1
Done: 155 1
Done: 157 1
Done: 154 1
Done: 84 0
Done: 120 1
Done: 158 0
Done: 159 0
Done: 162 1
Done: 161 1
Done: 164 0
Done: 160 1
Done: 156 1
Done: 163 0
Done: 167 0
Done: 166 1
Done: 95 0
Done: 168 0
Done: 171 0
Done: 174 1
Done: 172 0
Done: 169 0
Done: 176 0
Done: 175 1
Done: 177 0
Done: 178 1
Done: 180 0
Done: 181 1
Done: 182 0
Done: 183 0
Done: 184 1
Done: 185 0
Done: 186 0
Done: 188 0
Done: 187 1
Done: 190 1
Done: 189 0
Done: 191 1
Done: 193 0
Done: 194 0
Done: 195 1
Done: 196 0
Done: 128 0
Done: 198 0
Done: 199 0
Done: 200 1
Done: 201 0
Done: 202 1
Done: 203 1
Done: 204 1
Done: 205 0
Done: 197 0
Done: 206 1
Done: 208 1
Done: 209 1
Done: 207 0
Done: 211 0
Done: 212 0
Done: 213 1
Done: 214 0
Done: 210 0
Done: 216 1
Done: 215 0
Done: 217 0
Done: 218 0
Done: 220 0
Done: 219 0
Done: 222 1
Done: 221 0
Done: 223 0
Done: 224 1
Done: 226 1
Done: 225 0
Done: 227 1
Done: 228 1
Done: 229 1
Done: 230 1
Done: 231 0
Done: 232 0
Done: 234 0
Done: 235 1
Done: 233 0
Done: 237 0
Done: 236 1
Done: 238 0
Done: 240 1
Done: 239 0
Done: 241 1
Done: 242 1
Done: 244 0
Done: 243 0
Done: 245 0
Done: 246 0
Done: 247 0
Done: 248 0
Done: 249 0
Done: 250 0
Done: 252 0
Done: 253 0
Done: 251 0
Done: 255 1
Done: 256 1
Done: 257 1
Done: 258 0
Done: 173 0
Done: 260 1
Done: 259 1
Done: 261 1
Done: 192 0
Done: 262 1
Done: 265 1
Done: 264 0
Done: 266 1
Done: 268 1
Done: 267 0
Done: 270 1
Done: 271 0
Done: 272 1
Done: 273 0
Done: 135 0
Done: 150 0
Done: 274 1
Done: 269 0
Done: 275 0
Done: 279 1
Done: 277 1
Done: 278 0
Done: 280 1
Done: 283 1
Done: 282 0
Done: 281 0
Done: 263 0
Done: 285 0
Done: 287 0
Done: 288 0
Done: 286 0
Done: 104 1
Done: 289 0
Done: 291 1
Done: 290 1
Done: 165 0
Done: 129 0
Done: 110 0
Done: 276 1
Done: 296 0
Done: 294 0
Done: 293 1
Done: 292 0
Done: 299 0
Done: 301 1
Done: 300 0
Done: 303 0
Done: 295 1
Done: 302 0
Done: 298 0
Done: 297 1
Done: 307 1
Done: 310 0
Done: 312 1
Done: 313 1
Done: 309 0
Done: 308 0
Done: 304 0
Done: 314 1
Done: 315 1
Done: 306 0
Done: 321 0
Done: 320 1
Done: 318 1
Done: 323 1
Done: 322 1
Done: 316 1
Done: 319 1
Done: 317 0
Done: 325 1
Done: 326 0
Done: 328 1
Done: 331 1
Done: 327 1
Done: 329 1
Done: 334 1
Done: 333 1
Done: 330 0
Done: 332 0
Done: 336 0
Done: 335 0
Done: 337 1
Done: 339 1
Done: 338 0
Done: 284 0
Done: 305 0
Done: 324 0
Done: 311 0
Done: 144 0
Done: 151 1
Done: 170 1
Done: 102 0
Done: 141 0
Done: 353 1
Done: 179 0
Done: 101 0
Done: 108 0
Done: 116 0
Done: 106 1
Done: 344 0
Done: 347 0
Done: 348 1
Done: 341 0
Done: 354 0
Done: 343 0
Done: 340 0
Done: 345 1
Done: 346 1
Done: 363 0
Done: 361 0
Done: 355 1
Done: 358 1
Done: 357 0
Done: 342 0
Done: 356 1
Done: 359 0
Done: 360 0
Done: 349 0
Done: 362 1
Done: 352 0
Done: 350 0
Done: 351 1
Done: 368 1
Done: 364 1
Done: 366 1
Done: 383 1
Done: 372 1
Done: 373 1
Done: 374 0
Done: 377 0
Done: 376 0
Done: 375 1
Done: 387 0
Done: 378 1
Done: 367 1
Done: 365 1
Done: 379 1
Done: 388 0
Done: 380 1
Done: 389 0
Done: 385 1
Done: 392 0
Done: 370 1
Done: 369 1
Done: 382 1
Done: 381 1
Done: 405 0
Done: 404 1
Done: 390 1
Done: 396 1
Done: 394 1
Done: 395 1
Done: 393 0
Done: 371 1
Done: 414 1
Done: 386 0
Done: 413 0
Done: 417 1
Done: 400 1
Done: 408 0
Done: 410 1
Done: 398 0
Done: 401 1
Done: 397 1
Done: 402 0
Done: 415 0
Done: 426 0
Done: 427 1
Done: 428 0
Done: 429 0
Done: 411 0
Done: 391 1
Done: 409 1
Done: 432 0
Done: 434 1
Done: 419 1
Done: 420 1
Done: 418 1
Done: 399 0
Done: 439 1
Done: 438 0
Done: 441 0
Done: 442 0
Done: 443 0
Done: 407 0
Done: 430 0
Done: 433 0
Done: 431 0
Done: 423 0
Done: 424 0
Done: 421 1
Done: 425 0
Done: 435 0
Done: 447 0
Done: 406 0
Done: 384 1
Done: 412 0
Done: 422 1
Done: 416 0
Done: 403 0
Done: 436 0
Done: 437 0
Done: 454 0
Done: 451 1
Done: 459 1
Done: 446 0
Done: 450 1
Done: 455 1
Done: 453 1
Done: 452 1
Done: 467 1
Done: 468 1
Done: 471 1
Done: 472 1
Done: 474 1
Done: 440 0
Done: 460 1
Done: 456 1
Done: 457 1
Done: 458 0
Done: 461 1
Done: 462 1
Done: 444 0
Done: 469 0
Done: 463 0
Done: 473 0
Done: 466 1
Done: 470 1
Done: 476 1
Done: 475 1
Done: 464 1
Done: 490 1
Done: 489 1
Done: 491 1
Done: 488 1
Done: 492 1
Done: 493 1
Done: 496 1
Done: 497 1
Done: 498 0
Done: 499 0
Done: 445 0
Done: 449 0
Done: 448 0
Done: 502 1
Done: 505 1
Done: 506 0
Done: 477 1
Done: 478 1
Done: 479 1
Done: 509 1
Done: 465 0
Done: 494 0
Done: 485 1
Done: 513 1
Done: 495 1
Done: 486 1
Done: 508 1
Done: 510 1
Done: 501 1
Done: 503 1
Done: 504 1
Done: 500 0
Done: 511 0
Done: 519 0
Done: 523 0
Done: 480 1
Done: 483 0
Done: 482 0
Done: 481 1
Done: 507 0
Done: 529 0
Done: 531 1
Done: 532 1
Done: 533 0
Done: 535 1
Done: 534 1
Done: 536 0
Done: 525 0
Done: 522 1
Done: 537 1
Done: 538 1
Done: 530 0
Done: 512 1
Done: 487 1
Done: 527 1
Done: 524 1
Done: 526 1
Done: 539 0
Done: 540 0
Done: 550 1
Done: 549 1
Done: 515 0
Done: 521 1
Done: 553 1
Done: 542 1
Done: 556 0
Done: 552 1
Done: 551 1
Done: 514 0
Done: 528 1
Done: 554 1
Done: 558 1
Done: 517 0
Done: 544 0
Done: 547 1
Done: 548 1
Done: 546 1
Done: 568 1
Done: 566 1
Done: 559 0
Done: 545 0
Done: 541 0
Done: 560 1
Done: 484 0
Done: 543 1
Done: 569 1
Done: 574 1
Done: 516 1
Done: 557 1
Done: 520 0
Done: 570 1
Done: 580 1
Done: 555 1
Done: 572 1
Done: 571 0
Done: 575 1
Done: 567 1
Done: 578 1
Done: 581 0
Done: 254 0
Done: 586 0
Done: 589 1
Done: 590 1
Done: 583 1
Done: 591 1
Done: 582 0
Done: 592 1
Done: 585 1
Done: 599 0
Done: 600 0
Done: 601 1
Done: 593 0
Done: 603 0
Done: 598 0
Done: 597 1
Done: 563 1
Done: 565 0
Done: 594 0
Done: 573 1
Done: 561 1
Done: 576 0
Done: 606 1
Done: 605 0
Done: 577 0
Done: 564 1
Done: 562 1
Done: 604 1
Done: 588 1
Done: 602 0
Done: 616 0
Done: 615 1
Done: 614 1
Done: 611 1
Done: 618 1
Done: 610 0
Done: 612 1
Done: 613 1
Done: 620 1
Done: 619 1
Done: 609 1
Done: 624 1
Done: 625 1
Done: 627 1
Done: 626 1
Done: 628 0
Done: 623 1
Done: 584 0
Done: 629 1
Done: 579 1
Done: 587 0
Done: 621 1
Done: 642 0
Done: 622 1
Done: 643 1
Done: 641 1
Done: 638 1
Done: 595 0
Done: 608 0
Done: 607 1
Done: 617 1
Done: 647 1
Done: 632 0
Done: 644 1
Done: 633 0
Done: 637 0
Done: 639 0
Done: 631 0
Done: 630 0
Done: 635 0
Done: 634 0
Done: 652 0
Done: 659 1
Done: 654 1
Done: 657 1
Done: 661 0
Done: 645 1
Done: 650 0
Done: 664 0
Done: 662 0
Done: 666 1
Done: 640 0
Done: 665 1
Done: 663 1
Done: 669 1
Done: 673 0
Done: 655 0
Done: 651 1
Done: 675 1
Done: 674 1
Done: 676 1
Done: 681 0
Done: 677 0
Done: 671 1
Done: 682 0
Done: 683 0
Done: 648 1
Done: 658 1
Done: 656 0
Done: 684 1
Done: 668 1
Done: 667 0
Done: 653 0
Done: 672 0
Done: 670 1
Done: 689 0
Done: 660 1
Done: 679 0
Done: 691 1
Done: 678 1
Done: 680 1
Done: 636 0
Done: 700 1
Done: 699 1
Done: 690 1
Done: 695 1
Done: 696 0
Done: 688 1
Done: 686 0
Done: 692 0
Done: 697 0
Done: 704 1
Done: 702 1
Done: 649 0
Done: 703 0
Done: 713 0
Done: 705 1
Done: 717 1
Done: 718 1
Done: 719 1
Done: 720 0
Done: 721 1
Done: 722 1
Done: 716 1
Done: 724 1
Done: 698 0
Done: 723 1
Done: 725 1
Done: 727 1
Done: 726 0
Done: 728 0
Done: 729 1
Done: 731 1
Done: 733 1
Done: 734 1
Done: 732 1
Done: 735 1
Done: 737 1
Done: 736 0
Done: 739 1
Done: 740 1
Done: 741 1
Done: 742 1
Done: 743 0
Done: 744 1
Done: 745 0
Done: 746 1
Done: 747 1
Done: 748 1
Done: 749 1
Done: 750 1
Done: 751 1
Done: 752 1
Done: 753 1
Done: 715 1
Done: 754 1
Done: 756 0
Done: 755 1
Done: 757 1
Done: 758 0
Done: 760 1
Done: 759 1
Done: 761 1
Done: 687 0
Done: 763 1
Done: 764 1
Done: 765 0
Done: 762 1
Done: 767 0
Done: 766 0
Done: 768 1
Done: 770 1
Done: 772 0
Done: 771 1
Done: 693 0
Done: 769 0
Done: 773 1
Done: 774 1
Done: 776 1
Done: 777 1
Done: 775 1
Done: 781 1
Done: 780 1
Done: 779 1
Done: 778 1
Done: 782 1
Done: 784 1
Done: 783 1
Done: 785 1
Done: 787 1
Done: 788 0
Done: 786 1
Done: 789 1
Done: 790 1
Done: 793 1
Done: 791 0
Done: 792 1
Done: 685 0
Done: 795 1
Done: 796 1
Done: 797 1
Done: 799 1
Done: 798 1
Done: 800 1
Done: 801 1
Done: 803 0
Done: 802 0
Done: 804 1
Done: 794 0
Done: 806 1
Done: 808 1
Done: 809 1
Done: 805 0
Done: 807 1
Done: 694 0
Done: 812 0
Done: 811 1
Done: 813 1
Done: 810 0
Done: 814 1
Done: 815 1
Done: 816 1
Done: 817 0
Done: 818 0
Done: 819 0
Done: 822 1
Done: 820 1
Done: 823 1
Done: 730 1
Done: 821 1
Done: 826 1
Done: 827 1
Done: 825 1
Done: 828 1
Done: 831 1
Done: 824 1
Done: 829 1
Done: 830 1
Done: 832 0
Done: 833 1
Done: 834 1
Done: 836 1
Done: 835 0
Done: 838 1
Done: 837 1
Done: 841 1
Done: 839 1
Done: 842 1
Done: 840 1
Done: 844 1
Done: 843 1
Done: 845 1
Done: 851 0
Done: 714 1
Done: 850 1
Done: 852 0
Done: 848 1
Done: 849 0
Done: 858 0
Done: 711 0
Done: 708 0
Done: 854 1
Done: 847 1
Done: 846 0
Done: 857 1
Done: 855 0
Done: 856 1
Done: 853 1
Done: 863 1
Done: 707 1
Done: 738 1
Done: 866 0
Done: 868 1
Done: 859 1
Done: 861 0
Done: 860 0
Done: 876 0
Done: 875 1
Done: 869 1
Done: 872 0
Done: 870 1
Done: 871 0
Done: 882 0
Done: 878 0
Done: 884 0
Done: 883 0
Done: 885 1
Done: 886 1
Done: 867 1
Done: 865 0
Done: 864 1
Done: 862 1
Done: 873 1
Done: 877 0
Done: 874 1
Done: 889 0
Done: 890 0
Done: 887 0
Done: 888 0
Done: 881 1
Done: 709 0
Done: 712 1
Done: 710 0
Done: 898 0
Done: 901 1
Done: 900 1
Done: 899 0
Done: 880 0
Done: 879 1
Done: 909 0
Done: 907 0
Done: 910 1
Done: 911 1
Done: 913 0
Done: 912 1
Done: 914 1
Done: 915 0
Done: 917 1
Done: 916 0
Done: 918 1
Done: 919 1
Done: 706 1
Done: 922 0
Done: 921 0
Done: 920 1
Done: 896 0
Done: 902 0
Done: 893 0
Done: 891 0
Done: 925 1
Done: 924 0
Done: 923 1
Done: 892 0
Done: 906 0
Done: 905 0
Done: 897 0
Done: 928 0
Done: 926 1
Done: 931 1
Done: 927 1
Done: 930 0
Done: 932 1
Done: 929 1
Done: 937 0
Done: 934 1
Done: 935 1
Done: 943 0
Done: 939 1
Done: 940 1
Done: 933 1
Done: 944 0
Done: 936 0
Done: 946 1
Done: 945 0
Done: 947 1
Done: 942 0
Done: 955 0
Done: 941 1
Done: 950 1
Done: 951 0
Done: 959 0
Done: 948 1
Done: 949 0
Done: 938 1
Done: 964 0
Done: 952 0
Done: 960 1
Done: 956 0
Done: 961 1
Done: 954 0
Done: 953 1
Done: 965 1
Done: 958 0
Done: 962 0
Done: 957 1
Done: 968 1
Done: 967 0
Done: 971 1
Done: 969 1
Done: 978 0
Done: 980 1
Done: 981 0
Done: 977 1
Done: 972 1
Done: 982 0
Done: 974 1
Done: 979 0
Done: 983 0
Done: 966 0
Done: 984 0
Done: 988 0
Done: 991 1
Done: 987 1
Done: 993 0
Done: 992 0
Done: 989 0
Done: 990 1
Done: 996 0
Done: 997 1
Done: 994 0
Done: 1000 0
Done: 998 0
Done: 999 1
Done: 1001 0
Done: 995 0
Done: 1005 1
Done: 1003 1
Done: 1004 0
Done: 1007 1
Done: 1008 1
Done: 1009 0
Done: 908 0
Done: 1012 0
Done: 1002 0
Done: 1013 0
Done: 904 0
Done: 895 1
Done: 975 0
Done: 1018 1
Done: 976 0
Done: 1017 0
Done: 985 0
Done: 894 0
Done: 1010 0
Done: 986 0
Done: 1019 1
Done: 1021 0
Done: 970 0
Done: 963 1
Done: 1029 0
Done: 903 0
Done: 1024 0
Done: 1022 0
Done: 1033 1
Done: 1023 0
Done: 1020 1
Done: 1035 1
Done: 1037 0
Done: 1036 1
Done: 1027 0
Done: 1031 0
Done: 1041 0
Done: 1042 0
Done: 1043 1
Done: 1044 1
Done: 1039 1
Done: 1046 1
Done: 1034 0
Done: 1047 1
Done: 1006 0
Done: 1045 1
Done: 1011 0
Done: 1050 1
Done: 1048 1
Done: 1053 1
Done: 1040 0
Done: 1056 1
Done: 1051 1
Done: 1052 0
Done: 1059 1
Done: 1060 1
Done: 1061 0
Done: 1054 1
Done: 1062 1
Done: 1028 0
Done: 1030 1
Done: 1026 0
Done: 1025 0
Done: 1067 1
Done: 1066 1
Done: 1065 1
Done: 1055 1
Done: 1070 1
Done: 1071 1
Done: 1016 0
Done: 1069 1
Done: 1032 0
Done: 1038 1
Done: 1075 0
Done: 1077 1
Done: 1063 1
Done: 1081 1
Done: 1082 1
Done: 1078 0
Done: 1079 1
Done: 1064 0
Done: 1072 1
Done: 1058 0
Done: 1080 1
Done: 1076 1
Done: 1084 1
Done: 1083 1
Done: 1014 0
Done: 1087 0
Done: 1088 1
Done: 1095 1
Done: 1085 0
Done: 1049 1
Done: 1086 1
Done: 1098 1
Done: 1090 0
Done: 1096 1
Done: 1097 1
Done: 1093 0
Done: 1099 1
Done: 1100 1
Done: 1057 1
Done: 1073 1
Done: 1074 1
Done: 1108 0
Done: 1094 0
Done: 1111 0
Done: 1102 1
Done: 1112 0
Done: 1113 0
Done: 1104 1
Done: 1103 1
Done: 1117 1
Done: 1106 1
Done: 1116 1
Done: 1118 0
Done: 1115 0
Done: 646 0
Done: 1114 0
Done: 1068 0
Done: 1122 0
Done: 1125 1
Done: 1124 1
Done: 1089 1
Done: 1091 1
Done: 1101 0
Done: 1109 0
Done: 1110 0
Done: 1123 1
Done: 1129 1
Done: 1130 1
Done: 1135 0
Done: 1133 1
Done: 1132 1
Done: 1105 0
Done: 1138 1
Done: 1141 1
Done: 1134 0
Done: 1137 1
Done: 1136 0
Done: 1131 0
Done: 1140 1
Done: 1144 0
Done: 1142 0
Done: 1092 0
Done: 1149 0
Done: 1150 1
Done: 1152 0
Done: 1128 0
Done: 1151 1
Done: 1153 1
Done: 1154 1
Done: 1156 1
Done: 1157 0
Done: 1158 1
Done: 1159 1
Done: 1155 1
Done: 1161 0
Done: 1162 1
Done: 1163 0
Done: 1164 1
Done: 1166 0
Done: 1167 0
Done: 1165 1
Done: 1168 0
Done: 1170 0
Done: 1127 0
Done: 1171 0
Done: 1160 1
Done: 1173 0
Done: 1172 0
Done: 1174 1
Done: 1177 0
Done: 1147 1
Done: 1169 1
Done: 1176 1
Done: 1178 0
Done: 1182 0
Done: 1179 0
Done: 1184 1
Done: 1183 1
Done: 1186 0
Done: 1185 0
Done: 1188 0
Done: 1181 1
Done: 1180 1
Done: 1189 0
Done: 1191 0
Done: 1192 0
Done: 1193 1
Done: 1194 1
Done: 1175 0
Done: 1196 1
Done: 1197 0
Done: 1198 1
Done: 1187 1
Done: 1195 1
Done: 1200 0
Done: 1190 1
Done: 1201 1
Done: 1202 0
Done: 1204 0
Done: 1205 0
Done: 1206 1
Done: 1208 1
Done: 1209 1
Done: 1203 0
Done: 1199 0
Done: 1210 1
Done: 1207 0
Done: 1213 0
Done: 1211 0
Done: 1214 1
Done: 1216 0
Done: 1215 0
Done: 1212 1
Done: 1220 1
Done: 1217 0
Done: 1222 1
Done: 1221 1
Done: 1224 0
Done: 1218 0
Done: 1227 1
Done: 1226 0
Done: 1223 0
Done: 1225 0
Done: 1230 1
Done: 1228 1
Done: 1219 0
Done: 1231 1
Done: 1229 1
Done: 1232 1
Done: 1233 0
Done: 1237 0
Done: 1238 0
Done: 1148 0
Done: 1240 1
Done: 1241 0
Done: 1235 0
Done: 1239 1
Done: 1245 0
Done: 1246 1
Done: 1236 1
Done: 1234 0
Done: 1244 1
Done: 1242 0
Done: 1248 0
Done: 1249 0
Done: 1243 0
Done: 1247 0
Done: 1250 0
Done: 1252 0
Done: 1255 0
Done: 1256 0
Done: 1257 1
Done: 1258 0
Done: 1254 0
Done: 1253 0
Done: 1126 0
Done: 1251 0
Done: 1261 0
Done: 1262 0
Done: 1143 1
Done: 1139 1
Done: 1145 1
Done: 1268 0
Done: 1269 0
Done: 1270 0
Done: 1272 0
Done: 1267 0
Done: 1264 0
Done: 1263 1
Done: 1274 0
Done: 1121 0
Done: 1277 1
Done: 1275 0
Done: 1120 0
Done: 1266 1
Done: 1259 1
Done: 1260 1
Done: 1278 1
Done: 1119 0
Done: 1285 0
Done: 1276 0
Done: 1273 0
Done: 1290 0
Done: 1265 0
Done: 1283 1
Done: 1280 1
Done: 1289 0
Done: 1292 0
Done: 1294 0
Done: 1295 0
Done: 1271 0
Done: 1281 0
Done: 1279 0
Done: 1286 1
Done: 1288 1
Done: 1287 1
Done: 1284 0
Done: 1299 1
Done: 1300 0
Done: 1297 1
Done: 1298 0
Done: 1293 1
Done: 1291 1
Done: 1302 1
Done: 1296 1
Done: 1311 1
Done: 1304 1
Done: 1309 0
Done: 1312 1
Done: 1313 0
Done: 1315 0
Done: 1314 0
Done: 1301 1
Done: 1308 0
Done: 1306 0
Done: 1310 1
Done: 1303 1
Done: 1316 1
Done: 1305 1
Done: 1317 0
Done: 1318 0
Done: 1319 1
Done: 1307 0
Done: 1325 1
Done: 1323 1
Done: 1320 1
Done: 1324 1
Done: 1321 0
Done: 1322 0
Done: 1282 0
Done: 1329 1
Done: 1330 1
Done: 1328 1
Done: 1326 1
Done: 1327 0
Done: 1331 1
Done: 1333 1
Done: 1332 0
Done: 1335 1
Done: 1336 0
Done: 1337 1
Done: 1338 0
Done: 1341 1
Done: 1340 0
Done: 1334 0
Done: 1339 1
Done: 1345 1
Done: 1343 1
Done: 1342 0
Done: 1344 1
Done: 1346 1
Done: 1347 1
Done: 1348 1
Done: 1351 1
Done: 1352 1
Done: 1350 0
Done: 1349 1
Done: 1353 1
Done: 1355 1
Done: 1358 0
Done: 1357 1
Done: 1354 1
Done: 1356 1
Done: 1359 0
Done: 1361 1
Done: 1360 0
Done: 1363 1
Done: 1367 0
Done: 1364 1
Done: 1369 1
Done: 1365 0
Done: 1368 1
Done: 1371 1
Done: 1372 1
Done: 1370 0
Done: 1366 0
Done: 1375 1
Done: 1374 1
Done: 1377 1
Done: 1378 1
Done: 1373 1
Done: 1379 1
Done: 1376 1
Done: 1384 0
Done: 1385 0
Done: 1380 1
Done: 1382 1
Done: 1386 0
Done: 1381 0
Done: 1389 0
Done: 1387 0
Done: 1383 0
Done: 1390 1
Done: 1392 1
Done: 1388 0
Done: 1393 1
Done: 1395 1
Done: 1394 1
Done: 1391 0
Done: 1396 0
Done: 1397 1
Done: 1398 1
Done: 1402 1
Done: 1400 1
Done: 1401 1
Done: 1399 0
Done: 1405 1
Done: 1407 0
Done: 1409 1
Done: 1406 0
Done: 1408 1
Done: 1404 0
Done: 1403 1
Done: 1411 1
Done: 1410 0
Done: 1413 1
Done: 1414 1
Done: 1416 1
Done: 1412 1
Done: 1417 1
Done: 1419 1
Done: 1418 1
Done: 1415 1
Done: 1421 0
Done: 1420 1
Done: 1423 1
Done: 1424 1
Done: 1422 1
Done: 1426 0
Done: 1425 1
Done: 1430 1
Done: 1427 0
Done: 1428 1
Done: 1432 1
Done: 1429 1
Done: 1431 1
Done: 1435 1
Done: 1436 0
Done: 1438 0
Done: 1439 1
Done: 1362 1
Done: 1146 0
Done: 1441 0
Done: 1440 1
Done: 1442 1
Done: 1444 0
Done: 1437 0
Done: 1445 0
Done: 1448 0
Done: 1447 1
Done: 1443 1
Done: 1451 0
Done: 1449 1
Done: 1455 0
Done: 1453 0
Done: 1450 0
Done: 1454 0
Done: 1459 1
Done: 1458 0
Done: 1452 0
Done: 1457 1
Done: 1456 0
Done: 1460 1
Done: 1462 1
Done: 1461 1
Done: 1463 1
Done: 1466 1
Done: 1469 1
Done: 1464 0
Done: 1465 1
Done: 1467 0
Done: 1468 1
Done: 1434 1
Done: 1446 1
Done: 1474 0
Done: 1433 0
Done: 1470 1
Done: 1484 1
Done: 1471 0
Done: 1486 0
Done: 1485 1
Done: 1483 1
Done: 1487 0
Done: 1491 0
Done: 1492 0
Done: 1489 1
Done: 1494 0
Done: 1477 0
Done: 1493 1
Done: 1490 1
Done: 1495 1
Done: 1496 0
Done: 1500 1
Done: 1501 1
Done: 1502 1
Done: 1503 0
Done: 1504 1
Done: 1476 1
Done: 1473 1
Done: 1507 1
Done: 1506 1
Done: 1508 1
Done: 1509 1
Done: 1511 0
Done: 1510 0
Done: 1512 0
Done: 1514 1
Done: 1513 1
Done: 1515 1
Done: 1516 1
Done: 1518 1
Done: 1482 0
Done: 1519 1
Done: 1520 0
Done: 1517 0
Done: 1523 1
Done: 1521 1
Done: 1524 0
Done: 1525 0
Done: 1527 0
Done: 1528 0
Done: 1497 1
Done: 1530 0
Done: 1522 0
Done: 1526 0
Done: 1529 0
Done: 1533 0
Done: 1532 1
Done: 1531 0
Done: 1505 0
Done: 1480 0
Done: 1107 0
Done: 1478 1
Done: 1472 1
Done: 1488 1
Done: 1499 0
Done: 1479 0
Done: 596 0
Done: 1475 0
Done: 1498 0
Done: 1481 0
Done: 518 0
Done: 701 0
Done: 973 0
Done: 1015 0
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
Successfully executed
question: What is the highest eligible free rate for K-12 students in the schools in Alameda County?
GT: SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Alameda' ORDER BY (CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1
Pred: SELECT 
    MAX((Free_Meal_Count_K_12 / Enrollment_K_12) AS Eligible_Free_Rate
FROM 
    frpm
WHERE 
    County_Name = 'Alameda';
------------------------------
question: Please list the lowest three eligible free rates for students aged 5-17 in continuation schools.
GT: SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` FROM frpm WHERE `Educational Option Type` = 'Continuation School' AND `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` IS NOT NULL ORDER BY `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` ASC LIMIT 3
Pred: SELECT 
    f.CDSCode,
    f."County Name",
    f."District Name",
    f."School Name",
    (f."Free Meal Count (Ages 5-17)" / f."Enrollment (Ages 5-17)") AS EligibleFreeRate
FROM 
    frpm f
INNER JOIN 
    schools s ON f.CDSCode = s.CDSCode
WHERE 
    s.EdOpsName = 'Continuation School'
ORDER BY 
    EligibleFreeRate ASC
LIMIT 3;
------------------------------
question: Among the schools with the SAT test takers of over 500, please list the schools that are magnet schools or offer a magnet program.
GT: SELECT T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Magnet = 1 AND T1.NumTstTakr > 500
Pred: SELECT s.School
FROM schools s
INNER JOIN satscores ss ON s.CDSCode = ss.cds
WHERE (s.Magnet = 1 OR s.Magnet = 0) AND ss.NumTstTakr > 500;
------------------------------
question: For the school with the highest average score in Reading in the SAT test, what is its FRPM count for students aged 5-17?
GT: SELECT T2.`FRPM Count (Ages 5-17)` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrRead DESC LIMIT 1
Pred: SELECT f."FRPM Count (Ages 5-17)"
FROM frpm f
JOIN satscores s ON f."CDSCode" = s.cds
WHERE s."AvgScrRead" = (
    SELECT MAX("AvgScrRead")
    FROM satscores
);
------------------------------
question: Please list the codes of the schools with a total enrollment of over 500.
GT: SELECT T2.CDSCode FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` + T2.`Enrollment (Ages 5-17)` > 500
Pred: SELECT 
    CDSCode
FROM 
    frpm
WHERE 
    (Enrollment (K-12) + Enrollment (Ages 5-17)) > 500;
------------------------------
question: Among the schools with an SAT excellence rate of over 0.3, what is the highest eligible free rate for students aged 5-17?
GT: SELECT MAX(CAST(T1.`Free Meal Count (Ages 5-17)` AS REAL) / T1.`Enrollment (Ages 5-17)`) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr > 0.3
Pred: WITH SchoolPerformance AS (
    SELECT 
        s.cds,
        s.sname,
        s.dname,
        s.cname,
        s.enroll12,
        s.NumTstTakr,
        s.AvgScrRead,
        s.AvgScrMath,
        s.AvgScrWrite,
        s.NumGE1500,
        f."Free Meal Count (Ages 5-17)" AS free_meal_count_5_17,
        f."Enrollment (Ages 5-17)" AS enrollment_5_17,
        (s.NumGE1500 / s.NumTstTakr) AS sat_excellence_rate,
        (f."Free Meal Count (Ages 5-17)" / f."Enrollment (Ages 5-17)") AS eligible_free_rate_5_17
    FROM 
        satscores s
    JOIN 
        frpm f ON s.cds = f.CDSCode
)
SELECT 
    MAX(eligible_free_rate_5_17) AS highest_eligible_free_rate_5_17
FROM 
    SchoolPerformance
WHERE 
    sat_excellence_rate > 0.3;
------------------------------
question: Which active district has the highest average score in Reading?
GT: SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' ORDER BY T2.AvgScrRead DESC LIMIT 1
Pred: WITH ActiveDistricts AS (
    SELECT 
        CDSCode,
        District
    FROM 
        schools
    WHERE 
        StatusType = 'Active'
),
DistrictReadingScores AS (
    SELECT 
        ad.District,
        AVG(ss.AvgScrRead) AS AvgReadingScore
    FROM 
        ActiveDistricts ad
    INNER JOIN 
        satscores ss ON ad.CDSCode = ss.cds
    GROUP BY 
        ad.District
)
SELECT 
    District
FROM 
    DistrictReadingScores
ORDER BY 
    AvgReadingScore DESC
LIMIT 1;
------------------------------
question: How many schools in merged Alameda have number of test takers less than 100?
GT: SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Merged' AND T2.NumTstTakr < 100 AND T1.County = 'Lake'
Pred: SELECT COUNT(schools.CDSCode) AS TotalSchools
FROM schools
INNER JOIN satscores ON schools.CDSCode = satscores.cds
WHERE schools.County = 'Alameda'
  AND schools.StatusType = 'Merged'
  AND satscores.NumTstTakr < 100;
------------------------------
question: Rank schools by their average score in Writing where the score is greater than 499, showing their charter numbers.
GT: SELECT CharterNum, AvgScrWrite, RANK() OVER (ORDER BY AvgScrWrite DESC) AS WritingScoreRank FROM schools AS T1  INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrWrite > 499 AND CharterNum is not null
Pred: SELECT 
    s.CDSCode,
    s.CharterNum,
    ss.AvgScrWrite,
    RANK() OVER (ORDER BY ss.AvgScrWrite DESC) AS rank
FROM 
    schools s
JOIN 
    satscores ss ON s.CDSCode = ss.cds
WHERE 
    s.CharterNum IS NOT NULL AND ss.AvgScrWrite > 499;
------------------------------
question: How many schools in Amador which the Low Grade is 9 and the High Grade is 12?
GT: SELECT COUNT(T1.`School Name`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Amador' AND T1.`Low Grade` = 9 AND T1.`High Grade` = 12
Pred: SELECT COUNT(CDSCode) AS SchoolCount
FROM frpm
WHERE CountyName = 'Amador'
  AND LowGrade = '9'
  AND HighGrade = '12';
------------------------------
question: In Los Angeles how many schools have more than 500 free meals but less than 700 free or reduced price meals for K-12?
GT: SELECT COUNT(CDSCode) FROM frpm WHERE `County Name` = 'Los Angeles' AND `Free Meal Count (K-12)` > 500 AND `FRPM Count (K-12)`< 700
Pred: SELECT 
    COUNT(*) AS TotalSchools
FROM 
    frpm
WHERE 
    County Name = 'Los Angeles'
    AND Free Meal Count (K-12) > 500
    AND FRPM Count (K-12) < 700;
------------------------------
question: Which school in Contra Costa has the highest number of test takers?
GT: SELECT sname FROM satscores WHERE cname = 'Contra Costa' AND sname IS NOT NULL ORDER BY NumTstTakr DESC LIMIT 1
Pred: SELECT 
    s.School
FROM 
    schools s
JOIN 
    satscores ss ON s.CDSCode = ss.cds
WHERE 
    s.County = 'Contra Costa'
ORDER BY 
    ss.NumTstTakr DESC
LIMIT 1;
------------------------------
question: List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools.
GT: SELECT T1.School, T1.Street FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)` > 30
Pred: SELECT 
    f."School Name" AS SchoolName,
    s."Street" || ', ' || s."City" || ', ' || s."State" || ' ' || s."Zip" AS FullStreetAddress
FROM 
    frpm f
JOIN 
    schools s ON f."CDSCode" = s."CDSCode"
WHERE 
    (f."Enrollment (K-12)" - f."Enrollment (Ages 5-17)") > 30
ORDER BY 
    (f."Enrollment (K-12)" - f."Enrollment (Ages 5-17)") DESC;
------------------------------
question: Give the names of the schools with the percent eligible for free meals in K-12 is more than 0.1 and test takers whose test score is greater than or equal to 1500?
GT: SELECT T2.`School Name` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE CAST(T2.`Free Meal Count (K-12)` AS REAL) / T2.`Enrollment (K-12)` > 0.1 AND T1.NumGE1500 > 0
Pred: SELECT 
    f.School_Name
FROM 
    frpm f
INNER JOIN 
    satscores s ON f.CDSCode = s.cds
WHERE 
    f."Percent (%) Eligible Free (K-12)" > 0.1
    AND s.NumGE1500 > 0;
------------------------------
question: Name schools in Riverside which the average of average math score for SAT is grater than 400, what is the funding type of these schools?
GT: SELECT T1.sname, T2.`Charter Funding Type` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T2.`District Name` LIKE 'Riverside%' GROUP BY T1.sname, T2.`Charter Funding Type` HAVING CAST(SUM(T1.AvgScrMath) AS REAL) / COUNT(T1.cds) > 400
Pred: WITH SchoolSAT AS (
    SELECT 
        s.CDSCode,
        s.School,
        s.FundingType,
        AVG(ss.AvgScrMath) AS AvgMathScore
    FROM 
        schools s
    INNER JOIN 
        satscores ss ON s.CDSCode = ss.cds
    WHERE 
        s.County = 'Riverside'
    GROUP BY 
        s.CDSCode, s.School, s.FundingType
)
SELECT 
    School,
    FundingType
FROM 
    SchoolSAT
WHERE 
    AvgMathScore > 400;
------------------------------
question: State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17?
GT: SELECT T1.`School Name`, T2.Street, T2.City, T2.State, T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Monterey' AND T1.`Free Meal Count (Ages 5-17)` > 800 AND T1.`School Type` = 'High Schools (Public)'
Pred: SELECT 
    s.School AS SchoolName,
    s.Street,
    s.City,
    s.State,
    s.Zip
FROM 
    schools s
INNER JOIN 
    frpm f ON s.CDSCode = f.CDSCode
WHERE 
    s.EILName = 'High School'
    AND s.County = 'Monterey'
    AND f."FRPM Count (Ages 5-17)" > 800;
------------------------------
question: What is the average score in writing for the schools that were opened after 1991 or closed before 2000? List the school names along with the score. Also, list the communication number of the schools if there is any.
GT: SELECT T2.School, T1.AvgScrWrite, T2.Phone FROM schools AS T2 LEFT JOIN satscores AS T1 ON T2.CDSCode = T1.cds WHERE strftime('%Y', T2.OpenDate) > '1991' OR strftime('%Y', T2.ClosedDate) < '2000'
Pred: SELECT 
    s.School AS SchoolName,
    ss.AvgScrWrite AS AverageWritingScore,
    s.Phone AS CommunicationNumber
FROM 
    schools s
JOIN 
    satscores ss ON s.CDSCode = ss.cds
WHERE 
    (s.OpenDate > '1991-01-01' OR s.ClosedDate < '2000-12-31')
ORDER BY 
    ss.AvgScrWrite DESC;
------------------------------
question: Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.
GT: SELECT T2.School, T2.DOC FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Locally funded')
Pred: SELECT 
    s.School, 
    s.DOCType
FROM 
    schools s
JOIN 
    frpm f ON s.CDSCode = f.CDSCode
WHERE 
    s.FundingType = 'Locally funded'
    AND (f."Enrollment (K-12)" - f."Enrollment (Ages 5-17)") > (
        SELECT 
            AVG(f2."Enrollment (K-12)" - f2."Enrollment (Ages 5-17)")
        FROM 
            frpm f2
        JOIN 
            schools s2 ON f2.CDSCode = s2.CDSCode
        WHERE 
            s2.FundingType = 'Locally funded'
    );
------------------------------
question: Which cities have the top 5 lowest enrollment number for students in grades 1 through 12?
GT: SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode GROUP BY T2.City ORDER BY SUM(T1.`Enrollment (K-12)`) ASC LIMIT 5
Pred: WITH RankedCities AS (
    SELECT 
        City,
        ROW_NUMBER() OVER (ORDER BY "Enrollment (K-12)" ASC) AS rank
    FROM 
        frpm
    WHERE 
        "Enrollment (K-12)" IS NOT NULL
)
SELECT 
    City
FROM 
    RankedCities
WHERE 
    rank <= 5;
------------------------------
question: What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12?
GT: SELECT CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)` FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 9, 2
Pred: WITH RankedSchools AS (
    SELECT 
        CDSCode,
        School_Name,
        Enrollment_K_12,
        Free_Meal_Count_K_12,
        (Free_Meal_Count_K_12 / Enrollment_K_12) AS Eligible_Free_Rate,
        ROW_NUMBER() OVER (ORDER BY Enrollment_K_12 DESC) AS Rank
    FROM 
        frpm
)
SELECT 
    School_Name,
    Eligible_Free_Rate
FROM 
    RankedSchools
WHERE 
    Rank IN (10, 11)
ORDER BY 
    Rank;
------------------------------
question: If there are any, what are the websites address of the schools with a free meal count of 1,900-2,000 to students aged 5-17? Include the name of the school.
GT: SELECT T2.Website, T1.`School Name` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000 AND T2.Website IS NOT NULL
Pred: SELECT s.Website, s.School
FROM schools s
INNER JOIN frpm f ON s.CDSCode = f.CDSCode
WHERE f."Free Meal Count (Ages 5-17)" BETWEEN 1900 AND 2000;
------------------------------
question: What is the free rate for students between the ages of 5 and 17 at the school run by Kacey Gibson?
GT: SELECT CAST(T2.`Free Meal Count (Ages 5-17)` AS REAL) / T2.`Enrollment (Ages 5-17)` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.AdmFName1 = 'Kacey' AND T1.AdmLName1 = 'Gibson'
Pred: SELECT 
    f.CDSCode,
    f.AcademicYear,
    f.CountyName,
    f.DistrictName,
    f.SchoolName,
    f.EnrollmentAges5to17,
    f.FreeMealCountAges5to17,
    (f.FreeMealCountAges5to17 / f.EnrollmentAges5to17) AS FreeRateAges5to17
FROM 
    frpm f
INNER JOIN 
    schools s ON f.CDSCode = s.CDSCode
WHERE 
    s.AdmFName1 = 'Kacey' AND s.AdmLName1 = 'Gibson';
------------------------------
question: Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names.
GT: SELECT T2.AdmFName1, T2.AdmLName1, T2.AdmFName2, T2.AdmLName2, T2.AdmFName3, T2.AdmLName3 FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1
Pred: SELECT 
    s.AdmFName1 || ' ' || s.AdmLName1 AS Admin1,
    s.AdmFName2 || ' ' || s.AdmLName2 AS Admin2,
    s.AdmFName3 || ' ' || s.AdmLName3 AS Admin3
FROM 
    schools s
JOIN 
    satscores ss ON s.CDSCode = ss.cds
WHERE 
    ss.NumGE1500 > 0
ORDER BY 
    ss.NumGE1500 DESC
LIMIT 1;
------------------------------
question: What is the telephone number for the school with the lowest average score in reading in Fresno Unified?
GT: SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.District = 'Fresno Unified' AND T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1
Pred: SELECT s.Phone
FROM schools s
JOIN satscores ss ON s.CDSCode = ss.cds
WHERE ss.dname = 'Fresno Unified'
ORDER BY ss.AvgScrRead ASC
LIMIT 1;
------------------------------
question: List the names of virtual schools that are among the top 5 in their respective counties based on average reading scores.
GT: SELECT School FROM (SELECT T2.School,T1.AvgScrRead, RANK() OVER (PARTITION BY T2.County ORDER BY T1.AvgScrRead DESC) AS rnk FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' ) ranked_schools WHERE rnk <= 5
Pred: WITH RankedSchools AS (
    SELECT 
        s.School,
        ss.AvgScrRead,
        ROW_NUMBER() OVER (PARTITION BY s.County ORDER BY ss.AvgScrRead DESC) AS rank
    FROM 
        schools s
    INNER JOIN 
        satscores ss ON s.CDSCode = ss.cds
    WHERE 
        s.Virtual = 'F'
)
SELECT 
    School
FROM 
    RankedSchools
WHERE 
    rank <= 5;
------------------------------
question: What is the type of education offered in the school who scored the highest average in Math?
GT: SELECT T2.EdOpsName FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 1
Pred: SELECT s.EdOpsName
FROM satscores ss
JOIN schools s ON ss.cds = s.CDSCode
WHERE ss.AvgScrMath = (
    SELECT MAX(AvgScrMath)
    FROM satscores
);
------------------------------
question: What is the average math score of the school with the lowest average score for all subjects, and in which county is it located?
GT: SELECT T1.AvgScrMath, T2.County FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath IS NOT NULL ORDER BY T1.AvgScrMath + T1.AvgScrRead + T1.AvgScrWrite ASC LIMIT 1
Pred: WITH SchoolScores AS (
    SELECT 
        s.cds,
        s.sname,
        s.dname,
        s.cname,
        s.enroll12,
        s.NumTstTakr,
        s.AvgScrMath,
        s.AvgScrRead,
        s.AvgScrWrite,
        (s.AvgScrMath + s.AvgScrRead + s.AvgScrWrite) AS TotalAvgScore
    FROM 
        satscores s
),
RankedSchools AS (
    SELECT 
        ss.cds,
        ss.sname,
        ss.dname,
        ss.cname,
        ss.enroll12,
        ss.NumTstTakr,
        ss.AvgScrMath,
        ss.AvgScrRead,
        ss.AvgScrWrite,
        ss.TotalAvgScore,
        ROW_NUMBER() OVER (ORDER BY ss.TotalAvgScore ASC) AS Rank
    FROM 
        SchoolScores ss
)
SELECT 
    rs.sname AS SchoolName,
    rs.cname AS CountyName,
    rs.AvgScrMath AS AverageMathScore
FROM 
    RankedSchools rs
JOIN 
    frpm f ON rs.cds = f.CDSCode
WHERE 
    rs.Rank = 1;
------------------------------
question: Which state special schools have the highest number of enrollees from grades 1 through 12?
GT: SELECT T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.DOC = 31 ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1
Pred: SELECT 
    s.School AS SchoolName,
    f."Enrollment (K-12)" AS EnrollmentK12
FROM 
    schools s
INNER JOIN 
    frpm f ON s.CDSCode = f.CDSCode
WHERE 
    s.DOC = 31 AND s.EdOpsName = 'State Special School'
ORDER BY 
    f."Enrollment (K-12)" DESC
LIMIT 1;
------------------------------
question: Which different county has the most number of closed schools? Please provide the name of each school as well as the closure date.
GT: SELECT DISTINCT County, School, ClosedDate FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Closed' AND school IS NOT NULL
Pred: SELECT County, School, ClosedDate
FROM schools
WHERE County IN (
    SELECT County
    FROM schools
    WHERE StatusType = 'Closed'
    GROUP BY County
    ORDER BY COUNT(CDSCode) DESC
    LIMIT 1
)
AND StatusType = 'Closed'
ORDER BY ClosedDate DESC;
------------------------------
question: In which mailing street address can you find the school that has the lowest average score in reading? Also give the school's name.
GT: SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1
Pred: SELECT s.MailStreet, ss.sname
FROM satscores ss
JOIN schools s ON ss.cds = s.CDSCode
ORDER BY ss.AvgScrRead ASC
LIMIT 1;
------------------------------
question: How many test takers are there at the school/s whose mailing city address is in Fresno?
GT: SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Fresno'
Pred: SELECT SUM(satscores.NumTstTakr) AS TotalTestTakers
FROM schools
JOIN satscores ON schools.CDSCode = satscores.cds
WHERE schools.MailCity = 'Fresno';
------------------------------
question: Please specify all of the schools and their related mailing zip codes that are under Avetik Atoian's administration.
GT: SELECT School, MailZip FROM schools WHERE AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian'
Pred: SELECT s.School, s.MailZip
FROM schools s
INNER JOIN frpm f ON s.CDSCode = f.CDSCode
WHERE f.AdmFName1 = 'Avetik' AND f.AdmLName1 = 'Atoian';
------------------------------
question: What is the phone number and extension number for the school with the zip code 95203-3704? Indicate the school's name.
GT: SELECT Phone, Ext, School FROM schools WHERE Zip = '95203-3704'
Pred: SELECT School, Phone, Ext
FROM schools
WHERE Zip = '95203-3704';
------------------------------
question: In chartered schools with charter number 00D2, what are the names of all the administrators? Include the name of the school and the city to which it belongs
GT: SELECT AdmFName1, AdmLName1, School, City FROM schools WHERE Charter = 1 AND CharterNum = '00D2'
Pred: SELECT 
    (AdmFName1 || ' ' || AdmLName1) AS AdministratorName,
    School,
    City
FROM 
    schools
WHERE 
    Charter = 1 AND CharterNum = '00D2'

UNION ALL

SELECT 
    (AdmFName2 || ' ' || AdmLName2) AS AdministratorName,
    School,
    City
FROM 
    schools
WHERE 
    Charter = 1 AND CharterNum = '00D2'

UNION ALL

SELECT 
    (AdmFName3 || ' ' || AdmLName3) AS AdministratorName,
    School,
    City
FROM 
    schools
WHERE 
    Charter = 1 AND CharterNum = '00D2';
------------------------------
question: What is the ratio in percentage of Santa Clara County schools that are locally funded compared to all other types of charter school funding?
GT: SELECT CAST(SUM(CASE WHEN FundingType = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN FundingType != 'Locally funded' THEN 1 ELSE 0 END) FROM schools WHERE County = 'Santa Clara' AND Charter = 1
Pred: SELECT 
    (COUNT(CASE WHEN FundingType = 'Locally funded' THEN 1 END) * 100.0 / COUNT(*)) AS ratio
FROM 
    schools
WHERE 
    County = 'Santa Clara';
------------------------------
question: Between 1/1/2000 to 12/31/2005, how many directly funded schools opened in the county of Stanislaus?
GT: SELECT COUNT(School) FROM schools WHERE strftime('%Y', OpenDate) BETWEEN '2000' AND '2005' AND County = 'Stanislaus' AND FundingType = 'Directly funded'
Pred: SELECT COUNT(*) 
FROM schools 
WHERE FundingType = 'Directly Funded' 
  AND County = 'Stanislaus' 
  AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31';
------------------------------
question: Which county reported the most number of school closure in the 1980s with school wonership code belonging to Youth Authority Facilities (CEA)?
GT: SELECT County FROM schools WHERE strftime('%Y', ClosedDate) BETWEEN '1980' AND '1989' AND StatusType = 'Closed' AND SOC = 11 GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1
Pred: SELECT 
    s.County, 
    COUNT(f.CDSCode) AS num_school_closures
FROM 
    schools s
JOIN 
    frpm f ON s.CDSCode = f.CDSCode
WHERE 
    strftime('%Y', s.ClosedDate) BETWEEN '1980' AND '1989'
    AND s.SOC = 11
GROUP BY 
    s.County
ORDER BY 
    num_school_closures DESC
LIMIT 1;
------------------------------
question: How many active and closed District Community Day Schools are there in the county of Alpine?
GT: SELECT COUNT(School) FROM schools WHERE (StatusType = 'Closed' OR StatusType = 'Active') AND SOC = 69 AND County = 'Alpine'
Pred: SELECT COUNT(*)
FROM schools
WHERE County = 'Alpine'
  AND EdOpsName = 'District Community Day School'
  AND StatusType IN ('Active', 'Closed');
------------------------------
question: What is the district code for the School that does not offer a magnet program in the city of Fresno?
GT: SELECT T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.City = 'Fresno' AND T2.Magnet = 0
Pred: SELECT DISTINCT District
FROM schools
WHERE Magnet = 0 AND City = 'Fresno';
------------------------------
question: What is the free or reduced price meal count for ages 5 to 17 in the Youth Authority School with a mailing street address of PO Box 1040?
GT: SELECT T1.`FRPM Count (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.MailStreet = 'PO Box 1040' AND T2.SOCType = 'Youth Authority Facilities'
Pred: SELECT f."FRPM Count (Ages 5-17)"
FROM schools s
JOIN frpm f ON s."CDSCode" = f."CDSCode"
WHERE s."School" = 'Youth Authority School'
  AND s."MailStreet" = 'PO Box 1040';
------------------------------
question: What is the lowest grade for the District Special Education Consortia School with National Center for Educational Statistics school district identification number of 0613360?
GT: SELECT MIN(T1.`Low Grade`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.NCESDist = '0613360' AND T2.EdOpsCode = 'SPECON'
Pred: SELECT MIN(LowGrade) AS LowestGrade
FROM schools
WHERE EdOpsCode = 'SPECON' AND NCESDist = '0613360';
------------------------------
question: What is the educational level name for the schools with Breakfast Provision 2 in county code 37? Indicate the name of the school.
GT: SELECT T2.EILName, T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`NSLP Provision Status` = 'Breakfast Provision 2' AND T1.`County Code` = 37
Pred: SELECT 
    s.School, 
    s.EILName
FROM 
    schools s
INNER JOIN 
    frpm f ON s.CDSCode = f.CDSCode
WHERE 
    f."County Code" = '37' 
    AND f."NSLP Provision Status" = 'Breakfast Provision 2';
------------------------------
question: What is the city location of the high school level school with Lunch Provision 2 whose lowest grade is 9 and the highest grade is 12 in the county of Merced?
GT: SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`NSLP Provision Status` = 'Lunch Provision 2' AND T2.County = 'Merced' AND T1.`Low Grade` = 9 AND T1.`High Grade` = 12 AND T2.EILCode = 'HS'
Pred: SELECT s.City
FROM schools s
JOIN frpm f ON s.CDSCode = f.CDSCode
WHERE f.County_Name = 'Merced'
  AND f.EILCode = 'HS'
  AND f.NSLP_Provision_Status = 'Lunch Provision 2'
  AND f.Low_Grade = '9'
  AND f.High_Grade = '12';
------------------------------
question: Which schools served a grade span of Kindergarten to 9th grade in the county of Los Angeles and what is its Percent (%) Eligible FRPM (Ages 5-17)?
GT: SELECT T2.School, T1.`FRPM Count (Ages 5-17)` * 100 / T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.GSserved = 'K-9'
Pred: SELECT 
    s.CDSCode,
    s.County,
    s.School,
    (f."FRPM Count (Ages 5-17)" / f."Enrollment (Ages 5-17)" * 100) AS "Percent (%) Eligible FRPM (Ages 5-17)"
FROM 
    schools s
JOIN 
    frpm f ON s.CDSCode = f.CDSCode
WHERE 
    s.County = 'Los Angeles' AND s.GSserved = 'K-9'
ORDER BY 
    s.CDSCode;
------------------------------
question: What is the most common type of grade span served in the city of Adelanto?
GT: SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1
Pred: SELECT GSserved, COUNT(*) AS count
FROM schools
WHERE City = 'Adelanto'
GROUP BY GSserved
ORDER BY count DESC
LIMIT 1;
------------------------------
question: What is the school type of the school with the highest latitude? Indicate the name of the school as well as the latitude coordinates.
GT: SELECT T1.`School Type`, T1.`School Name`, T2.Latitude FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.Latitude DESC LIMIT 1
Pred: SELECT SchoolType, School, Latitude
FROM schools
ORDER BY Latitude DESC
LIMIT 1;
------------------------------
question: In which city can you find the school in the state of California with the lowest latitude coordinates and what is its lowest grade? Indicate the school name.
GT: SELECT T2.City, T1.`Low Grade`, T1.`School Name` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.State = 'CA' ORDER BY T2.Latitude ASC LIMIT 1
Pred: SELECT 
    s.City,
    s.School,
    f.Low_Grade
FROM 
    schools s
JOIN 
    frpm f ON s.CDSCode = f.CDSCode
WHERE 
    s.State = 'CA'
ORDER BY 
    s.Latitude ASC
LIMIT 1;
------------------------------
question: What is the grade span offered in the school with the highest longitude?
GT: SELECT GSoffered FROM schools ORDER BY ABS(longitude) DESC LIMIT 1
Pred: SELECT GSoffered
FROM schools
WHERE ABS(Longitude) = (
    SELECT MAX(ABS(Longitude))
    FROM schools
);
------------------------------
question: Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.
GT: SELECT T2.City, COUNT(T2.CDSCode) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Magnet = 1 AND T2.GSoffered = 'K-8' AND T1.`NSLP Provision Status` = 'Multiple Provision Types' GROUP BY T2.City
Pred: SELECT 
    s.City,
    COUNT(DISTINCT s.CDSCode) AS num_schools,
    COUNT(DISTINCT s.City) AS num_cities
FROM 
    schools s
JOIN 
    frpm f ON s.CDSCode = f.CDSCode
WHERE 
    s.Magnet = 1 
    AND s.GSoffered = 'K-8' 
    AND f."NSLP Provision Status" = 'Multiple Provision Types'
GROUP BY 
    s.City
ORDER BY 
    s.City;
------------------------------
question: What are the two most common first names among the school administrators? Indicate the district to which they administer.
GT: SELECT DISTINCT T1.AdmFName1, T1.District FROM schools AS T1 INNER JOIN ( SELECT admfname1 FROM schools GROUP BY admfname1 ORDER BY COUNT(admfname1) DESC LIMIT 2 ) AS T2 ON T1.AdmFName1 = T2.admfname1
Pred: WITH AdminNamesCTE AS (
    SELECT 
        District,
        AdmFName1 AS AdminFirstName,
        COUNT(*) AS NameCount,
        ROW_NUMBER() OVER (PARTITION BY District ORDER BY COUNT(*) DESC) AS Rank
    FROM 
        schools
    WHERE 
        AdmFName1 IS NOT NULL
    GROUP BY 
        District, AdmFName1
    UNION ALL
    SELECT 
        District,
        AdmFName2 AS AdminFirstName,
        COUNT(*) AS NameCount,
        ROW_NUMBER() OVER (PARTITION BY District ORDER BY COUNT(*) DESC) AS Rank
    FROM 
        schools
    WHERE 
        AdmFName2 IS NOT NULL
    GROUP BY 
        District, AdmFName2
    UNION ALL
    SELECT 
        District,
        AdmFName3 AS AdminFirstName,
        COUNT(*) AS NameCount,
        ROW_NUMBER() OVER (PARTITION BY District ORDER BY COUNT(*) DESC) AS Rank
    FROM 
        schools
    WHERE 
        AdmFName3 IS NOT NULL
    GROUP BY 
        District, AdmFName3
)
SELECT 
    District,
    AdminFirstName
FROM 
    AdminNamesCTE
WHERE 
    Rank <= 2;
------------------------------
question: What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.
GT: SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'
Pred: SELECT 
    (frpm."Free Meal Count (K-12)" / frpm."Enrollment (K-12)") * 100 AS "Percent (%) Eligible Free (K-12)",
    schools."District" AS "District Code"
FROM 
    frpm
INNER JOIN 
    schools ON frpm."CDSCode" = schools."CDSCode"
WHERE 
    schools."AdmFName1" = 'Alusine';
------------------------------
question: What is the administrator's last name that oversees the school with Charter number 40? Indicate the district, the county where the school is situated, and the name of the school.
GT: SELECT AdmLName1, District, County, School FROM schools WHERE CharterNum = '0040'
Pred: SELECT s.AdmLName1, s.District, s.County, s.School
FROM schools s
INNER JOIN frpm f ON s.CDSCode = f.CDSCode
WHERE f.Charter_School_Number = 40;
------------------------------
question: What are the valid e-mail addresses of the administrator of the school located in the San Bernardino county, City of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Schools?
GT: SELECT T2.AdmEmail1, T2.AdmEmail2 FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'San Bernardino' AND T2.City = 'San Bernardino' AND T2.DOC = 54 AND strftime('%Y', T2.OpenDate) BETWEEN '2009' AND '2010' AND T2.SOC = 62
Pred: SELECT AdmEmail1
FROM schools
WHERE County = 'San Bernardino'
  AND District = 'San Bernardino City Unified'
  AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31'
  AND SOC = 62
  AND DOC = 54;
------------------------------
question: How many accounts who have region in Prague are eligible for loans?
GT: SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'Prague'
Pred: SELECT COUNT(a.account_id) 
FROM account a
JOIN district d ON a.district_id = d.district_id
WHERE d.A3 = 'Prague';
------------------------------
question: The average unemployment ratio of 1995 and 1996, which one has higher percentage?
GT: SELECT DISTINCT IIF(AVG(A13) > AVG(A12), '1996', '1995') FROM district
Pred: SELECT 
    AVG(A12) AS avg_unemployment_1995,
    AVG(A13) AS avg_unemployment_1996,
    CASE 
        WHEN AVG(A12) > AVG(A13) THEN '1995'
        ELSE '1996'
    END AS higher_unemployment_year
FROM 
    district;
------------------------------
question: How many male customers who are living in North Bohemia have average salary greater than 8000?
GT: SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'north Bohemia' AND T2.A11 > 8000
Pred: SELECT COUNT(*)
FROM client c
JOIN district d ON c.district_id = d.district_id
WHERE c.gender = 'M' AND d.A3 = 'North Bohemia' AND d.A11 > 8000;
------------------------------
question: List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?
GT: SELECT T1.account_id , ( SELECT MAX(A11) - MIN(A11) FROM district ) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T2.district_id = ( SELECT district_id FROM client WHERE gender = 'F' ORDER BY birth_date ASC LIMIT 1 ) ORDER BY T2.A11 DESC LIMIT 1
Pred: 
------------------------------
question: List out the account numbers of clients who are youngest and have highest average salary?
GT: SELECT T1.account_id  FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 on T4.district_id = T1.district_id WHERE T2.client_id = ( SELECT client_id FROM client ORDER BY birth_date DESC LIMIT 1) GROUP BY T4.A11, T1.account_id
Pred: SELECT a.account_id
FROM client c
JOIN district d ON c.district_id = d.district_id
JOIN account a ON c.district_id = a.district_id
ORDER BY c.birth_date DESC, d.A11 DESC
LIMIT 1;
------------------------------
question: Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement.
GT: SELECT T2.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount LIMIT 1
Pred: SELECT l.account_id
FROM loan l
JOIN account a ON l.account_id = a.account_id
WHERE strftime('%Y', l.date) = '1997'
  AND a.frequency = 'POPLATEK TYDNE'
  AND l.amount = (
    SELECT MIN(amount)
    FROM loan
    WHERE strftime('%Y', date) = '1997'
  );
------------------------------
question: List out the accounts who have the earliest trading date in 1995 ?
GT: SELECT account_id FROM trans WHERE STRFTIME('%Y', date) = '1995' ORDER BY date ASC LIMIT 1
Pred: SELECT account_id
FROM trans
WHERE (account_id, date) IN (
    SELECT account_id, MIN(date)
    FROM trans
    WHERE strftime('%Y', date) = '1995'
    GROUP BY account_id
);
------------------------------
question: State different accounts who have account opening date before 1997 and own an amount of money greater than 3000USD
GT: SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) < '1997' AND T1.amount > 3000
Pred: SELECT DISTINCT a.account_id
FROM account a
JOIN trans t ON a.account_id = t.account_id
WHERE a.date < '1997-01-01'
  AND t.amount > 3000
  AND t.type = 'PRIJEM';
------------------------------
question: What is the gender of the oldest client who opened his/her account in the highest average salary branch?
GT: SELECT T2.gender FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id ORDER BY T1.A11 DESC, T2.birth_date ASC LIMIT 1
Pred: SELECT c.gender
FROM client c
JOIN district d ON c.district_id = d.district_id
WHERE c.district_id = (
    SELECT district_id
    FROM district
    WHERE A11 = (
        SELECT MAX(A11)
        FROM district
    )
)
AND c.birth_date = (
    SELECT MIN(birth_date)
    FROM client
);
------------------------------
question: For the client who applied the biggest loan, what was his/her first amount of transaction after opened the account?
GT: SELECT T3.amount FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id ORDER BY T1.amount DESC, T3.date ASC LIMIT 1
Pred: WITH BiggestLoanClient AS (
    SELECT c.client_id
    FROM client c
    JOIN disp d ON c.client_id = d.client_id
    JOIN loan l ON d.account_id = l.account_id
    ORDER BY l.amount DESC
    LIMIT 1
),
FirstTransaction AS (
    SELECT t.amount
    FROM account a
    JOIN trans t ON a.account_id = t.account_id
    JOIN BiggestLoanClient blc ON a.district_id = blc.client_id
    WHERE t.date > a.date
    ORDER BY t.date
    LIMIT 1
)
SELECT amount
FROM FirstTransaction;
------------------------------
question: How many clients opened their accounts in Jesenik branch were women?
GT: SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A2 = 'Jesenik'
Pred: SELECT COUNT(c.client_id) AS female_clients
FROM client c
JOIN account a ON c.client_id = a.account_id
JOIN district d ON a.district_id = d.district_id
WHERE c.gender = 'F' AND d.A2 = 'Jesenik';
------------------------------
question: What is the disposition id of the client who made 5100 USD transaction in 1998/9/2?
GT: SELECT T1.disp_id FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.date='1997-08-20' AND T3.amount = 5100
Pred: SELECT d.disp_id
FROM trans t
JOIN disp d ON t.account_id = d.client_id
WHERE t.date = '1998-09-02' AND t.amount = 5100;
------------------------------
question: For the female client who was born in 1976/1/29, which district did she opened her account?
GT: SELECT T1.A2 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.birth_date = '1976-01-29' AND T2.gender = 'F'
Pred: SELECT d.A2
FROM client c
JOIN account a ON c.client_id = a.account_id
JOIN district d ON a.district_id = d.district_id
WHERE c.gender = 'F' AND c.birth_date = '1976-01-29';
------------------------------
question: For the first client who opened his/her account in Prague, what is his/her account ID?
GT: SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date ASC LIMIT 1
Pred: SELECT a.account_id
FROM client c
JOIN district d ON c.district_id = d.district_id
JOIN disp dp ON c.client_id = dp.client_id
JOIN account a ON dp.account_id = a.account_id
WHERE d.A3 = 'Prague'
ORDER BY a.date
LIMIT 1;
------------------------------
question: For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27?
GT: SELECT CAST((SUM(IIF(T3.date = '1998-12-27', T3.balance, 0)) - SUM(IIF(T3.date = '1993-03-22', T3.balance, 0))) AS REAL) * 100 / SUM(IIF(T3.date = '1993-03-22', T3.balance, 0)) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T3.account_id = T2.account_id WHERE T1.date = '1993-07-05'
Pred: WITH ClientLoan AS (
    SELECT 
        l.account_id
    FROM 
        loan l
    WHERE 
        l.date = '1993-07-05'
),
AccountBalance AS (
    SELECT 
        t.account_id,
        t.date,
        t.balance
    FROM 
        trans t
    WHERE 
        t.account_id IN (SELECT account_id FROM ClientLoan)
        AND t.date IN ('1993-03-22', '1998-12-27')
)
SELECT 
    ((SELECT balance FROM AccountBalance WHERE date = '1998-12-27') - 
     (SELECT balance FROM AccountBalance WHERE date = '1993-03-22')) / 
    (SELECT balance FROM AccountBalance WHERE date = '1993-03-22') * 100 AS increase_rate
FROM 
    AccountBalance;
------------------------------
question: For loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue.
GT: SELECT CAST(SUM(status = 'C') AS REAL) * 100 / COUNT(account_id) FROM loan WHERE amount < 100000
Pred: SELECT 
    SUM(CASE WHEN l.amount < 100000 AND l.status = 'C' THEN 1 ELSE 0 END) * 100.0 / COUNT(l.loan_id) AS percentage
FROM 
    loan l
WHERE 
    l.amount < 100000 AND l.status = 'C';
------------------------------
question: List the loan ID, district and average salary for loan with duration of 60 months.
GT: SELECT T3.loan_id, T2.A2, T2.A11 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration = 60
Pred: SELECT 
    loan.loan_id, 
    district.A3 AS district, 
    district.A11 AS average_salary
FROM 
    loan
JOIN 
    account ON loan.account_id = account.account_id
JOIN 
    district ON account.district_id = district.district_id
WHERE 
    loan.duration = 60;
------------------------------
question: For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.
GT: SELECT CAST((T3.A13 - T3.A12) AS REAL) * 100 / T3.A12 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'
Pred: SELECT 
    d.A2 AS district_name,
    d.A3 AS region,
    ((d.A13 - d.A12) / d.A12) * 100 AS unemployment_rate_increment
FROM 
    district d
JOIN 
    account a ON d.district_id = a.district_id
JOIN 
    loan l ON a.account_id = l.account_id
WHERE 
    l.status = 'D'
    AND d.A12 IS NOT NULL
    AND d.A13 IS NOT NULL;
------------------------------
question: List the top nine districts, by descending order, from the highest to the lowest, the number of female account holders.
GT: SELECT T2.A2, COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.district_id, T2.A2 ORDER BY COUNT(T1.client_id) DESC LIMIT 9
Pred: SELECT 
    d.district_id,
    d.A2 AS district_name,
    COUNT(c.client_id) AS female_count
FROM 
    client c
JOIN 
    account a ON c.district_id = a.district_id
JOIN 
    district d ON c.district_id = d.district_id
WHERE 
    c.gender = 'F'
GROUP BY 
    d.district_id, d.A2
ORDER BY 
    female_count DESC
LIMIT 9;
------------------------------
question: Which are the top ten withdrawals (non-credit card) by district names for the month of January 1996?
GT: SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ' AND T3.date LIKE '1996-01%' ORDER BY A2 ASC LIMIT 10
Pred: SELECT 
    d.A2 AS district_name,
    SUM(t.amount) AS total_withdrawal
FROM 
    trans t
JOIN 
    account a ON t.account_id = a.account_id
JOIN 
    district d ON a.district_id = d.district_id
WHERE 
    t.type = 'VYDAJ' 
    AND t.date LIKE '1996-01%'
GROUP BY 
    d.A2
ORDER BY 
    total_withdrawal DESC
LIMIT 10;
------------------------------
question: How many of the account holders in South Bohemia still do not own credit cards?
GT: SELECT COUNT(T3.account_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.client_id = T3.client_id WHERE T1.A3 = 'south Bohemia' AND T3.type != 'OWNER'
Pred: SELECT COUNT(c.client_id) AS count_without_cards
FROM client c
JOIN district d ON c.district_id = d.district_id
LEFT JOIN disp dp ON c.client_id = dp.client_id
LEFT JOIN card c ON dp.card_id = c.card_id
WHERE d.A3 = 'South Bohemia' AND c.card_id IS NULL;
------------------------------
question: Which district has highest active loan?
GT: SELECT T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.status IN ('C', 'D') GROUP BY T2.A3 ORDER BY SUM(T3.amount) DESC LIMIT 1
Pred: SELECT 
    d.A3 AS district_name,
    COUNT(l.loan_id) AS total_active_loans
FROM 
    loan l
JOIN 
    account a ON l.account_id = a.account_id
JOIN 
    district d ON a.district_id = d.district_id
WHERE 
    l.status IN ('C', 'D')
GROUP BY 
    d.district_id
ORDER BY 
    total_active_loans DESC
LIMIT 1;
------------------------------
question: What is the average loan amount by male borrowers?
GT: SELECT AVG(T4.amount) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'M'
Pred: SELECT AVG(l.amount) AS average_loan_amount
FROM client c
JOIN account a ON c.client_id = a.account_id
JOIN loan l ON a.account_id = l.account_id
WHERE c.gender = 'M';
------------------------------
question: In 1996, which districts have the highest unemployment rate? List their branch location and district name.
GT: SELECT district_id, A2 FROM district ORDER BY A13 DESC LIMIT 1
Pred: SELECT d.district_id, d.A2 AS district_name
FROM district d
WHERE d.A13 IS NOT NULL
ORDER BY d.A13 DESC;
------------------------------
question: After making a credit card withdrawal, how many account/s with monthly issuance has a negative balance?
GT: SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.balance < 0 AND T1.operation = 'VYBER KARTOU' AND T2.frequency = 'POPLATEK MESICNE'
Pred: SELECT 
    COUNT(DISTINCT t.account_id) AS total_accounts
FROM 
    trans t
JOIN 
    account a ON t.account_id = a.account_id
WHERE 
    t.operation = 'VYBER KARTOU' 
    AND a.frequency = 'POPLATEK MESICNE' 
    AND t.balance < 0;
------------------------------
question: Between 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved?
GT: SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.frequency = 'POPLATEK MESICNE' AND T2.amount >= 250000
Pred: SELECT COUNT(l.loan_id) AS total_loans
FROM loan l
JOIN account a ON l.account_id = a.account_id
WHERE l.amount >= 250000
  AND a.frequency = 'POPLATEK MESICNE'
  AND l.status = 'A'
  AND l.date BETWEEN '1995-01-01' AND '1997-12-31';
------------------------------
question: How many accounts have running contracts in Branch location 1?
GT: SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T1.district_id = 1 AND (T3.status = 'C' OR T3.status = 'D')
Pred: SELECT COUNT(DISTINCT a.account_id) AS total_accounts
FROM account a
JOIN loan l ON a.account_id = l.account_id
WHERE a.district_id = 1
  AND l.status = 'C';
------------------------------
question: In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?
GT: SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A15 = (SELECT T3.A15 FROM district AS T3 ORDER BY T3.A15 DESC LIMIT 1, 1)
Pred: SELECT district_id
FROM district
ORDER BY A15 DESC
LIMIT 1 OFFSET 1
------------------------------
question: Which districts have transactions greater than USS$10,000 in 1997?
GT: SELECT T1.district_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date) = '1997' GROUP BY T1.district_id HAVING SUM(T3.amount) > 10000
Pred: SELECT DISTINCT d.A2 AS district_name
FROM trans t
JOIN account a ON t.account_id = a.account_id
JOIN district d ON a.district_id = d.district_id
WHERE t.date BETWEEN '1997-01-01' AND '1997-12-31'
  AND t.amount > 10000;
------------------------------
question: Which accounts placed orders for household payment in Pisek?
GT: SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.k_symbol = 'SIPO' AND T3.A2 = 'Pisek'
Pred: SELECT a.account_id
FROM account a
INNER JOIN order o ON a.account_id = o.account_id
INNER JOIN district d ON a.district_id = d.district_id
WHERE o.k_symbol = 'SIPO' AND d.A2 = 'Pisek';
------------------------------
question: How much is the average amount in credit card made by account holders in a month, in year 2021?
GT: SELECT AVG(T4.amount) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE STRFTIME('%Y', T4.date) = '1998' AND T4.operation = 'VYBER KARTOU'
Pred: SELECT AVG(amount) AS average_amount
FROM trans
WHERE operation = 'VYBER KARTOU'
  AND strftime('%Y', date) = '2021';
------------------------------
question: Who are the account holder identification numbers whose who have transactions on the credit card with the amount is less than the average, in 1998?
GT: SELECT T1.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1998' AND T1.operation = 'VYBER KARTOU' AND T1.amount < (SELECT AVG(amount) FROM trans WHERE STRFTIME('%Y', date) = '1998')
Pred: SELECT c.client_id
FROM trans t
JOIN account a ON t.account_id = a.account_id
JOIN client c ON a.client_id = c.client_id
WHERE strftime('%Y', t.date) = '1998'
  AND t.operation = 'VYBER KARTOU'
  AND t.amount < (
    SELECT AVG(amount)
    FROM trans
    WHERE strftime('%Y', date) = '1998'
  );
------------------------------
question: Who are the female account holders who own credit cards and also have loans?
GT: SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T5 ON T2.account_id = T5.account_id INNER JOIN loan AS T3 ON T5.account_id = T3.account_id INNER JOIN card AS T4 ON T2.disp_id = T4.disp_id WHERE T1.gender = 'F'
Pred: SELECT DISTINCT c.client_id
FROM client c
JOIN card ca ON c.client_id = ca.disp_id
JOIN account a ON c.client_id = a.account_id
JOIN loan l ON a.account_id = l.account_id
WHERE c.gender = 'F';
------------------------------
question: How many female clients' accounts are in the region of South Bohemia?
GT: SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A3 = 'south Bohemia'
Pred: SELECT COUNT(c.client_id) AS female_clients
FROM client c
INNER JOIN account a ON c.client_id = a.account_id
INNER JOIN district d ON a.district_id = d.district_id
WHERE c.gender = 'F' AND d.A3 = 'south Bohemia';
------------------------------
question: Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000.
GT: SELECT T3.type FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type != 'OWNER' AND T1.A11 BETWEEN 8000 AND 9000
Pred: SELECT 
    a.type AS account_type,
    d.A11 AS average_salary
FROM 
    account a
JOIN 
    client c ON a.district_id = c.district_id
JOIN 
    district d ON c.district_id = d.district_id
WHERE 
    a.type <> 'OWNER' AND
    d.A11 BETWEEN 8000 AND 9000;
------------------------------
question: How many accounts in North Bohemia has made a transaction with the partner's bank being AB?
GT: SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.bank = 'AB' AND T1.A3 = 'north Bohemia'
Pred: SELECT COUNT(DISTINCT a.account_id) AS total_accounts
FROM account a
JOIN trans t ON a.account_id = t.account_id
JOIN district d ON a.district_id = d.district_id
WHERE t.bank = 'AB' AND d.A3 = 'North Bohemia';
------------------------------
question: What is the average number of crimes committed in 1995 in regions where the number exceeds 4000 and the region has accounts that are opened starting from the year 1997?
GT: SELECT AVG(T1.A15) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) >= '1997' AND T1.A15 > 4000
Pred: SELECT 
    d.A3 AS region_name,
    AVG(d.A15) AS avg_crimes_1995
FROM 
    district d
JOIN 
    account a ON d.district_id = a.district_id
WHERE 
    d.A15 > 4000
    AND a.date >= '1997-01-01'
GROUP BY 
    d.A3;
------------------------------
question: How many 'classic' cards are eligible for loan?
GT: SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'classic' AND T2.type = 'OWNER'
Pred: SELECT COUNT(c.card_id) AS total_cards
FROM card c
INNER JOIN disp d ON c.disp_id = d.disp_id
INNER JOIN account a ON d.account_id = a.account_id
WHERE c.type = 'classic' AND d.type = 'OWNER' AND a.frequency = 'OWNER';
------------------------------
question: What is the district Id of the account that placed the order with the id 33333?
GT: SELECT T3.district_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.order_id = 33333
Pred: SELECT district_id 
FROM account 
WHERE account_id = (
    SELECT account_id 
    FROM order 
    WHERE order_id = 33333
);
------------------------------
question: List all the withdrawals in cash transactions that the client with the id 3356 makes.
GT: SELECT T4.trans_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 3356 AND T4.operation = 'VYBER'
Pred: SELECT trans.trans_id, trans.date, trans.type, trans.operation, trans.amount, trans.balance, trans.k_symbol, trans.bank, trans.account
FROM trans
JOIN account ON trans.account_id = account.account_id
JOIN client ON account.client_id = client.client_id
WHERE client.client_id = 3356 AND trans.operation = 'VYBER';
------------------------------
question: Which district has the most accounts with loan contracts finished with no problems?
GT: SELECT T1.A2 FROM District AS T1 INNER JOIN Account AS T2 ON T1.District_id = T2.District_id INNER JOIN Loan AS T3 ON T2.Account_id = T3.Account_id WHERE T3.status = 'A' GROUP BY T1.District_id ORDER BY COUNT(T2.Account_id) DESC LIMIT 1
Pred: SELECT d.district_id, COUNT(a.account_id) AS account_count
FROM district d
JOIN account a ON d.district_id = a.district_id
JOIN loan l ON a.account_id = l.account_id
WHERE l.status = 'A'
GROUP BY d.district_id
ORDER BY account_count DESC
LIMIT 1;
------------------------------
question: Who placed the order with the id 32423?
GT: SELECT T3.client_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T4 ON T4.account_id = T2.account_id  INNER JOIN client AS T3 ON T4.client_id = T3.client_id WHERE T1.order_id = 32423
Pred: SELECT c.client_id
FROM order o
JOIN account a ON o.account_id = a.account_id
JOIN client c ON a.client_id = c.client_id
WHERE o.order_id = 32423;
------------------------------
question: Please list all the transactions made by accounts from district 5.
GT: SELECT T3.trans_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.district_id = 5
Pred: SELECT t.*
FROM trans t
JOIN account a ON t.account_id = a.account_id
JOIN district d ON a.district_id = d.district_id
WHERE d.district_id = 5;
------------------------------
question: List all the clients' IDs whose junior credit cards were issued after 1996.
GT: SELECT T2.client_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'junior' AND T1.issued >= '1997-01-01'
Pred: SELECT c.client_id
FROM client c
JOIN card ca ON c.client_id = ca.disp_id
WHERE ca.type = 'junior' AND ca.issued >= '1997-01-01';
------------------------------
question: What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women?
GT: SELECT CAST(SUM(T2.gender = 'F') AS REAL) * 100 / COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 > 10000
Pred: SELECT 
    ROUND(
        CAST(SUM(CASE WHEN c.gender = 'F' THEN 1 ELSE 0 END) AS REAL) / 
        COUNT(c.client_id) * 100, 
        2
    ) AS percentage_female_clients
FROM 
    client c
JOIN 
    district d ON c.district_id = d.district_id
WHERE 
    d.A11 > 10000;
------------------------------
question: What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997?
GT: SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.gender = 'M' AND T3.type = 'OWNER'
Pred: WITH LoanAmounts1996 AS (
    SELECT SUM(l.amount) AS total_amount_1996
    FROM loan l
    JOIN account a ON l.account_id = a.account_id
    JOIN client c ON a.district_id = c.district_id
    WHERE c.gender = 'M' AND l.date BETWEEN '1996-01-01' AND '1996-12-31'
),
LoanAmounts1997 AS (
    SELECT SUM(l.amount) AS total_amount_1997
    FROM loan l
    JOIN account a ON l.account_id = a.account_id
    JOIN client c ON a.district_id = c.district_id
    WHERE c.gender = 'M' AND l.date BETWEEN '1997-01-01' AND '1997-12-31'
)
SELECT 
    (SELECT total_amount_1997 FROM LoanAmounts1997) - 
    (SELECT total_amount_1996 FROM LoanAmounts1996) AS amount_difference,
    (SELECT total_amount_1996 FROM LoanAmounts1996) AS total_amount_1996,
    (SELECT total_amount_1997 FROM LoanAmounts1997) AS total_amount_1997,
    ((SELECT total_amount_1997 FROM LoanAmounts1997) - 
     (SELECT total_amount_1996 FROM LoanAmounts1996)) / 
    (SELECT total_amount_1996 FROM LoanAmounts1996) * 100 AS growth_rate;
------------------------------
question: What was the difference in the number of crimes committed in East and North Bohemia in 1996?
GT: SELECT SUM(IIF(A3 = 'east Bohemia', A16, 0)) - SUM(IIF(A3 = 'north Bohemia', A16, 0)) FROM district
Pred: SELECT 
    SUM(CASE 
            WHEN A3 = 'north Bohemia' THEN A16 
            ELSE 0 
        END) - 
    SUM(CASE 
            WHEN A3 = 'east Bohemia' THEN A16 
            ELSE 0 
        END) AS difference_in_crimes
FROM 
    district;
------------------------------
question: How many owner and disponent dispositions are there from account number 1 to account number 10?
GT: SELECT SUM(type = 'OWNER') , SUM(type = 'DISPONENT') FROM disp WHERE account_id BETWEEN 1 AND 10
Pred: SELECT COUNT(*) AS total_dispositions
FROM disp
JOIN account ON disp.account_id = account.account_id
WHERE account.account_id BETWEEN 1 AND 10
  AND (disp.type = 'OWNER' OR disp.type = 'DISPONENT');
------------------------------
question: How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total?
GT: SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN (SELECT account_id, k_symbol, SUM(amount) AS total_amount FROM `order` GROUP BY account_id, k_symbol) AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.total_amount = 3539
Pred: SELECT 
    COUNT(CASE WHEN type = 'VYDAJ' THEN 1 END) AS count_of_withdrawals,
    SUM(CASE WHEN k_symbol = 'UVER' THEN amount ELSE 0 END) AS total_loan_amount
FROM 
    trans
WHERE 
    account_id = 3;
------------------------------
question: What is the amount of debt that client number 992 has, and how is this client doing with payments?
GT: SELECT T4.amount, T4.status FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 on T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 992
Pred: SELECT 
    SUM(l.amount) AS total_debt,
    CASE 
        WHEN l.status = 'A' THEN 'Paid Off'
        ELSE 'Overdue'
    END AS payment_status
FROM 
    client c
LEFT JOIN 
    disp d ON c.client_id = d.client_id
LEFT JOIN 
    account a ON d.account_id = a.account_id
LEFT JOIN 
    loan l ON a.account_id = l.account_id
WHERE 
    c.client_id = 992;
------------------------------
question: What is the sum that client number 4's account has following transaction 851? Who owns this account, a man or a woman?
GT: SELECT T4.balance, T1.gender FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id =T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 4 AND T4.trans_id = 851
Pred: SELECT 
    SUM(t.amount) AS total_amount,
    CASE 
        WHEN c.gender = 'M' THEN 'Man'
        WHEN c.gender = 'F' THEN 'Woman'
    END AS gender
FROM 
    trans t
JOIN 
    account a ON t.account_id = a.account_id
JOIN 
    client c ON a.district_id = c.client_id
WHERE 
    t.trans_id = 851
    AND c.client_id = 4;
------------------------------
question: How much, in total, did client number 617 pay for all of the transactions in 1998?
GT: SELECT SUM(T3.amount) FROM client AS T1 INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T2 ON T4.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date)= '1998' AND T1.client_id = 617
Pred: SELECT SUM(t.amount) AS total_amount
FROM client c
JOIN account a ON c.district_id = a.district_id
JOIN trans t ON a.account_id = t.account_id
WHERE c.client_id = 617
  AND strftime('%Y', t.date) = '1998';
------------------------------
question: Please provide a list of clients who were born between 1983 and 1987 and whose account branch is in East Bohemia, along with their IDs.
GT: SELECT T1.client_id, T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id and T4.account_id = T3.account_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.birth_date) BETWEEN '1983' AND '1987'
Pred: SELECT c.client_id
FROM client c
INNER JOIN district d ON c.district_id = d.district_id
WHERE c.birth_date BETWEEN '1983-01-01' AND '1987-12-31'
AND d.A3 LIKE '%East Bohemia%';
------------------------------
question: How many male customers who were born between 1974 and 1976 have made a payment on their home in excess of $4000?
GT: SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T4 ON T2.account_id = T4.account_id INNER JOIN client AS T3 ON T4.client_id = T3.client_id WHERE STRFTIME('%Y', T3.birth_date) BETWEEN '1974' AND '1976' AND T3.gender = 'M' AND T1.amount > 4000 AND T1.k_symbol = 'SIPO'
Pred: SELECT COUNT(DISTINCT c.client_id) AS male_clients
FROM client c
JOIN trans t ON c.client_id = t.account_id
JOIN order o ON t.account_id = o.account_id
WHERE c.gender = 'M'
  AND c.birth_date BETWEEN '1974-01-01' AND '1976-12-31'
  AND t.type = 'VYDAJ'
  AND t.k_symbol = 'SIPO'
  AND t.amount > 4000;
------------------------------
question: How many accounts in Beroun were opened after 1996?
GT: SELECT COUNT(account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.date) > '1996' AND T2.A2 = 'Beroun'
Pred: SELECT COUNT(a.account_id) AS total_accounts
FROM account a
JOIN district d ON a.district_id = d.district_id
WHERE d.A2 = 'Beroun' AND a.date > '1996-01-01';
------------------------------
question: What proportion of customers who have accounts at the Prague branch are female?
GT: SELECT CAST(SUM(T2.gender = 'F') AS REAL) / COUNT(T2.client_id) * 100 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'Prague'
Pred: SELECT 
    (CAST(COUNT(CASE WHEN c.gender = 'F' THEN 1 END) AS REAL) / COUNT(c.client_id)) * 100 AS percentage_female_clients
FROM 
    client c
JOIN 
    account a ON c.client_id = a.account_id
JOIN 
    district d ON a.district_id = d.district_id
WHERE 
    d.A3 LIKE '%Prague%';
------------------------------
question: What percentage of male clients request for weekly statements to be issued?
GT: SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T3 ON T1.district_id = T3.district_id INNER JOIN account AS T2 ON T2.district_id = T3.district_id INNER JOIN disp as T4 on T1.client_id = T4.client_id AND T2.account_id = T4.account_id WHERE T2.frequency = 'POPLATEK TYDNE'
Pred: SELECT 
    (CAST(COUNT(CASE WHEN c.gender = 'M' THEN 1 END) AS REAL) / COUNT(a.account_id)) * 100 AS percentage
FROM 
    client c
JOIN 
    account a ON c.client_id = a.account_id
WHERE 
    a.frequency = 'POPLATEK TYDNE';
------------------------------
question: Among the accounts who have loan validity more than 24 months, list out the accounts that have the lowest approved amount and have account opening date before 1997.
GT: SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration > 24 AND STRFTIME('%Y', T2.date) < '1997' ORDER BY T1.amount ASC LIMIT 1
Pred: SELECT 
    a.account_id
FROM 
    account a
INNER JOIN 
    loan l ON a.account_id = l.account_id
WHERE 
    l.duration > 24 
    AND l.status = 'A' 
    AND a.date < '1997-01-01'
ORDER BY 
    l.amount ASC
LIMIT 1;
------------------------------
question: Name the account numbers of female clients who are oldest and have lowest average salary?
GT: SELECT T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id AND T4.account_id = T3.account_id  WHERE T1.gender = 'F' ORDER BY T1.birth_date ASC, T2.A11 ASC LIMIT 1
Pred: WITH oldest_female_client AS (
    SELECT client_id
    FROM client
    WHERE gender = 'F'
    ORDER BY birth_date ASC
    LIMIT 1
),
lowest_salary_female_client AS (
    SELECT c.client_id
    FROM client c
    JOIN district d ON c.district_id = d.district_id
    WHERE c.gender = 'F'
    ORDER BY d.A11 ASC
    LIMIT 1
)
SELECT a.account_id
FROM account a
JOIN client c ON a.district_id = c.district_id
WHERE c.client_id IN (SELECT client_id FROM oldest_female_client)
AND c.client_id IN (SELECT client_id FROM lowest_salary_female_client);
------------------------------
question: What is the average amount of loan which are still on running contract with statement issuance after each transaction?
GT: SELECT AVG(T2.amount) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.status IN ('C', 'D') AND T1.frequency = 'POPLATEK PO OBRATU'
Pred: SELECT AVG(l.amount) AS average_loan_amount
FROM loan l
JOIN account a ON l.account_id = a.account_id
JOIN trans t ON l.account_id = t.account_id
WHERE l.status IN ('C', 'D') AND a.frequency = 'POPLATEK PO OBRATU';
------------------------------
question: List all ID and district for clients that can only have the right to issue permanent orders or apply for loans.
GT: SELECT T3.client_id, T2.district_id, T2.A2 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE T3.type = 'OWNER'
Pred: SELECT c.client_id, c.district_id
FROM client c
JOIN disp d ON c.client_id = d.client_id
JOIN account a ON d.account_id = a.account_id
WHERE d.type = 'OWNER';
------------------------------
question: Provide the IDs and age of the client with high level credit card, which is eligible for loans.
GT: SELECT T1.client_id, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T3.birth_date) FROM disp AS T1 INNER JOIN card AS T2 ON T2.disp_id = T1.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.type = 'gold' AND T1.type = 'OWNER'
Pred: SELECT 
    client.client_id, 
    strftime('%Y', 'now') - strftime('%Y', client.birth_date) AS age
FROM 
    client
INNER JOIN 
    card ON client.client_id = card.disp_id
INNER JOIN 
    disp ON client.client_id = disp.client_id
WHERE 
    card.type = 'gold' 
    AND disp.type = 'OWNER';
------------------------------
question: In the non-carcinogenic molecules, how many contain chlorine atoms?
GT: SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'cl' AND T1.label = '-'
Pred: SELECT COUNT(*)
FROM molecule
JOIN atom ON molecule.molecule_id = atom.molecule_id
WHERE molecule.label = '-' AND atom.element = 'cl';
------------------------------
question: Calculate the average number of oxygen atoms in single-bonded molecules.
GT: SELECT AVG(oxygen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS oxygen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.bond_type = '-' AND T1.element = 'o'  GROUP BY T1.molecule_id) AS oxygen_counts
Pred: SELECT AVG(CASE WHEN a.element = 'o' THEN 1 ELSE 0 END) AS average_oxygen_atoms
FROM molecule m
JOIN atom a ON m.molecule_id = a.molecule_id
JOIN bond b ON m.molecule_id = b.molecule_id
WHERE b.bond_type = '-';
------------------------------
question: On average how many carcinogenic molecules are single bonded?
GT: SELECT AVG(single_bond_count) FROM (SELECT T3.molecule_id, COUNT(T1.bond_type) AS single_bond_count FROM bond AS T1  INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T3.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T3.label = '+' GROUP BY T3.molecule_id) AS subquery
Pred: SELECT AVG(SUM(CASE WHEN b.bond_type = '-' THEN 1 ELSE 0 END)) AS average_single_bonded
FROM molecule m
JOIN bond b ON m.molecule_id = b.molecule_id
WHERE m.label = '+';
------------------------------
question: In the molecule containing sodium atoms, how many are non-carcinogenic?
GT: SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-'
Pred: SELECT COUNT(a.atom_id) AS num_non_carcinogenic_sodium_atoms
FROM molecule m
JOIN atom a ON m.molecule_id = a.molecule_id
WHERE m.label = '-' AND a.element = 'na';
------------------------------
question: What is the percentage of carbon in double-bond molecules?
GT: SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'c' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='
Pred: WITH DoubleBondAtoms AS (
    SELECT a.molecule_id, a.element
    FROM atom a
    JOIN bond b ON a.molecule_id = b.molecule_id
    WHERE b.bond_type = '='
)
SELECT 
    CAST(SUM(CASE WHEN element = 'c' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(atom_id) AS percentage
FROM DoubleBondAtoms;
------------------------------
question: Identify by their ID the molecules in which there is carbon.
GT: SELECT T.molecule_id FROM atom AS T WHERE T.element = 'c'
Pred: SELECT DISTINCT m.molecule_id
FROM molecule m
JOIN atom a ON m.molecule_id = a.molecule_id
WHERE a.element = 'c';
------------------------------
question: What elements are in a double type bond?
GT: SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = '='
Pred: SELECT DISTINCT a.element
FROM atom a
INNER JOIN bond b ON a.molecule_id = b.molecule_id AND a.molecule_id = b.molecule_id
WHERE b.bond_type = '=';
------------------------------
question: What atoms are connected in single type bonds?
GT: SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'
Pred: SELECT DISTINCT a1.atom_id
FROM atom a1
JOIN connected c ON a1.atom_id = c.atom_id
JOIN bond b ON c.bond_id = b.bond_id
WHERE b.bond_type = '-';
------------------------------
question: Indicate which atoms are connected in non-carcinogenic type molecules.
GT: SELECT DISTINCT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.label = '-'
Pred: SELECT c.atom_id, c.atom_id2
FROM connected c
JOIN atom a1 ON c.atom_id = a1.atom_id
JOIN molecule m ON a1.molecule_id = m.molecule_id
JOIN atom a2 ON c.atom_id2 = a2.atom_id
WHERE m.label = '-';
------------------------------
question: Which element is the least numerous in non-carcinogenic molecules?
GT: SELECT T.element FROM (SELECT T1.element, COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(DISTINCT T1.molecule_id) ASC LIMIT 1) t
Pred: SELECT *
   FROM molecule
   WHERE label = '-';
------------------------------
question: What type of label is not on molecules with atoms with tin?
GT: SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element != 'sn'
Pred: SELECT label 
FROM molecule 
WHERE label NOT IN (
    SELECT m.label 
    FROM molecule m 
    JOIN atom a ON m.molecule_id = a.molecule_id 
    WHERE a.element = 'sn'
);
------------------------------
question: How many atoms with iodine and with sulfur type elements are there in single bond molecules?
GT: SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums , COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'
Pred: SELECT COUNT(DISTINCT a.atom_id) AS total_atoms
FROM atom a
JOIN bond b ON a.molecule_id = b.molecule_id
WHERE a.element IN ('i', 's') AND b.bond_type = '-';
------------------------------
question: Identify all the atoms that are connected to the atoms of the TR181 molecule.
GT: SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T1.molecule_id = 'TR181'
Pred: SELECT a2.atom_id
FROM connected c
JOIN atom a1 ON c.atom_id = a1.atom_id
JOIN atom a2 ON c.atom_id2 = a2.atom_id
WHERE a1.atom_id IN (
    SELECT a1.atom_id
    FROM atom a1
    JOIN molecule m ON a1.molecule_id = m.molecule_id
    WHERE m.molecule_id = 'TR181'
)
UNION
SELECT a1.atom_id
FROM connected c
JOIN atom a1 ON c.atom_id = a1.atom_id
JOIN atom a2 ON c.atom_id2 = a2.atom_id
WHERE a2.atom_id IN (
    SELECT a1.atom_id
    FROM atom a1
    JOIN molecule m ON a1.molecule_id = m.molecule_id
    WHERE m.molecule_id = 'TR181'
);
------------------------------
question: What percentage of carcinogenic-type molecules does not contain fluorine?
GT: SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element <> 'f' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
Pred: WITH molecule_atom_count AS (
    SELECT 
        m.molecule_id,
        COUNT(DISTINCT a.atom_id) AS total_atoms,
        SUM(CASE WHEN a.element = 'f' THEN 1 ELSE 0 END) AS fluorine_atoms
    FROM 
        molecule m
    JOIN 
        atom a ON m.molecule_id = a.molecule_id
    WHERE 
        m.label = '+'
    GROUP BY 
        m.molecule_id
)
SELECT 
    100 - (SUM(fluorine_atoms) * 100.0 / SUM(total_atoms)) AS percentage_no_fluorine
FROM 
    molecule_atom_count;
------------------------------
question: What is the percentage of carcinogenic molecules in triple type bonds?
GT: SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#'
Pred: SELECT 
    CAST(SUM(CASE WHEN b.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(b.bond_id) AS percent
FROM 
    molecule m
JOIN 
    bond b ON m.molecule_id = b.molecule_id
WHERE 
    m.label = '+';
------------------------------
question: Please list top three elements of the toxicology of the molecule TR000 in alphabetical order.
GT: SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR000' ORDER BY T.element LIMIT 3
Pred: SELECT a.element
FROM molecule m
JOIN atom a ON m.molecule_id = a.molecule_id
WHERE m.molecule_id = 'TR000'
ORDER BY a.element ASC
LIMIT 3;
------------------------------
question: What are the atoms that are bonded in the molecule TR001 with the bond ID of TR001_2_6?
GT: SELECT SUBSTR(T.bond_id, 1, 7) AS atom_id1 , T.molecule_id || SUBSTR(T.bond_id, 8, 2) AS atom_id2 FROM bond AS T WHERE T.molecule_id = 'TR001' AND T.bond_id = 'TR001_2_6'
Pred: SELECT c.atom_id, c.atom_id2
FROM molecule m
JOIN bond b ON m.molecule_id = b.molecule_id
JOIN connected c ON b.bond_id = c.bond_id
WHERE m.molecule_id = 'TR001' AND b.bond_id = 'TR001_2_6';
------------------------------
question: What are the atom IDs of the bond TR000_2_5?
GT: SELECT T.atom_id FROM connected AS T WHERE T.bond_id = 'TR000_2_5'
Pred: SELECT atom_id, atom_id2
FROM connected
WHERE bond_id = 'TR000_2_5';
------------------------------
question: Please list top five molecules that have double bonds in alphabetical order.
GT: SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '=' ORDER BY T.molecule_id LIMIT 5
Pred: SELECT m.label
FROM molecule m
INNER JOIN bond b ON m.molecule_id = b.molecule_id
WHERE b.bond_type = ' = '
ORDER BY m.label
LIMIT 5;
------------------------------
question: Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic?
GT: SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T1.molecule_id) FROM bond AS T1  WHERE T1.molecule_id = 'TR010' GROUP BY T1.bond_type ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1 ) AS T
Pred: SELECT 
    (SELECT bond_type 
     FROM bond 
     WHERE molecule_id = 'TR010' 
     GROUP BY bond_type 
     ORDER BY COUNT(bond_type) DESC 
     LIMIT 1) AS majority_bond_type,
    CASE 
        WHEN label = '+' THEN 'Carcinogenic'
        ELSE 'Non-Carcinogenic'
    END AS is_carcinogenic
FROM 
    molecule 
WHERE 
    molecule_id = 'TR010';
------------------------------
question: Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order.
GT: SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-' ORDER BY T2.molecule_id LIMIT 3
Pred: SELECT 
    m.molecule_id
FROM 
    molecule m
JOIN 
    bond b ON m.molecule_id = b.molecule_id
WHERE 
    m.label = '-' AND b.bond_type = '-'
ORDER BY 
    m.molecule_id
LIMIT 3;
------------------------------
question: Please list top two bonds that happened with the molecule TR006 in alphabetical order.
GT: SELECT DISTINCT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.molecule_id = 'TR006' ORDER BY T2.bond_id LIMIT 2
Pred: SELECT 
    bond_type
FROM 
    bond
WHERE 
    molecule_id = 'TR006'
ORDER BY 
    bond_type ASC
LIMIT 2;
------------------------------
question: How many bonds which involved atom 12 does molecule TR009 have?
GT: SELECT COUNT(T2.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR009' AND T2.atom_id = T1.molecule_id || '_1' AND T2.atom_id2 = T1.molecule_id || '_2'
Pred: SELECT COUNT(DISTINCT c.bond_id) AS total_bonds
FROM connected c
WHERE c.atom_id = 'TR009_12' OR c.atom_id2 = 'TR009_12';
------------------------------
question: Which molecule does the atom TR001_10 belong to? Please state whether this molecule is carcinogenic or not.
GT: SELECT T2.molecule_id , IIF(T2.label = '+', 'YES', 'NO') AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'
Pred: SELECT 
    m.molecule_id,
    CASE 
        WHEN m.label = '+' THEN 'Carcinogenic'
        ELSE 'Non-Carcinogenic'
    END AS Carcinogenicity
FROM 
    atom a
JOIN 
    molecule m ON a.molecule_id = m.molecule_id
WHERE 
    a.atom_id = 'TR001_10';
------------------------------
question: How many molecules have a triple bond type?
GT: SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.bond_type = '#'
Pred: SELECT COUNT(DISTINCT m.molecule_id) AS num_molecules
FROM molecule m
INNER JOIN bond b ON m.molecule_id = b.molecule_id
WHERE b.bond_type = '#';
------------------------------
question: How many connections does the atom 19 have?
GT: SELECT COUNT(T.bond_id) FROM connected AS T WHERE SUBSTR(T.atom_id, -2) = '19'
Pred: SELECT COUNT(bond_id) AS connection_count
FROM connected
WHERE atom_id = 'TR_19' OR atom_id2 = 'TR_19';
------------------------------
question: What are the bonds that have phosphorus and nitrogen as their atom elements?
GT: SELECT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id IN ( SELECT T3.bond_id FROM connected AS T3 INNER JOIN atom AS T4 ON T3.atom_id = T4.atom_id WHERE T4.element = 'p' ) AND T1.element = 'n'
Pred: SELECT b.bond_id
FROM bond b
JOIN atom b1 ON b.molecule_id = b1.molecule_id AND b.bond_id = b1.atom_id
JOIN atom b2 ON b.molecule_id = b2.molecule_id AND b.bond_id = b2.atom_id
WHERE (b1.element = 'p' AND b2.element = 'n') OR (b1.element = 'n' AND b2.element = 'p');
------------------------------
question: Is the molecule with the most double bonds carcinogenic?
GT: SELECT T1.label FROM molecule AS T1 INNER JOIN ( SELECT T.molecule_id, COUNT(T.bond_type) FROM bond AS T WHERE T.bond_type = '=' GROUP BY T.molecule_id ORDER BY COUNT(T.bond_type) DESC LIMIT 1 ) AS T2 ON T1.molecule_id = T2.molecule_id
Pred: WITH DoubleBondsCTE AS (
    SELECT 
        b.molecule_id,
        COUNT(b.bond_id) AS double_bond_count
    FROM 
        bond b
    WHERE 
        b.bond_type = ' = ' 
    GROUP BY 
        b.molecule_id
),
MaxDoubleBondsCTE AS (
    SELECT 
        db.molecule_id,
        db.double_bond_count
    FROM 
        DoubleBondsCTE db
    WHERE 
        db.double_bond_count = (SELECT MAX(double_bond_count) FROM DoubleBondsCTE)
)
SELECT 
    m.label
FROM 
    MaxDoubleBondsCTE mdc
JOIN 
    molecule m ON mdc.molecule_id = m.molecule_id
WHERE 
    m.label = '+';
------------------------------
question: What is the average number of bonds the atoms with the element iodine have?
GT: SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'
Pred: WITH AtomBonds AS (
    SELECT 
        a.atom_id,
        COUNT(b.bond_id) AS bond_count
    FROM 
        atom a
    JOIN 
        bond b ON a.molecule_id = b.molecule_id
    WHERE 
        a.element = 'i'
    GROUP BY 
        a.atom_id
)
SELECT 
    AVG(bond_count) AS average_bond_count
FROM 
    AtomBonds;
------------------------------
question: List the bond type and the bond ID of the atom 45.
GT: SELECT T1.bond_type, T1.bond_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE SUBSTR(T2.atom_id, 7, 2) = '45'
Pred: SELECT b.bond_type, b.bond_id
FROM bond b
JOIN atom a ON b.molecule_id = a.molecule_id
WHERE SUBSTR(a.atom_id, 7, 2) + 0 = 45
AND b.bond_type IN (' = ', '-', '#');
------------------------------
question: List all the elements of atoms that can not bond with any other atoms.
GT: SELECT DISTINCT T.element FROM atom AS T WHERE T.element NOT IN ( SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id )
Pred: SELECT a.element
FROM atom a
WHERE a.atom_id NOT IN (SELECT c.atom_id FROM connected c);
------------------------------
question: What are the atoms of the triple bond with the molecule "TR041"?
GT: SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T3.molecule_id = 'TR041'
Pred: SELECT DISTINCT a.atom_id
FROM molecule m
JOIN bond b ON m.molecule_id = b.molecule_id
JOIN atom a ON m.molecule_id = a.molecule_id
WHERE m.molecule_id = 'TR041' AND b.bond_type = '#';
------------------------------
question: What are the elements of the atoms of TR144_8_19?
GT: SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR144_8_19'
Pred: SELECT a1.element, a2.element
FROM bond b
JOIN connected c ON b.bond_id = c.bond_id
JOIN atom a1 ON c.atom_id = a1.atom_id
JOIN atom a2 ON c.atom_id2 = a2.atom_id
WHERE b.bond_id = 'TR144_8_19';
------------------------------
question: Of all the carcinogenic molecules, which one has the most double bonds?
GT: SELECT T.molecule_id FROM ( SELECT T3.molecule_id, COUNT(T1.bond_type) FROM bond AS T1 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '+' AND T1.bond_type = '=' GROUP BY T3.molecule_id ORDER BY COUNT(T1.bond_type) DESC LIMIT 1 ) AS T
Pred: SELECT 
    m.molecule_id,
    m.label,
    COUNT(b.bond_id) AS double_bond_count
FROM 
    molecule m
JOIN 
    bond b ON m.molecule_id = b.molecule_id
WHERE 
    m.label = '+' AND b.bond_type = ' = '
GROUP BY 
    m.molecule_id, m.label
ORDER BY 
    double_bond_count DESC
LIMIT 1;
------------------------------
question: What is the least common element of all carcinogenic molecules?
GT: SELECT T.element FROM ( SELECT T2.element, COUNT(DISTINCT T2.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' GROUP BY T2.element ORDER BY COUNT(DISTINCT T2.molecule_id) LIMIT 1 ) t
Pred: WITH CarcinogenicMolecules AS (
    SELECT m.molecule_id, a.element
    FROM molecule m
    INNER JOIN atom a ON m.molecule_id = a.molecule_id
    WHERE m.label = '+'
),
ElementCounts AS (
    SELECT element, COUNT(*) AS element_count
    FROM CarcinogenicMolecules
    GROUP BY element
)
SELECT element
FROM ElementCounts
WHERE element_count = (SELECT MIN(element_count) FROM ElementCounts);
------------------------------
question: What are the atoms that can bond with the atom that has the element lead?
GT: SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'pb'
Pred: SELECT atom_id2
FROM connected
WHERE atom_id = (
    SELECT atom_id
    FROM atom
    WHERE element = 'pb'
);
------------------------------
question: List the elements of all the triple bonds.
GT: SELECT DISTINCT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '#'
Pred: SELECT DISTINCT a1.element, a2.element
FROM atom a1
JOIN connected c ON a1.atom_id = c.atom_id
JOIN bond b ON c.bond_id = b.bond_id
WHERE b.bond_type = '#';
------------------------------
question: What percentage of bonds have the most common combination of atoms' elements?
GT: SELECT CAST((SELECT COUNT(T1.atom_id) FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id GROUP BY T2.bond_type ORDER BY COUNT(T2.bond_id) DESC LIMIT 1 ) AS REAL) * 100 / ( SELECT COUNT(atom_id) FROM connected )
Pred: WITH MostCommonAtoms AS (
    SELECT a1.element, a2.element, COUNT(*) AS count
    FROM atom a1
    JOIN atom a2 ON a1.molecule_id = a2.molecule_id AND a1.atom_id < a2.atom_id
    GROUP BY a1.element, a2.element
    ORDER BY count DESC
    LIMIT 1
),
TotalBonds AS (
    SELECT COUNT(*) AS total_bonds
    FROM bond
),
BondsMostCommonAtoms AS (
    SELECT COUNT(*) AS most_common_bonds
    FROM bond b
    JOIN MostCommonAtoms mca ON b.molecule_id IN (
        SELECT a.molecule_id
        FROM atom a
        WHERE a.element = mca.element
    )
)
SELECT 
    (CAST(bmca.most_common_bonds AS REAL) / tb.total_bonds) * 100 AS percentage
FROM BondsMostCommonAtoms bmca, TotalBonds tb;
------------------------------
question: What are the bond type for atoms with element Tin?
GT: SELECT DISTINCT T3.bond_type FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T1.element = 'sn'
Pred: SELECT b.bond_type
FROM atom a
INNER JOIN bond b ON a.molecule_id = b.molecule_id
WHERE a.element = 'sn';
------------------------------
question: What is the composition of element chlorine in percentage among the single bond molecules?
GT: SELECT CAST(COUNT(CASE WHEN T.element = 'cl' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id) FROM ( SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T
Pred: WITH SingleBondMolecules AS (
    SELECT 
        b.molecule_id
    FROM 
        bond b
    WHERE 
        b.bond_type = '-'
    GROUP BY 
        b.molecule_id
    HAVING 
        COUNT(DISTINCT b.bond_type) = 1
),
ChlorineAtoms AS (
    SELECT 
        a.molecule_id,
        COUNT(CASE WHEN a.element = 'cl' THEN 1 END) AS chlorine_count
    FROM 
        atom a
    INNER JOIN 
        SingleBondMolecules sbm ON a.molecule_id = sbm.molecule_id
    GROUP BY 
        a.molecule_id
),
TotalAtoms AS (
    SELECT 
        a.molecule_id,
        COUNT(a.atom_id) AS total_count
    FROM 
        atom a
    INNER JOIN 
        SingleBondMolecules sbm ON a.molecule_id = sbm.molecule_id
    GROUP BY 
        a.molecule_id
)
SELECT 
    AVG(CAST(ca.chlorine_count AS REAL) / ta.total_count) * 100 AS percent
FROM 
    ChlorineAtoms ca
INNER JOIN 
    TotalAtoms ta ON ca.molecule_id = ta.molecule_id;
------------------------------
question: What are the labels for TR000, TR001 and TR002?
GT: SELECT molecule_id, T.label FROM molecule AS T WHERE T.molecule_id IN ('TR000', 'TR001', 'TR002')
Pred: SELECT label
FROM molecule
WHERE molecule_id IN ('TR000', 'TR001', 'TR002');
------------------------------
question: List down the bond type for molecules from molecule id TR000 to TR050.
GT: SELECT T2.molecule_id, T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id BETWEEN 'TR000' AND 'TR050'
Pred: SELECT 
    bond_type
FROM 
    bond
WHERE 
    molecule_id BETWEEN 'TR000' AND 'TR050'
ORDER BY 
    molecule_id;
------------------------------
question: How many bond id have element iodine?
GT: SELECT COUNT(T3.bond_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.element = 'i'
Pred: SELECT COUNT(b.bond_id) AS num_bonds
FROM bond b
JOIN connected c ON b.bond_id = c.bond_id
JOIN atom a ON c.atom_id = a.atom_id
WHERE a.element = 'i';
------------------------------
question: Does bond id TR001_1_8 have both element of chlorine and carbon?
GT: SELECT T2.bond_id, T2.atom_id2, T1.element AS flag_have_CaCl FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T2.bond_id = 'TR001_1_8' AND (T1.element = 'c1' OR T1.element = 'c')
Pred: SELECT c.bond_id
FROM connected c
JOIN atom a1 ON c.atom_id = a1.atom_id
JOIN atom a2 ON c.atom_id2 = a2.atom_id
WHERE c.bond_id = 'TR001_1_8'
GROUP BY c.bond_id
HAVING 'cl' IN (a1.element, a2.element) AND 'c' IN (a1.element, a2.element);
------------------------------
question: What is the percentage of element chlorine in carcinogenic molecules?
GT: SELECT CAST(COUNT( CASE WHEN T1.element = 'cl' THEN T1.element ELSE NULL END) AS REAL) * 100 / COUNT(T1.element) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
Pred: SELECT 
    ROUND(CAST(SUM(CASE WHEN a.element = 'cl' THEN 1 ELSE 0 END) AS REAL) / COUNT(a.element) * 100, 2) AS percentage
FROM 
    molecule m
JOIN 
    atom a ON m.molecule_id = a.molecule_id
WHERE 
    m.label = '+';
------------------------------
question: Give me the molecule ID of the double bond type.
GT: SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '='
Pred: SELECT molecule_id
FROM bond
WHERE bond_type = ' = ';
------------------------------
question: How many of the single bond type molecules are non-carcinogenic?
GT: SELECT COUNT(DISTINCT T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-'
Pred: SELECT COUNT(*) 
FROM molecule m
JOIN bond b ON m.molecule_id = b.molecule_id
WHERE m.label = '-' AND b.bond_type = '-';
------------------------------
question: Tally the toxicology element of the 4th atom of each molecule that was carcinogenic.
GT: SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, -1) = '4' AND LENGTH(T1.atom_id) = 7
Pred: SELECT 
    SUBSTR(a.atom_id, 7, 1) AS fourth_atom,
    COUNT(*) AS count_fourth_atom
FROM 
    molecule m
JOIN 
    atom a ON m.molecule_id = a.molecule_id
WHERE 
    m.label = '+'
GROUP BY 
    SUBSTR(a.atom_id, 7, 1)
ORDER BY 
    count_fourth_atom DESC;
------------------------------
question: What is the ratio of Hydrogen elements in molecule ID TR006? List the ratio with its label.
GT: WITH SubQuery AS (SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006') SELECT CAST(COUNT(CASE WHEN element = 'h' THEN atom_id ELSE NULL END) AS REAL) / (CASE WHEN COUNT(atom_id) = 0 THEN NULL ELSE COUNT(atom_id) END) AS ratio, label FROM SubQuery GROUP BY label
Pred: SELECT 
    m.label,
    CAST(SUM(CASE WHEN a.element = 'h' THEN 1 ELSE 0 END) AS REAL) / COUNT(a.element) AS ratio
FROM 
    atom a
JOIN 
    molecule m ON a.molecule_id = m.molecule_id
WHERE 
    a.molecule_id = 'TR006'
GROUP BY 
    m.label;
------------------------------
question: Determine the bond type that is formed in the chemical compound containing element Carbon.
GT: SELECT DISTINCT T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c'
Pred: SELECT b.bond_type, COUNT(*) AS count
FROM molecule m
JOIN atom a ON m.molecule_id = a.molecule_id
JOIN bond b ON m.molecule_id = b.molecule_id
WHERE a.element = 'c'
GROUP BY b.bond_type
ORDER BY count DESC;
------------------------------
question: Name chemical elements that form a bond TR001_10_11.
GT: SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_10_11'
Pred: SELECT a1.element AS element1, a2.element AS element2
FROM atom a1
JOIN atom a2 ON a1.molecule_id = a2.molecule_id
JOIN bond b ON a1.molecule_id = b.molecule_id
WHERE b.bond_id = 'TR001_10_11'
AND a1.atom_id = '10'
AND a2.atom_id = '11';
------------------------------
question: Among all chemical compounds identified in the database, what percent of compounds form a triple-bond.
GT: SELECT CAST(COUNT(CASE WHEN T.bond_type = '#' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T
Pred: SELECT 
    (COUNT(DISTINCT CASE WHEN b.bond_type = '#' THEN m.molecule_id END) * 100.0 / COUNT(DISTINCT m.molecule_id)) AS percentage_of_triple_bonded_molecules
FROM 
    molecule m
JOIN 
    bond b ON m.molecule_id = b.molecule_id;
------------------------------
question: Among all chemical compounds that contain molecule TR047, identify the percent that form a double-bond.
GT: SELECT CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T WHERE T.molecule_id = 'TR047'
Pred: SELECT 
    CAST(SUM(CASE WHEN b.bond_type = ' = ' THEN 1 ELSE 0 END) AS REAL) / COUNT(b.bond_id) AS percent
FROM 
    bond b
WHERE 
    b.molecule_id = 'TR047';
------------------------------
question: Identify whether the molecule that contains atom TR001_1 is carcinogenic.
GT: SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_1'
Pred: SELECT 
    CASE 
        WHEN m.label = '+' THEN 'Carcinogenic'
        ELSE 'Non-Carcinogenic'
    END AS result
FROM 
    molecule m
WHERE 
    m.molecule_id = (
        SELECT 
            a.molecule_id 
        FROM 
            atom a 
        WHERE 
            a.atom_id = 'TR001_1'
    );
------------------------------
question: Is molecule TR151 carcinogenic?
GT: SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR151'
Pred: SELECT 
    CASE 
        WHEN m.label = '+' THEN 'Yes'
        ELSE 'No'
    END AS is_carcinogenic
FROM 
    molecule m
WHERE 
    m.molecule_id = 'TR151';
------------------------------
question: Identify the atoms belong to the molecule with ID between TR010 to TR050 that contain the element carbon.
GT: SELECT T.atom_id FROM atom AS T WHERE T.molecule_id BETWEEN 'TR010' AND 'TR050' AND T.element = 'c'
Pred: SELECT a.atom_id
FROM atom a
JOIN molecule m ON a.molecule_id = m.molecule_id
WHERE a.element = 'c'
  AND SUBSTR(m.molecule_id, 3, 3) >= '10'
  AND SUBSTR(m.molecule_id, 3, 3) <= '50';
------------------------------
question: Which bond ids are double-bond with carcinogenic compound?
GT: SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.bond_type = '='
Pred: SELECT b.bond_id
FROM molecule m
JOIN bond b ON m.molecule_id = b.molecule_id
WHERE m.label = '+' AND b.bond_type = ' = ';
------------------------------
question: Indicate the molecule id is belonging to the TR000_1_2 bond that has the first atom named TR000_1.
GT: SELECT T2.molecule_id, T2.bond_id, T1.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR000_1' AND T2.bond_id = 'TR000_1_2'
Pred: SELECT b.molecule_id
FROM bond b
JOIN connected c ON b.bond_id = c.bond_id
JOIN atom a ON c.atom_id = a.atom_id
WHERE b.bond_id = 'TR000_1_2' AND a.atom_id = 'TR000_1';
------------------------------
question: Calculate the percentage of molecules containing carcinogenic compounds that element is hydrogen.
GT: SELECT CAST(COUNT(CASE WHEN T1.element = 'h' AND T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id
Pred: SELECT 
    ROUND(CAST(COUNT(CASE WHEN a.element = 'h' AND m.label = '+' THEN 1 END) AS REAL) / COUNT(*), 2) * 100.0 AS percentage
FROM 
    molecule m
JOIN 
    atom a ON m.molecule_id = a.molecule_id;
------------------------------
question: Is molecule TR124 carcinogenic?
GT: SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR124'
Pred: SELECT label
FROM molecule
WHERE molecule_id = 'TR124' AND label = '+';
------------------------------
question: What atoms comprise TR186?
GT: SELECT T.atom_id FROM atom AS T WHERE T.molecule_id = 'TR186'
Pred: SELECT element
FROM atom
WHERE molecule_id = 'TR186';
------------------------------
question: Name the elements that comprise the atoms of bond TR001_2_4.
GT: SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_2_4'
Pred: SELECT DISTINCT a.element
FROM atom a
JOIN bond b ON a.molecule_id = b.molecule_id
WHERE b.bond_id = 'TR001_2_4';
------------------------------
question: How many double bonds does TR006 have and is it carcinogenic?
GT: SELECT COUNT(T1.bond_id), T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' AND T2.molecule_id = 'TR006' GROUP BY T2.label
Pred: SELECT 
    COUNT(b.bond_id) AS double_bond_count,
    CASE 
        WHEN m.label = '+' THEN 'Carcinogenic'
        WHEN m.label = '-' THEN 'Non-Carcinogenic'
        ELSE 'Unknown'
    END AS carcinogenicity
FROM 
    molecule m
JOIN 
    bond b ON m.molecule_id = b.molecule_id
WHERE 
    m.molecule_id = 'TR006' AND b.bond_type = ' = ';
------------------------------
question: List all carcinogenic molecules and their elements.
GT: SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
Pred: SELECT m.molecule_id, a.element
FROM molecule m
INNER JOIN atom a ON m.molecule_id = a.molecule_id
WHERE m.label = '+' AND a.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca');
------------------------------
question: Name all bonds with single bond types and what atoms are connected to the molecules.
GT: SELECT T1.bond_id, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'
Pred: SELECT b.bond_id, c.atom_id
FROM bond b
JOIN connected c ON b.bond_id = c.bond_id
WHERE b.bond_type = '-';
------------------------------
question: Which molecules have triple bonds and list all the elements they contain.
GT: SELECT DISTINCT T1.molecule_id, T2.element FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'
Pred: SELECT m.molecule_id, a.element
FROM molecule m
INNER JOIN bond b ON m.molecule_id = b.molecule_id
INNER JOIN atom a ON m.molecule_id = a.molecule_id
WHERE b.bond_type = '#';
------------------------------
question: How many bonds are created by bonding atoms with chlorine element?
GT: SELECT COUNT(T1.bond_id) FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T2.element = 'cl'
Pred: SELECT COUNT(*) AS total_bonds
FROM atom a
INNER JOIN bond b ON a.molecule_id = b.molecule_id
WHERE a.element = 'cl';
------------------------------
question: List out the atom id that belongs to the TR346 molecule and how many bond type can be created by this molecule?
GT: SELECT T1.atom_id, COUNT(DISTINCT T2.bond_type),T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR000' GROUP BY T1.atom_id, T2.bond_type
Pred: SELECT a.atom_id, COUNT(DISTINCT b.bond_type) AS bond_count
FROM atom a
JOIN bond b ON a.molecule_id = b.molecule_id
WHERE a.molecule_id = 'TR346'
GROUP BY a.atom_id;
------------------------------
question: How many molecules have a double bond type and among these molecule, how many are labeled as carcinogenic compound?
GT: SELECT COUNT(DISTINCT T2.molecule_id), SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '='
Pred: SELECT COUNT(DISTINCT m.molecule_id) AS total_molecules
FROM molecule m
JOIN bond b ON m.molecule_id = b.molecule_id
WHERE b.bond_type = ' = ' AND m.label = '+';
------------------------------
question: How many molecules without sulphur element is not having double bond?
GT: SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element <> 's' AND T2.bond_type <> '='
Pred: SELECT COUNT(DISTINCT m.molecule_id) AS total_molecules
FROM molecule m
LEFT JOIN atom a ON m.molecule_id = a.molecule_id
LEFT JOIN bond b ON m.molecule_id = b.molecule_id
WHERE a.element != 's' AND b.bond_type != ' = ';
------------------------------
question: Calculate the percentage of carcinogenic molecules which contain the Chlorine element.
GT: SELECT COUNT(CASE WHEN T2.label = '+' AND T1.element = 'cl' THEN T2.molecule_id ELSE NULL END) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id
Pred: WITH CarcinogenicMolecules AS (
    SELECT m.molecule_id, m.label, a.element
    FROM molecule m
    JOIN atom a ON m.molecule_id = a.molecule_id
    WHERE m.label = '+'
)
SELECT 
    (SUM(CASE WHEN element = 'Cl' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage
FROM CarcinogenicMolecules;
------------------------------
question: What is the molecule of atom id "TR000_2" and atom id 2 "TR000_4"?
GT: SELECT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_2' AND T2.atom_id2 = 'TR000_4'
Pred: SELECT m.label AS molecule_label
FROM atom a
INNER JOIN molecule m ON a.molecule_id = m.molecule_id
WHERE a.atom_id IN ('TR000_2', 'TR000_4');
------------------------------
question: Find the percentage of atoms with single bond.
GT: SELECT CAST(COUNT(CASE WHEN T.bond_type = '-' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond t
Pred: SELECT 
    (CAST(SUM(CASE WHEN b.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) / COUNT(a.atom_id)) * 100 AS percentage
FROM 
    atom a
JOIN 
    bond b ON a.molecule_id = b.molecule_id;
------------------------------
question: Which molecule consisted of Sulphur atom with double bond?
GT: SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 's' AND T2.bond_type = '='
Pred: SELECT DISTINCT a.molecule_id
FROM atom a
INNER JOIN bond b ON a.molecule_id = b.molecule_id
WHERE a.element = 's' AND b.bond_type = ' = ';
------------------------------
question: Calculate the percentage of carcinogenic molecules with triple bonded Hidrogen atoms.
GT: SELECT CAST(SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T2.element = 'h'
Pred: SELECT 
    (CAST(SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) AS REAL) / COUNT(m.molecule_id)) * 100.0 AS percentage
FROM 
    molecule m
JOIN 
    atom a ON m.molecule_id = a.molecule_id
JOIN 
    bond b ON m.molecule_id = b.molecule_id
WHERE 
    a.element = 'h' AND b.bond_type = '#';
------------------------------
question: Among the molecules between TR004 to TR010, how many of them has single bonds?
GT: SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.molecule_id BETWEEN 'TR004' AND 'TR010' AND T.bond_type = '-'
Pred: SELECT COUNT(DISTINCT m.molecule_id) AS total_molecules
FROM molecule m
INNER JOIN bond b ON m.molecule_id = b.molecule_id
WHERE m.molecule_id BETWEEN 'TR004' AND 'TR010'
  AND b.bond_type = '-';
------------------------------
question: What is the total number of molecules with double bonded oxygen?
GT: SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '=' AND T1.element = 'o'
Pred: SELECT COUNT(DISTINCT m.molecule_id) AS total_molecules
FROM molecule m
JOIN atom a ON m.molecule_id = a.molecule_id
JOIN bond b ON m.molecule_id = b.molecule_id
WHERE a.element = 'o' AND b.bond_type = ' = ';
------------------------------
question: in molecules with triple bonds, how many of them are not carcinogenic?
GT: SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND T1.label = '-'
Pred: SELECT COUNT(molecule.molecule_id) AS count
FROM molecule
INNER JOIN bond ON molecule.molecule_id = bond.molecule_id
WHERE bond.bond_type = '#' AND molecule.label = '-';
------------------------------
question: What is the atom ID of double bonded carbon in TR012 molecule?
GT: SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T2.molecule_id = 'TR012' AND T3.bond_type = '=' AND T1.element = 'c'
Pred: SELECT a.atom_id
FROM atom a
JOIN bond b ON a.molecule_id = b.molecule_id
WHERE a.element = 'c'
  AND b.bond_type = ' = '
  AND a.molecule_id = 'TR012';
------------------------------
question: Which are the cards that have incredibly powerful foils.
GT: SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL
Pred: SELECT name
FROM cards
WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;
------------------------------
question: What are the borderless cards available without powerful foils?
GT: SELECT id FROM cards WHERE borderColor = 'borderless' AND (cardKingdomId IS NULL OR cardKingdomId IS NULL)
Pred: SELECT id
FROM cards
WHERE borderColor = 'borderless'
  AND cardKingdomFoilId IS NOT NULL
  AND cardKingdomId IS NOT NULL;
------------------------------
question: List the card names with value that cost more converted mana for the face.
GT: SELECT name FROM cards ORDER BY faceConvertedManaCost LIMIT 1
Pred: SELECT name
FROM cards
WHERE faceConvertedManaCost = (SELECT MAX(faceConvertedManaCost) FROM cards);
------------------------------
question: Name all cards with 2015 frame style ranking below 100 on EDHRec.
GT: SELECT id FROM cards WHERE edhrecRank < 100 AND frameVersion = 2015
Pred: SELECT name
FROM cards
WHERE frameVersion = '2015' AND edhrecRank < 100;
------------------------------
question: List all the mythic rarity print cards banned in gladiator format.
GT: SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'
Pred: SELECT c.name
FROM cards c
JOIN legalities l ON c.uuid = l.uuid
WHERE c.rarity = 'mythic'
  AND l.status = 'Banned'
  AND l.format = 'gladiator';
------------------------------
question: Find all cards illustrated by Stephen Daniel and describe the text of the ruling of these cards. State if these cards have missing or degraded properties and values.
GT: SELECT T1.id, T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele'
Pred: SELECT 
    c.id AS card_id,
    r.text AS ruling_text,
    CASE 
        WHEN c.hasContentWarning = 1 THEN 'Card has missing or degraded properties'
        ELSE 'Card is in good condition'
    END AS card_condition
FROM 
    cards c
INNER JOIN 
    rulings r ON c.uuid = r.uuid
WHERE 
    c.artist = 'Stephen Daniele' AND c.hasContentWarning = 1;
------------------------------
question: Name the card and artist with the most ruling information. Also state if the card is a promotional printing.
GT: SELECT T1.name, T1.artist, T1.isPromo FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.isPromo = 1 AND T1.artist = (SELECT artist FROM cards WHERE isPromo = 1 GROUP BY artist HAVING COUNT(DISTINCT uuid) = (SELECT MAX(count_uuid) FROM ( SELECT COUNT(DISTINCT uuid) AS count_uuid FROM cards WHERE isPromo = 1 GROUP BY artist ))) LIMIT 1
Pred: SELECT 
    c.name AS card_name,
    c.artist,
    c.isPromo
FROM 
    cards c
JOIN 
    rulings r ON c.uuid = r.uuid
WHERE 
    c.isPromo = 1
GROUP BY 
    c.name, c.artist
ORDER BY 
    COUNT(r.uuid) DESC
LIMIT 1;
------------------------------
question: State the alternative languages available for card named Annul numbered 29.
GT: SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Annul' AND T1.number = 29
Pred: SELECT DISTINCT f.language
FROM cards c
JOIN foreign_data f ON c.uuid = f.uuid
WHERE c.name = 'annul' AND c.number = '29';
------------------------------
question: Calculate the percentage of the cards availabe in Chinese Simplified.
GT: SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid
Pred: SELECT 
    (CAST(SUM(CASE WHEN fd.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) / COUNT(c.id)) * 100 AS percentage
FROM 
    cards c
JOIN 
    foreign_data fd ON c.uuid = fd.uuid;
------------------------------
question: How many types of cards does the artist Aaron Boyd illustrated about card art?
GT: SELECT COUNT(type) FROM cards WHERE artist = 'Aaron Boyd'
Pred: SELECT COUNT(DISTINCT types) AS card_types_count
FROM cards
WHERE artist = 'Aaron Boyd';
------------------------------
question: What type of promotion is of card 'Duress'?
GT: SELECT promoTypes FROM cards WHERE name = 'Duress' AND promoTypes IS NOT NULL
Pred: SELECT promoTypes
FROM cards
WHERE name = 'Duress';
------------------------------
question: What is the type of the card "Ancestor's Chosen" as originally printed?
GT: SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen' AND originalType IS NOT NULL
Pred: SELECT originalType 
FROM cards 
WHERE name = 'Ancestor''s Chosen';
------------------------------
question: cards are not directly linked to language but through table 'set'. you need to add set in covered table & rephrase your question
What are the languages available for the set that card 'Angel of Mercy' is in?
GT: SELECT language FROM set_translations WHERE id IN ( SELECT id FROM cards WHERE name = 'Angel of Mercy' )
Pred: SELECT st.language
FROM cards c
JOIN sets s ON c.setCode = s.code
JOIN set_translations st ON s.code = st.setCode
WHERE c.name = 'Angel of Mercy';
------------------------------
question: How many cards of legalities whose status is restricted have text boxes?
GT: SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isTextless = 0
Pred: SELECT COUNT(*) 
FROM cards c
JOIN legalities l ON c.uuid = l.uuid
WHERE l.status = 'restricted' AND c.isTextless = 0;
------------------------------
question: How many cards of legalities whose status is restricted are found in a starter deck?
GT: SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isStarter = 1
Pred: SELECT COUNT(*)
FROM cards c
JOIN legalities l ON c.uuid = l.uuid
WHERE l.status = 'restricted' AND c.isStarter = 1;
------------------------------
question: How many black border cards are only available on mtgo?
GT: SELECT COUNT(id) FROM cards WHERE availability = 'mtgo' AND borderColor = 'black'
Pred: SELECT COUNT(*) 
FROM cards 
WHERE borderColor = 'black' AND availability LIKE '%mtgo%';
------------------------------
question: What are the card layout of cards with keyword of flying?
GT: SELECT layout FROM cards WHERE keywords = 'Flying'
Pred: SELECT layout
FROM cards
WHERE keywords LIKE '%Flying%';
------------------------------
question: How many cards with original type of "Summon - Angel" have subtype other than "Angel"?
GT: SELECT COUNT(id) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel'
Pred: SELECT COUNT(*) 
FROM cards 
WHERE originalType = 'Summon - Angel' 
  AND subtypes IS NOT NULL 
  AND subtypes NOT LIKE '%Angel%';
------------------------------
question: How many cards are having future frame version and what are the legality status of these cards?
GT: SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future'
Pred: SELECT COUNT(*) AS card_count, l.status AS legality_status
FROM cards c
JOIN legalities l ON c.uuid = l.uuid
WHERE c.frameVersion = 'future' AND l.status = 'legal';
------------------------------
question: What are the cards for set OGW? State the colour for these cards.
GT: SELECT id, colors FROM cards WHERE id IN ( SELECT id FROM set_translations WHERE setCode = 'OGW' )
Pred: SELECT cards.name, cards.colors
FROM cards
JOIN sets ON cards.setCode = sets.code
WHERE sets.setCode = 'OGW';
------------------------------
question: What are the cards in set 10E with converted mana of 5 have translation and what are the languages?
GT: SELECT id, language FROM set_translations WHERE id = ( SELECT id FROM cards WHERE convertedManaCost = 5 ) AND setCode = '10E'
Pred: SELECT c.name, st.language
FROM cards c
JOIN set_translations st ON c.setCode = st.setCode
WHERE c.convertedManaCost = 5 AND c.setCode = '10E';
------------------------------
question: List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.
GT: SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'
Pred: SELECT c.name, r.date
FROM cards c
INNER JOIN rulings r ON c.uuid = r.uuid
WHERE c.originalType = 'Creature - Elf';
------------------------------
question: Pick 3 cards with rarity of uncommon, list down name these cards according to ascending order of it's ruling date.
GT: SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3
Pred: SELECT c.name
FROM cards c
JOIN rulings r ON c.uuid = r.uuid
WHERE c.rarity = 'uncommon'
ORDER BY r.date ASC
LIMIT 3;
------------------------------
question: On how many cards designed by John Avon is its foil non-powerful?
GT: SELECT COUNT(id) FROM cards WHERE (cardKingdomId IS NULL OR cardKingdomFoilId IS NULL) AND artist = 'John Avon'
Pred: SELECT COUNT(*)
FROM cards
WHERE artist = 'John Avon'
  AND cardKingdomFoilId IS NOT NULL
  AND cardKingdomId IS NOT NULL;
------------------------------
question: What is the  unconverted mana do all the cards created by Rob Alexander cost in total?
GT: SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'
Pred: SELECT SUM(CAST(REPLACE(manaCost, ',', '') AS REAL)) AS total_unconverted_mana
FROM cards
WHERE artist = 'Rob Alexander';
------------------------------
question: Lists all types of cards available in arena.
GT: SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL
Pred: SELECT subtypes AS type
FROM cards
WHERE availability = 'arena'
UNION
SELECT supertypes AS type
FROM cards
WHERE availability = 'arena';
------------------------------
question: What is the percentage of Story Spotlight cards that do not have a text box? List them by their ID.
GT: SELECT CAST(SUM(CASE WHEN isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards WHERE isStorySpotlight = 1
Pred: SELECT 
    id,
    CAST(SUM(CASE WHEN isStorySpotlight = 1 AND isTextless = 0 THEN 1 ELSE 0 END) AS REAL) / COUNT(*) * 100 AS percentage
FROM 
    cards
GROUP BY 
    id;
------------------------------
question: Calculate the percentage of cards in Spanish. List them by name.
GT: SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Spanish'
Pred: SELECT 
    c.name,
    (SUM(CASE WHEN fd.language = 'Spanish' THEN 1 ELSE 0 END) * 100.0 / COUNT(c.id)) AS percentage_spanish
FROM 
    cards c
JOIN 
    foreign_data fd ON c.uuid = fd.uuid
GROUP BY 
    c.name
ORDER BY 
    c.name;
------------------------------
question: How many Brazilian Portuguese translated sets are inside the Commander block?
GT: SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)' AND T1.block = 'Commander'
Pred: SELECT COUNT(*)
FROM sets s
JOIN set_translations st ON s.code = st.setCode
WHERE s.block = 'Commander' AND st.language = 'Portuguese (Brasil)';
------------------------------
question: Lists by ID all Creature-type cards with legal status.
GT: SELECT T1.id FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Creature'
Pred: SELECT c.id
FROM cards c
JOIN legalities l ON c.uuid = l.uuid
WHERE c.types = 'Creature' AND l.status = 'Legal';
------------------------------
question: Lists all types of cards in German.
GT: SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL
Pred: SELECT c.type
FROM cards c
JOIN foreign_data fd ON c.uuid = fd.uuid
WHERE fd.language = 'German' AND c.subtypes IS NOT NULL AND c.supertypes IS NOT NULL;
------------------------------
question: How many unknown power cards contain info about the triggered ability
GT: SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE (T1.power IS NULL OR T1.power = '*') AND T2.text LIKE '%triggered ability%'
Pred: SELECT COUNT(*)
FROM cards
WHERE (power IS NULL OR power = '*')
  AND text LIKE '%triggered ability%';
------------------------------
question: To which artist does the card with the text "Das perfekte Gegenmittel zu einer dichten Formation" belong?
GT: SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.flavorText LIKE '%DAS perfekte Gegenmittel zu einer dichten Formation%'
Pred: SELECT artist
FROM cards
WHERE text = 'Das perfekte Gegenmittel zu einer dichten Formation';
------------------------------
question: What is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?
GT: SELECT name FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French'
Pred: SELECT f.name AS foreign_name
FROM cards c
JOIN foreign_data f ON c.uuid = f.uuid
WHERE c.type = 'Creature'
  AND c.layout = 'normal'
  AND c.borderColor = 'black'
  AND c.artist = 'Matthew D. Wilson'
  AND f.language = 'French';
------------------------------
question: How many cards with print rarity have ruling text printed on 01/02/2007?
GT: SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T2.date = '2007-02-01'
Pred: SELECT COUNT(*)
FROM cards c
JOIN rulings r ON c.uuid = r.uuid
WHERE c.rarity = 'rare' AND r.date = '2007-02-01';
------------------------------
question: What percentage of cards with format commander and legal status do not have a content warning?
GT: SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'
Pred: SELECT 
    (COUNT(CASE WHEN c.hasContentWarning = 0 THEN 1 END) * 1.0 / COUNT(c.id)) * 100 AS percentage
FROM 
    cards c
JOIN 
    legalities l ON c.uuid = l.uuid
WHERE 
    l.format = 'commander' AND l.status = 'legal';
------------------------------
question: What percentage of cards without power are in French?
GT: SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL OR T1.power = '*'
Pred: WITH CardPowerLanguage AS (
    SELECT 
        c.uuid,
        c.power,
        f.language
    FROM 
        cards c
    LEFT JOIN 
        foreign_data f ON c.uuid = f.uuid
)
SELECT 
    (CAST(SUM(CASE WHEN language = 'French' AND (power IS NULL OR power = '*') THEN 1 ELSE 0 END) AS REAL) / 
     SUM(CASE WHEN power IS NULL OR power = '*' THEN 1 ELSE 0 END)) * 100 AS percentage
FROM 
    CardPowerLanguage;
------------------------------
question: Please provide the ids of top three powerful pairs of Kingdom Foil and Kingdom Cards sorted by Kingdom Foil id in alphabetical order.
GT: SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId LIMIT 3
Pred: SELECT id
FROM cards
WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL
ORDER BY cardKingdomFoilId
LIMIT 3;
------------------------------
question: What proportion of cards do not have a text box with a normal layout?
GT: SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards
Pred: SELECT 
    CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) / COUNT(*) * 100 AS proportion
FROM 
    cards
WHERE 
    isTextless = 1;
------------------------------
question: What are the card numbers that don't have multiple faces on a single card and have the subtypes Angel and Wizard?
GT: SELECT id FROM cards WHERE subtypes = 'Angel,Wizard' AND side IS NULL
Pred: SELECT number
FROM cards
WHERE otherFaceIds IS NULL
  AND subtypes LIKE '%Angel%'
  AND subtypes LIKE '%Wizard%';
------------------------------
question: Please provide top three sets that don't appear in Magic: The Gathering Online, along with their names in in alphabetical order.
GT: SELECT name FROM sets WHERE mtgoCode IS NULL ORDER BY name LIMIT 3
Pred: SELECT code, name
FROM sets
WHERE mtgoCode IS NULL OR mtgoCode = ''
ORDER BY name ASC
LIMIT 3;
------------------------------
question: What is the name of set number 5 and its translation?
GT: SELECT T1.name, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 5 GROUP BY T1.name, T2.translation
Pred: SELECT 
    sets.name AS set_name,
    set_translations.translation
FROM 
    sets
INNER JOIN 
    set_translations ON sets.code = set_translations.setCode
WHERE 
    sets.id = 5;
------------------------------
question: What is the language and expansion type of set number 206?
GT: SELECT T2.language, T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 206
Pred: SELECT s.type, st.language
FROM sets s
JOIN set_translations st ON s.code = st.setCode
WHERE s.id = 206;
------------------------------
question: Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Shadowmoor block in alphabetical order.
GT: SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2
Pred: SELECT 
    s.id AS setId,
    s.code AS setCode
FROM 
    cards c
JOIN 
    sets s ON c.setCode = s.code
JOIN 
    foreign_data fd ON c.uuid = fd.uuid
WHERE 
    s.block = 'Shadowmoor'
    AND fd.language = 'Italian'
GROUP BY 
    s.code, s.id
ORDER BY 
    s.code
LIMIT 2;
------------------------------
question: Which set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set ID in your response.
GT: SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese' AND T1.isFoilOnly = 1 AND T1.isForeignOnly = 0
Pred: SELECT sets.id
FROM sets
JOIN foreign_data ON sets.code = foreign_data.uuid
WHERE sets.isForeignOnly = 0
AND sets.isFoilOnly = 1
AND foreign_data.language = 'Japanese';
------------------------------
question: Which Russian set of cards contains the most cards overall?
GT: SELECT T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Russian' GROUP BY T1.baseSetSize ORDER BY T1.baseSetSize DESC LIMIT 1
Pred: SELECT s.name
FROM sets s
JOIN set_translations st ON s.code = st.setCode
WHERE st.language = 'Russian'
ORDER BY s.baseSetSize DESC
LIMIT 1;
------------------------------
question: What is the percentage of the set of cards that have Chinese Simplified as the language and are only available for online games?
GT: SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' AND T1.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode
Pred: SELECT 
    (CAST(COUNT(CASE WHEN c.isOnlineOnly = 1 THEN 1 END) AS REAL) * 100) / COUNT(*) AS percentage
FROM 
    cards c
JOIN 
    foreign_data fd ON c.uuid = fd.uuid
WHERE 
    fd.language = 'Chinese Simplified';
------------------------------
question: How many card border with black color ? List out the card id.
GT: SELECT id FROM cards WHERE borderColor = 'black' GROUP BY id
Pred: SELECT id, COUNT(id) AS count
FROM cards
WHERE borderColor = 'black';
------------------------------
question: How many cards have frame effect as extendedart? List out the id of those cards.
GT: SELECT id FROM cards WHERE frameEffects = 'extendedart' GROUP BY id
Pred: SELECT 
    id, 
    COUNT(*) AS card_count
FROM 
    cards
WHERE 
    frameEffects = 'extendedart'
GROUP BY 
    id;
------------------------------
question: Among black card borders, which card has full artwork?
GT: SELECT id FROM cards WHERE borderColor = 'black' AND isFullArt = 1
Pred: SELECT name
FROM cards
WHERE borderColor = 'black' AND isFullArt = 1;
------------------------------
question: Point out the language of set id "174"?
GT: SELECT language FROM set_translations WHERE id = 174
Pred: SELECT st.language
FROM sets s
JOIN set_translations st ON s.code = st.setCode
WHERE s.id = 174;
------------------------------
question: Which foreign language used by "A Pedra Fellwar"?
GT: SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'
Pred: SELECT fd.language
FROM cards c
JOIN foreign_data fd ON c.uuid = fd.uuid
WHERE c.name = 'A Pedra Fellwar';
------------------------------
question: State the set code of the set with release date of 07/13/2007?
GT: SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.releaseDate = '2007-07-13'
Pred: SELECT code 
FROM sets 
WHERE releaseDate = '07/13/2007';
------------------------------
question: Mention the base set size and set code of the set that was in block named "Masques" and "Mirage".
GT: SELECT DISTINCT T1.baseSetSize, T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block IN ('Masques', 'Mirage')
Pred: SELECT baseSetSize, setCode
FROM sets
WHERE block IN ('Masques', 'Mirage');
------------------------------
question: Give the code of sets have expansion type of 'expansion'?
GT: SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'expansion' GROUP BY T2.setCode
Pred: SELECT code
FROM sets
WHERE type = 'expansion';
------------------------------
question: Name the foreign name of the card that has boros watermark? List out the type of this card.
GT: SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'boros'
Pred: SELECT 
    fd.name AS foreign_name, 
    c.type
FROM 
    cards c
INNER JOIN 
    foreign_data fd ON c.uuid = fd.uuid
WHERE 
    c.watermark = 'boros';
------------------------------
question: What is the language and flavor text of the card that has colorpie watermark? List out the type of this card.
GT: SELECT DISTINCT T2.language, T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'colorpie'
Pred: SELECT f.language, f.flavorText, c.type
FROM cards c
INNER JOIN foreign_data f ON c.uuid = f.uuid
WHERE c.watermark = 'colorpie';
------------------------------
question: What is percentage of the cards with a converted Mana Cost of 10 in set of Abyssal Horror?
GT: SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id), T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Abyssal Horror'
Pred: SELECT 
    COUNT(CASE WHEN convertedManaCost = 10 THEN 1 END) * 100.0 / COUNT(*) AS percentage
FROM 
    cards
WHERE 
    name = 'Abyssal Horror';
------------------------------
question: Give the code of sets have expansion commander type?
GT: SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'commander'
Pred: SELECT code
FROM sets
WHERE type = 'expansion' AND block = 'commander';
------------------------------
question: Name the foreign name of the card that has abzan watermark? List out the type of this card.
GT: SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'abzan'
Pred: SELECT 
    fd.name AS foreign_name, 
    c.type
FROM 
    cards c
INNER JOIN 
    foreign_data fd ON c.uuid = fd.uuid
WHERE 
    c.watermark = 'abzan';
------------------------------
question: What is the language of the card that has azorius watermark? List out the type of this card.
GT: SELECT DISTINCT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'azorius'
Pred: SELECT 
    fd.language, 
    c.type
FROM 
    cards c
INNER JOIN 
    foreign_data fd ON c.uuid = fd.uuid
WHERE 
    c.watermark = 'Azorius';
------------------------------
question: Among the cards with a white border color, how many of them have unknown power?
GT: SELECT SUM(CASE WHEN power LIKE '%*%' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE borderColor = 'white'
Pred: SELECT COUNT(*)
FROM cards
WHERE borderColor = 'white'
  AND (power = '*' OR power IS NULL);
------------------------------
question: How many artists have designed a card with a black border color and is available in both "arena" and "mtgo" printing type?
GT: SELECT COUNT(CASE WHEN availability LIKE '%arena,mtgo%' AND borderColor = 'black' THEN 1 ELSE NULL END) FROM cards
Pred: SELECT COUNT(DISTINCT artist) AS total_artists
FROM cards
WHERE borderColor = 'black'
  AND availability LIKE '%arena,mtgo%';
------------------------------
question: How many translations are there for the set of cards with "Angel of Mercy" in it?
GT: SELECT COUNT(DISTINCT translation) FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Angel of Mercy' ) AND translation IS NOT NULL
Pred: SELECT COUNT(*) AS num_translations
FROM cards c
JOIN set_translations st ON c.setCode = st.setCode
WHERE c.name = 'Angel of Mercy';
------------------------------
question: For the set of cards with "Ancestor's Chosen" in it, is there a Korean version of it?
GT: SELECT IIF(SUM(CASE WHEN T2.language = 'Korean' AND T2.translation IS NOT NULL THEN 1 ELSE 0 END) > 0, 'YES', 'NO') FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'
Pred: SELECT fd.name AS foreign_name
FROM cards c
JOIN foreign_data fd ON c.uuid = fd.uuid
WHERE c.name = 'Ancestor''s Chosen' AND fd.language = 'Korean';
------------------------------
question: Did the set of cards with "Angel of Mercy" appear on Magic: The Gathering Online?
GT: SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'
Pred: SELECT s.mtgoCode
FROM cards c
JOIN sets s ON c.setCode = s.code
WHERE c.name = 'Angel of Mercy' AND s.mtgoCode IS NOT NULL;
------------------------------
question: Is the set of cards with Adarkar Valkyrie only available outside the United States?
GT: SELECT IIF(isForeignOnly = 1, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Adarkar Valkyrie'
Pred: SELECT s.isForeignOnly
FROM cards c
JOIN sets s ON c.setCode = s.code
WHERE c.name = 'Adarkar Valkyrie';
------------------------------
question: What's the German type of the card "Ancestor's Chosen"?
GT: SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'German'
Pred: SELECT fd.type
FROM cards c
JOIN foreign_data fd ON c.uuid = fd.uuid
WHERE c.name = 'Ancestor''s Chosen' AND fd.language = 'German';
------------------------------
question: Please list the Italian text ruling of all the cards in the set Coldsnap.
GT: SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'
Pred: SELECT r.text
FROM rulings r
JOIN cards c ON r.uuid = c.uuid
JOIN sets s ON c.setCode = s.code
JOIN set_translations st ON s.code = st.setCode
WHERE st.language = 'Italian' AND s.name = 'Coldsnap';
------------------------------
question: Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.
GT: SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC
Pred: SELECT 
    fd.name AS card_name
FROM 
    cards c
JOIN 
    sets s ON c.setCode = s.code
JOIN 
    foreign_data fd ON c.uuid = fd.uuid
WHERE 
    s.name = 'Coldsnap' 
    AND fd.language = 'Italian'
ORDER BY 
    c.convertedManaCost DESC
LIMIT 1;
------------------------------
question: For all cards illustrated by Jim Pavelec. and describe the text of the ruling of these cards. Do these cards have missing or degraded properties and values.
GT: SELECT T2.text , CASE WHEN T1.hasContentWarning = 1 THEN 'YES' ELSE 'NO' END FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Jim Pavelec'
Pred: SELECT 
    r.text AS ruling_text,
    c.hasContentWarning
FROM 
    cards c
INNER JOIN 
    rulings r ON c.uuid = r.uuid
WHERE 
    c.artist = 'Jim Pavelec';
------------------------------
question: What's the French name of the set of cards with "Tendo Ice Bridge" is in?
GT: SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL
Pred: SELECT st.translation AS FrenchSetName
FROM cards c
JOIN foreign_data fd ON c.uuid = fd.uuid
JOIN set_translations st ON fd.setCode = st.setCode
WHERE c.name = 'Tendo Ice Bridge' AND fd.language = 'French';
------------------------------
question: How many translations of the name of the set "Tenth Edition"?
GT: SELECT COUNT(DISTINCT T2.translation) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Tenth Edition' AND T2.translation IS NOT NULL
Pred: SELECT COUNT(st.translation) AS translation_count
FROM sets s
JOIN set_translations st ON s.code = st.setCode
WHERE s.name = 'Tenth Edition' AND st.translation IS NOT NULL;
------------------------------
question: Tell the Japanese name of the set which card "Fellwar Stone" is in it.
GT: SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL
Pred: SELECT st.translation
FROM cards c
JOIN sets s ON c.setCode = s.code
JOIN set_translations st ON s.code = st.setCode
WHERE c.name = 'Fellwar Stone' AND st.language = 'Japanese';
------------------------------
question: For all the set of cards that has Japanese translation, what is the percentage of them are only available in non-foil?
GT: SELECT CAST(SUM(CASE WHEN isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Japanese' )
Pred: WITH JapaneseSets AS (
    SELECT s.code
    FROM sets s
    INNER JOIN set_translations st ON s.code = st.setCode
    WHERE st.language = 'Japanese'
),
NonFoilPercentage AS (
    SELECT 
        CAST(SUM(CASE WHEN c.isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(c.id) AS percentage
    FROM cards c
    INNER JOIN JapaneseSets js ON c.setCode = js.code
)
SELECT percentage
FROM NonFoilPercentage;
------------------------------
question: For all the set of cards that has Brazil Portuguese translation, what is the percentage of them are only available online?
GT: SELECT CAST(SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Portuguese (Brazil)' )
Pred: SELECT 
    (SUM(CASE WHEN c.isOnlineOnly = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage
FROM 
    cards c
JOIN 
    foreign_data fd ON c.uuid = fd.uuid
WHERE 
    fd.language = 'Portuguese (Brazil)';
------------------------------
question: What is the most common visual frame effects among the incredibly powerful foils?
GT: SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(frameEffects) DESC LIMIT 1
Pred: SELECT frameEffects
FROM cards
WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL
GROUP BY frameEffects
ORDER BY COUNT(*) DESC
LIMIT 1;
------------------------------
question: In duels, what are the top 10 cards with the highest uncoverted mana cost?
GT: SELECT DISTINCT name FROM cards WHERE uuid IN ( SELECT uuid FROM legalities WHERE format = 'duel' ) ORDER BY manaCost DESC LIMIT 0, 10
Pred: SELECT c.name, c.manaCost
FROM cards c
INNER JOIN legalities l ON c.uuid = l.uuid
WHERE l.format = 'duel'
ORDER BY c.manaCost DESC
LIMIT 10;
------------------------------
question: When was the oldest mythic card released and what are its legal play formats?
GT: SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate LIMIT 1
Pred: SELECT c.originalReleaseDate, l.format
FROM cards c
INNER JOIN legalities l ON c.uuid = l.uuid
WHERE c.rarity = 'mythic'
  AND c.originalReleaseDate = (
    SELECT MIN(originalReleaseDate)
    FROM cards
    WHERE rarity = 'mythic'
  )
  AND l.status = 'legal';
------------------------------
question: How many rare enchantment Abundance cards are there whose play format status are all legal?
GT: SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.rarity = 'rare' AND T1.types = 'Enchantment' AND T1.name = 'Abundance' AND T2.status = 'Legal'
Pred: SELECT COUNT(*)
FROM cards c
INNER JOIN legalities l ON c.uuid = l.uuid
WHERE c.rarity = 'rare'
  AND c.types = 'Enchantment'
  AND c.name = 'Abundance'
  AND l.status = 'Legal'
GROUP BY c.name
HAVING COUNT(DISTINCT l.format) = 1;
------------------------------
question: Which of the play format has the highest number of banned status? Indicate the play format and the names of all the card meet the condition.
GT: WITH MaxBanned AS (SELECT format, COUNT(*) AS count_banned FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1) SELECT T2.format, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid INNER JOIN MaxBanned MB ON MB.format = T2.format WHERE T2.status = 'Banned'
Pred: SELECT l.format, c.name
FROM cards c
JOIN legalities l ON c.uuid = l.uuid
WHERE l.status = 'Banned'
AND l.format = (
    SELECT format
    FROM legalities
    WHERE status = 'Banned'
    GROUP BY format
    ORDER BY COUNT(*) DESC
    LIMIT 1
);
------------------------------
question: What is the language of the "Battlebond" set?
GT: SELECT language FROM set_translations WHERE id IN ( SELECT id FROM sets WHERE name = 'Battlebond' )
Pred: SELECT st.language
FROM sets s
JOIN set_translations st ON s.code = st.setCode
WHERE s.name = 'Battlebond';
------------------------------
question: Who is the illustrator that illustrated the least amount of cards? List the format of play of the cards that he/she illustrated.
GT: SELECT T1.artist, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid GROUP BY T1.artist ORDER BY COUNT(T1.id) ASC LIMIT 1
Pred: SELECT c.artist, l.format
FROM cards c
JOIN legalities l ON c.uuid = l.uuid
GROUP BY c.artist, l.format
HAVING COUNT(*) = (
    SELECT MIN(card_count)
    FROM (
        SELECT COUNT(*) AS card_count
        FROM cards
        GROUP BY artist
    )
);
------------------------------
question: What is the annual average number of sets that were released between 1/1/2012 to 12/31/2015? Indicate the common langugage of the card.
GT: SELECT (CAST(SUM(T1.id) AS REAL) / COUNT(T1.id)) / 4, T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.id = T2.id WHERE T1.releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY T1.releaseDate ORDER BY COUNT(T2.language) DESC LIMIT 1
Pred: WITH SetCounts AS (
    SELECT 
        strftime('%Y', releaseDate) AS year,
        COUNT(*) AS set_count
    FROM 
        sets
    WHERE 
        releaseDate BETWEEN '2012-01-01' AND '2015-12-31'
    GROUP BY 
        year
),
AverageSets AS (
    SELECT 
        AVG(set_count) AS average_sets
    FROM 
        SetCounts
),
CommonLanguage AS (
    SELECT 
        language
    FROM 
        set_translations st
    JOIN 
        sets s ON st.setCode = s.code
    WHERE 
        s.releaseDate BETWEEN '2012-01-01' AND '2015-12-31'
    GROUP BY 
        language
    ORDER BY 
        COUNT(*) DESC
    LIMIT 1
)
SELECT 
    (SELECT average_sets FROM AverageSets) AS average_sets,
    (SELECT language FROM CommonLanguage) AS common_language;
------------------------------
question: Find the uuid of cards in which the old school format is restricted or banned.
GT: SELECT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'Banned' OR status = 'Restricted')
Pred: SELECT c.uuid
FROM cards c
INNER JOIN legalities l ON c.uuid = l.uuid
WHERE l.format = 'oldschool' AND l.status IN ('restricted', 'banned');
------------------------------
question: Find and list the names of sets which doesn't have Japanese translation but have Korean translation.
GT: SELECT name FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Korean' AND language NOT LIKE '%Japanese%' )
Pred: SELECT s.name
FROM sets s
WHERE s.code NOT IN (
    SELECT st.setCode
    FROM set_translations st
    WHERE st.language = 'Japanese'
)
AND s.code IN (
    SELECT st.setCode
    FROM set_translations st
    WHERE st.language = 'Korean'
);
------------------------------
question: List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.
GT: SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'
Pred: SELECT c.frameVersion, c.name
FROM cards c
INNER JOIN legalities l ON c.uuid = l.uuid
WHERE c.artist = 'Allen Williams' AND l.status = 'Banned';
------------------------------
question: How many users last accessed the website after 2014/9/1?
GT: SELECT COUNT(Id) FROM users WHERE date(LastAccessDate) > '2014-09-01'
Pred: SELECT COUNT(Id) 
FROM users 
WHERE LastAccessDate > '2014-09-01';
------------------------------
question: How many users with more than 10 views created their account after the year 2013?
GT: SELECT COUNT(id) FROM users WHERE STRFTIME('%Y', CreationDate) > '2013' AND Views > 10
Pred: SELECT COUNT(*)
FROM users
WHERE Views > 10 AND CreationDate > '2013-01-01';
------------------------------
question: Who is the owner of the post "Eliciting priors from experts"?
GT: SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'
Pred: SELECT OwnerDisplayName
FROM posts
WHERE Title = 'Eliciting priors from experts';
------------------------------
question: What is the title of the post that is owned by csgillespie and has the highest popularity?
GT: SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1
Pred: SELECT Title
FROM posts
WHERE OwnerDisplayName = 'csgillespie'
ORDER BY ViewCount DESC
LIMIT 1;
------------------------------
question: What is the display name of the user who is the owner of the most valuable post?
GT: SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T1.FavoriteCount DESC LIMIT 1
Pred: SELECT OwnerDisplayName
FROM posts
WHERE FavoriteCount = (
    SELECT MAX(FavoriteCount)
    FROM posts
);
------------------------------
question: What is the display name of the user who last edited the post "Examples for teaching: Correlation does not mean causation"?
GT: SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'
Pred: SELECT LastEditorDisplayName
FROM posts
WHERE Title = 'Examples for teaching: Correlation does not mean causation';
------------------------------
question: Among the posts owned by csgillespie, how many of them are root posts?
GT: SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL
Pred: SELECT COUNT(*) 
FROM posts 
WHERE OwnerDisplayName = 'csgillespie' AND ParentId IS NULL;
------------------------------
question: What is the average number of badges obtained by a user with over 200 views?
GT: SELECT CAST(COUNT(T1.Id) AS REAL) / COUNT(DISTINCT T2.DisplayName) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Views > 200
Pred: SELECT AVG(COUNT(b.Id)) AS AverageBadges
FROM users u
JOIN badges b ON u.Id = b.UserId
WHERE u.Views > 200
GROUP BY u.Id;
------------------------------
question: Indicate the creation date of the maximum number of votes.
GT: SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1
Pred: SELECT CreationDate, COUNT(Id) AS vote_count
   FROM votes
   GROUP BY CreationDate
------------------------------
question: User No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished?
GT: SELECT IIF(T2.ClosedDate IS NULL, 'NOT well-finished', 'well-finished') AS resylt FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 23853 AND T1.CreationDate = '2013-07-12 09:08:18.0'
Pred: SELECT 
    c.PostId,
    CASE 
        WHEN p.ClosedDate IS NULL THEN 'Yes'
        ELSE 'No'
    END AS IsClosed
FROM 
    comments c
JOIN 
    posts p ON c.PostId = p.Id
WHERE 
    c.UserId = 23853 AND c.CreationDate = '2013-07-12 09:08:18.0';
------------------------------
question: For the user No.24, how many times is the number of his/her posts compared to his/her votes?
GT: SELECT CAST(COUNT(T2.Id) AS REAL) / COUNT(DISTINCT T1.Id) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.UserId = T2.OwnerUserId WHERE T1.UserId = 24
Pred: SELECT 
    CASE 
        WHEN (SELECT COUNT(Id) FROM votes WHERE UserId = 24) = 0 THEN NULL
        ELSE (SELECT COUNT(Id) FROM posts WHERE OwnerUserId = 24) / (SELECT COUNT(Id) FROM votes WHERE UserId = 24)
    END AS post_vote_ratio;
------------------------------
question: Name the user that commented 'thank you user93!'
GT: SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text = 'thank you user93!'
Pred: SELECT UserDisplayName
FROM comments
WHERE Text = 'thank you user93!';
------------------------------
question: Write all comments made by user 'A Lion.'
GT: SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'A Lion'
Pred: SELECT Text
FROM comments
WHERE UserDisplayName = 'A Lion';
------------------------------
question: Who is the editor of the post titled 'Open source tools for visualizing multi-dimensional data?'
GT: SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data?'
Pred: SELECT u.DisplayName
FROM posts p
INNER JOIN users u ON p.OwnerDisplayName = u.DisplayName
WHERE p.Title = 'Open source tools for visualizing multi-dimensional data';
------------------------------
question: List the title of posts which were edited by Vebjorn Ljosa.
GT: SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'
Pred: SELECT p.Title
FROM posts p
INNER JOIN users u ON p.LastEditorUserId = u.Id
WHERE u.DisplayName = 'Vebjorn Ljosa';
------------------------------
question: Write all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?'
GT: SELECT T2.Comment FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'
Pred: SELECT c.Text
FROM posts p
INNER JOIN comments c ON p.Id = c.PostId
WHERE p.Title = 'Why square the difference instead of taking the absolute value in standard deviation?';
------------------------------
question: Which user added a bounty amount of 50 to the post title mentioning variance?
GT: SELECT T3.DisplayName, T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T3.Id = T2.UserId WHERE T2.BountyAmount = 50 AND T1.Title LIKE '%variance%'
Pred: SELECT u.DisplayName
FROM votes v
JOIN posts p ON v.PostId = p.Id
JOIN users u ON v.UserId = u.Id
WHERE v.BountyAmount = 50 AND p.Title LIKE '%variance%';
------------------------------
question: Calculate the average view count of each post tagged as 'humor' and list the title and the comment of each post.
GT: SELECT AVG(T2.ViewCount), T2.Title, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.PostId  WHERE T2.Tags = '<humor>' GROUP BY T2.Title, T1.Text 
Pred: SELECT 
    p.Title, 
    c.Text, 
    AVG(p.ViewCount) AS AverageViewCount
FROM 
    posts p
JOIN 
    comments c ON p.Id = c.PostId
WHERE 
    p.Tags LIKE '%<humor>%'
GROUP BY 
    p.Title, 
    c.Text;
------------------------------
question: How many users from New York have a teacher and supporter badge?
GT: SELECT COUNT(DISTINCT T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name IN ('Supporter', 'Teacher') AND T2.Location = 'New York'
Pred: SELECT COUNT(u.Id) AS NumberOfUsers
FROM users u
JOIN badges b ON u.Id = b.UserId
WHERE u.Location = 'New York'
  AND b.Name IN ('Supporter', 'Teacher')
GROUP BY u.Id
HAVING COUNT(DISTINCT b.Name) = 2;
------------------------------
question: Which user created post ID 1 and what is the reputation of this user?
GT: SELECT T2.Id, T2.Reputation FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.PostId = 1
Pred: SELECT u.Reputation
FROM users u
JOIN posts p ON u.Id = p.OwnerUserId
WHERE p.Id = 1;
------------------------------
question: Which user have only one post history per post and having at least 1000 views?
GT: SELECT T2.UserId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T3.ViewCount >= 1000 GROUP BY T2.UserId HAVING COUNT(DISTINCT T2.PostHistoryTypeId) = 1
Pred: SELECT u.Id
FROM users u
JOIN posts p ON u.Id = p.OwnerUserId
JOIN postHistory ph ON p.Id = ph.PostId
WHERE p.ViewCount >= 1000
GROUP BY u.Id
HAVING COUNT(DISTINCT ph.PostId) = 1;
------------------------------
question: Which users have posted the most comments. List out the user's badge?
GT: SELECT Name FROM badges AS T1 INNER JOIN comments AS T2 ON T1.UserId = t2.UserId GROUP BY T2.UserId ORDER BY COUNT(T2.UserId) DESC LIMIT 1
Pred: WITH CommentCounts AS (
    SELECT 
        c.UserId,
        COUNT(c.Id) AS CommentCount
    FROM 
        comments c
    GROUP BY 
        c.UserId
),
MaxCommentCount AS (
    SELECT 
        MAX(CommentCount) AS MaxCount
    FROM 
        CommentCounts
),
TopCommentUsers AS (
    SELECT 
        cc.UserId
    FROM 
        CommentCounts cc
    JOIN 
        MaxCommentCount mcc ON cc.CommentCount = mcc.MaxCount
)
SELECT 
    tc.UserId,
    b.Name AS BadgeName
FROM 
    TopCommentUsers tc
JOIN 
    badges b ON tc.UserId = b.UserId;
------------------------------
question: What is the percentage difference of student badges given during 2010 and 2011?
GT: SELECT CAST(SUM(IIF(STRFTIME('%Y', Date) = '2010', 1, 0)) AS REAL) * 100 / COUNT(Id) - CAST(SUM(IIF(STRFTIME('%Y', Date) = '2011', 1, 0)) AS REAL) * 100 / COUNT(Id) FROM badges WHERE Name = 'Student'
Pred: SELECT 
    (SUM(CASE WHEN strftime('%Y', b.Date) = '2010' THEN 1 ELSE 0 END) - 
     SUM(CASE WHEN strftime('%Y', b.Date) = '2011' THEN 1 ELSE 0 END)) * 100.0 / 
    COUNT(b.Id) AS percentage_difference
FROM 
    badges b
WHERE 
    b.Name = 'Student';
------------------------------
question: What are the post history type IDs for post ID 3720 and how many unique users have commented on the post?
GT: SELECT T1.PostHistoryTypeId, (SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720) AS NumberOfUsers FROM postHistory AS T1 WHERE T1.PostId = 3720
Pred: WITH PostHistory AS (
    SELECT DISTINCT PostHistoryTypeId
    FROM postHistory
    WHERE PostId = 3720
),
CommentedUsers AS (
    SELECT COUNT(DISTINCT UserId) AS CommentedUsersCount
    FROM comments
    WHERE PostId = 3720
)
SELECT 
    ph.PostHistoryTypeId,
    cu.CommentedUsersCount
FROM PostHistory ph
CROSS JOIN CommentedUsers cu;
------------------------------
question: List out all post that are related to post ID 61217 and what is the popularity of this post?
GT: SELECT T1.ViewCount FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 61217
Pred: SELECT pl.PostId, p.ViewCount
FROM postLinks pl
JOIN posts p ON pl.PostId = p.Id
WHERE pl.RelatedPostId = 61217;
------------------------------
question: List out all post ID with score more than 60 and list out all the user ID that created these post.
GT: SELECT PostId, UserId FROM postHistory WHERE PostId IN ( SELECT Id FROM posts WHERE Score > 60 )
Pred: SELECT Id, OwnerUserId
FROM posts
WHERE Score > 60;
------------------------------
question: What is the sum of favourite count gained by user ID 686 in 2011?
GT: SELECT SUM(DISTINCT FavoriteCount) FROM posts WHERE Id IN ( SELECT PostId FROM postHistory WHERE UserId = 686 AND STRFTIME('%Y', CreationDate) = '2011' )
Pred: SELECT SUM(FavoriteCount) AS TotalFavoriteCount
FROM posts
WHERE OwnerUserId = 686
  AND strftime('%Y', CreationDate) = '2011';
------------------------------
question: How many users obtained the "Announcer" badge?
GT: SELECT COUNT(id) FROM badges WHERE Name = 'Announcer'
Pred: SELECT COUNT(DISTINCT UserId) AS NumberOfUsers
FROM badges
WHERE Name = 'Announcer';
------------------------------
question: State the detailed content of the comment which was created on 7/19/2010 7:25:47 PM.
GT: SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0'
Pred: SELECT Text
FROM comments
WHERE CreationDate = '2010-07-19 19:25:47';
------------------------------
question: What are the name of badge that users who have the highest reputation obtained?
GT: SELECT T2.name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId ORDER BY T1.Reputation DESC LIMIT 1
Pred: SELECT b.Name
FROM badges b
JOIN users u ON b.UserId = u.Id
WHERE u.Reputation = (
    SELECT MAX(Reputation)
    FROM users
);
------------------------------
question: What is the comment's rating score of the post which was created on 7/19/2010 7:19:56 PM
GT: SELECT T1.Score FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:19:56.0'
Pred: SELECT comments.Score
FROM comments
JOIN posts ON comments.PostId = posts.Id
WHERE posts.CreationDate = '2010-07-19 19:19:56.0';
------------------------------
question: Which users have the highest number of views?
GT: SELECT Id, DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )
Pred: SELECT DisplayName
FROM users
WHERE Views = (
    SELECT MAX(Views)
    FROM users
);
------------------------------
question: What is the name of tags used by John Salvatier's?
GT: SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Salvatier'
Pred: SELECT t.TagName
FROM users u
INNER JOIN posts p ON u.Id = p.OwnerUserId
INNER JOIN tags t ON p.Tags = t.Id
WHERE u.DisplayName = 'John Salvatier';
------------------------------
question: How many posts were created by Daniel Vassallo?
GT: SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Daniel Vassallo'
Pred: SELECT COUNT(Id) AS NumberOfPosts
FROM posts
WHERE OwnerDisplayName = 'Daniel Vassallo';
------------------------------
question: How many votes were made by Harlan?
GT: SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN votes AS T3 ON T3.PostId = T2.PostId WHERE T1.DisplayName = 'Harlan'
Pred: SELECT COUNT(votes.Id) AS VoteCount
FROM votes
JOIN users ON votes.UserId = users.Id
WHERE users.DisplayName = 'Harlan';
------------------------------
question: Which post by slashnick has the most answers count? State the post ID.
GT: SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1
Pred: SELECT Id
FROM posts
WHERE OwnerDisplayName = 'slashnick'
AND AnswerCount = (
    SELECT MAX(AnswerCount)
    FROM posts
    WHERE OwnerDisplayName = 'slashnick'
);
------------------------------
question: Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?
GT: SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1
Pred: SELECT 
    u.DisplayName AS OwnerDisplayName,
    SUM(p.ViewCount) AS TotalViewCount
FROM 
    posts p
JOIN 
    users u ON p.OwnerUserId = u.Id
WHERE 
    u.DisplayName IN ('Harvey Motulsky', 'Noah Snyder')
GROUP BY 
    u.DisplayName
ORDER BY 
    TotalViewCount DESC
LIMIT 1;
------------------------------
question: How many posts by Matt Parker have more than 4 votes?
GT: SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id INNER JOIN votes AS T4 ON T4.PostId = T3.Id WHERE T1.DisplayName = 'Matt Parker' GROUP BY T2.PostId, T4.Id HAVING COUNT(T4.Id) > 4
Pred: SELECT COUNT(p.Id) AS TotalPosts
FROM posts p
JOIN users u ON p.OwnerUserId = u.Id
JOIN votes v ON p.Id = v.PostId
WHERE u.DisplayName = 'Matt Parker'
GROUP BY p.Id
HAVING COUNT(v.Id) > 4;
------------------------------
question: How many negative comments did Neil McGuigan get in his posts?
GT: SELECT COUNT(T3.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T1.DisplayName = 'Neil McGuigan' AND T3.Score < 60
Pred: SELECT COUNT(c.Id) AS NegativeCommentsCount
FROM comments c
JOIN users u ON c.UserId = u.Id
WHERE c.Score < 60 AND u.DisplayName = 'Neil McGuigan';
------------------------------
question: State all the tags used by Mark Meckes in his posts that doesn't have comments.
GT: SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId WHERE T1.DisplayName = 'Mark Meckes' AND T3.CommentCount = 0
Pred: SELECT DISTINCT p.Tags
FROM posts p
WHERE p.OwnerDisplayName = 'Mark Meckes' AND p.CommentCount = 0;
------------------------------
question: Based on posts posted by Community, calculate the percentage of posts that use the R language.
GT: SELECT CAST(SUM(IIF(T3.TagName = 'r', 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'
Pred: SELECT 
    CAST(COUNT(CASE WHEN t.TagName = 'r' THEN p.Id END) AS REAL) / COUNT(p.Id) AS percentage
FROM 
    posts p
JOIN 
    tags t ON p.Tags LIKE '%' || t.TagName || '%'
JOIN 
    users u ON p.OwnerUserId = u.Id
WHERE 
    u.DisplayName = 'Community';
------------------------------
question: Calculate the difference in view count from post posted by Mornington and view count from posts posted by Amos.
GT: SELECT SUM(IIF(T1.DisplayName = 'Mornington', T3.ViewCount, 0)) - SUM(IIF(T1.DisplayName = 'Amos', T3.ViewCount, 0)) AS diff FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId
Pred: SELECT 
    SUM(CASE WHEN OwnerDisplayName = 'Mornington' THEN ViewCount ELSE 0 END) -
    SUM(CASE WHEN OwnerDisplayName = 'Amos' THEN ViewCount ELSE 0 END) AS calculation
FROM 
    posts;
------------------------------
question: How many posts were created on 21st July, 2010?
GT: SELECT COUNT(id) FROM postHistory WHERE date(CreationDate) = '2010-07-21'
Pred: SELECT COUNT(Id) AS TotalPosts
FROM posts
WHERE CreationDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59';
------------------------------
question: Describe the post title which got positive comments and display names of the users who posted those comments.
GT: SELECT T1.Title, T2.UserDisplayName FROM posts AS T1 INNER JOIN comments AS T2 ON T2.PostId = T2.Id WHERE T1.Score > 60
Pred: SELECT p.Title, c.UserDisplayName
FROM posts p
JOIN comments c ON p.Id = c.PostId
WHERE c.Score > 60;
------------------------------
question: Describe the post history counts and last edit date of the post title "What is the best introductory Bayesian statistics textbook?"
GT: SELECT T1.Id, T2.LastEditDate FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'What is the best introductory Bayesian statistics textbook?'
Pred: SELECT 
    p.Title,
    COUNT(ph.Id) AS PostHistoryCount,
    MAX(ph.CreationDate) AS LastEditDate
FROM 
    posts p
JOIN 
    postHistory ph ON p.Id = ph.PostId
WHERE 
    p.Title = 'What is the best introductory Bayesian statistics textbook?'
GROUP BY 
    p.Title;
------------------------------
question: Describe the last accessed date and location of the users who received the outliers badge.
GT: SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'
Pred: SELECT u.LastAccessDate, u.Location
FROM users u
INNER JOIN badges b ON u.Id = b.UserId
WHERE b.Name = 'Outliers';
------------------------------
question: List the post IDs and badge names of the user Samuel in 2013.
GT: SELECT T1.PostId, T2.Name FROM postHistory AS T1 INNER JOIN badges AS T2 ON T1.UserId = T2.UserId WHERE T1.UserDisplayName = 'Samuel' AND STRFTIME('%Y', T1.CreationDate) = '2013' AND STRFTIME('%Y', T2.Date) = '2013'
Pred: SELECT p.Id AS PostId, b.Name AS BadgeName
FROM users u
INNER JOIN badges b ON u.Id = b.UserId
INNER JOIN posts p ON u.Id = p.OwnerUserId
WHERE u.DisplayName = 'Samuel'
AND strftime('%Y', b.Date) = '2013'
AND strftime('%Y', p.CreationDate) = '2013';
------------------------------
question: What is the owner's display name of the most popular post?
GT: SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts ORDER BY ViewCount DESC LIMIT 1 )
Pred: SELECT OwnerDisplayName
FROM posts
WHERE ViewCount = (SELECT MAX(ViewCount) FROM posts);
------------------------------
question: Write down the related posts titles and link type IDs of the post "What are principal component scores?".
GT: SELECT T3.Title, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId INNER JOIN posts AS T3 ON T2.RelatedPostId = T3.Id WHERE T1.Title = 'What are principal component scores?'
Pred: -- Step 1: Find the PostId of the post with the title "What are principal component scores?"
SELECT pl.RelatedPostId, pl.LinkTypeId
FROM postLinks pl
WHERE pl.PostId = (
    SELECT Id
    FROM posts
    WHERE Title = 'What are principal component scores?'
);
------------------------------
question: Describe the display name of the parent ID for child post with the highest score.
GT: SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts WHERE ParentId IS NOT NULL ORDER BY Score DESC LIMIT 1 )
Pred: SELECT u.DisplayName
FROM users u
JOIN posts p ON u.Id = p.OwnerUserId
WHERE p.Id = (
    SELECT ParentId
    FROM posts
    WHERE ParentId IS NOT NULL
    ORDER BY Score DESC
    LIMIT 1
);
------------------------------
question: How old is the most influential user?
GT: SELECT Age FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )
Pred: SELECT MAX(Reputation) FROM users
------------------------------
question: How many posts with votes that were created in 2011 have a bounty of 50?
GT: SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T2.BountyAmount = 50 AND STRFTIME('%Y', T2.CreationDate) = '2011'
Pred: SELECT COUNT(*)
FROM posts p
JOIN votes v ON p.Id = v.PostId
WHERE strftime('%Y', p.CreationDate) = '2011' AND v.BountyAmount = 50;
------------------------------
question: What is the sum of score of the post on 2010-07-19?
GT: SELECT SUM(Score) FROM posts WHERE LasActivityDate LIKE '2010-07-19%'
Pred: SELECT SUM(Score) 
FROM posts 
WHERE LastActivityDate LIKE '2010-07-19%';
------------------------------
question: What is the title of the post with the oldest post link?
GT: SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T2.PostId = T1.Id ORDER BY T1.CreaionDate LIMIT 1
Pred: SELECT p.Title
FROM posts p
JOIN postLinks pl ON p.Id = pl.PostId
ORDER BY pl.CreationDate ASC
LIMIT 1;
------------------------------
question: Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more?
GT: SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4
Pred: SELECT COUNT(u.Id) AS TotalUsers
FROM users u
INNER JOIN posts p ON u.Id = p.OwnerUserId
WHERE u.Location = 'United Kingdom'
GROUP BY u.Id
HAVING SUM(p.FavoriteCount) >= 4;
------------------------------
question: What is the average number of posts voted by the oldest users?
GT: SELECT AVG(PostId) FROM votes WHERE UserId IN ( SELECT Id FROM users WHERE Age = ( SELECT MAX(Age) FROM users ) )
Pred: SELECT AVG(post_count) AS average_posts_voted
FROM (
    SELECT COUNT(v.PostId) AS post_count
    FROM users u
    JOIN votes v ON u.Id = v.UserId
    WHERE u.Age = (SELECT MAX(Age) FROM users)
    GROUP BY u.Id
) AS oldest_users_votes;
------------------------------
question: How many posts did Jay Stevens have in 2010?
GT: SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2010' AND T1.DisplayName = 'Jay Stevens'
Pred: SELECT COUNT(p.Id) AS TotalPosts
FROM posts p
INNER JOIN users u ON p.OwnerUserId = u.Id
WHERE u.DisplayName = 'Jay Stevens' AND strftime('%Y', p.CreationDate) = '2010';
------------------------------
question: Which post has the highest score? Please give its id and title's name.
GT: SELECT T1.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId ORDER BY T2.Score DESC LIMIT 1
Pred: SELECT Id, Title
FROM posts
WHERE Score = (SELECT MAX(Score) FROM posts);
------------------------------
question: Please list the users' display names whose posts had over 20000 views in 2011.
GT: SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2011' AND T2.ViewCount > 20000
Pred: SELECT u.DisplayName
FROM users u
JOIN posts p ON u.Id = p.OwnerUserId
WHERE p.ViewCount > 20000 AND strftime('%Y', p.CreationDate) = '2011';
------------------------------
question: Which is the most valuable post in 2010? Please give its id and the owner's display name.
GT: SELECT T2.OwnerUserId, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T1.CreationDate) = '2010' ORDER BY T2.FavoriteCount DESC LIMIT 1
Pred: SELECT p.Id, p.OwnerDisplayName
FROM posts p
WHERE strftime('%Y', p.CreationDate) = '2010'
ORDER BY p.FavoriteCount DESC
LIMIT 1;
------------------------------
question: What is the percentage of posts whose owners had a reputation of over 1000 in 2011?
GT: SELECT CAST(SUM(IIF(STRFTIME('%Y', T2.CreaionDate) = '2011' AND T1.Reputation > 1000, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId
Pred: SELECT 
    (SUM(CASE WHEN u.Reputation > 1000 THEN 1 ELSE 0 END) * 100.0 / COUNT(p.Id)) AS percentage
FROM 
    posts p
JOIN 
    users u ON p.OwnerUserId = u.Id
WHERE 
    strftime('%Y', p.CreationDate) = '2011';
------------------------------
question: Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.
GT: SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'
Pred: SELECT p.ViewCount, ph.UserDisplayName
FROM posts p
JOIN (
    SELECT PostId
    FROM postHistory
    WHERE Text = 'Computer Game Datasets'
    ORDER BY CreationDate DESC
    LIMIT 1
) ph2 ON p.Id = ph2.PostId
JOIN postHistory ph ON ph.PostId = ph2.PostId AND ph.CreationDate = (
    SELECT MAX(CreationDate)
    FROM postHistory
    WHERE Text = 'Computer Game Datasets'
);
------------------------------
question: Identify the total number of posts with views above average.
GT: SELECT Id FROM posts WHERE ViewCount > ( SELECT AVG(ViewCount) FROM posts )
Pred: SELECT COUNT(*) AS total_posts
FROM posts
WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts);
------------------------------
question: How many comments were added to the post with the highest score?
GT: SELECT COUNT(T2.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId GROUP BY T1.Id ORDER BY SUM(T1.Score) DESC LIMIT 1
Pred: SELECT COUNT(*) AS CommentCount
FROM comments
WHERE PostId = (SELECT Id FROM posts ORDER BY Score DESC LIMIT 1);
------------------------------
question: Identify the display name and location of the user, who was the last to edit the post with ID 183.
GT: SELECT T2.DisplayName, T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Id = 183 ORDER BY T1.LastEditDate DESC LIMIT 1
Pred: SELECT u.DisplayName, u.Location
FROM posts p
JOIN users u ON p.LastEditorUserId = u.Id
WHERE p.Id = 183;
------------------------------
question: How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.
GT: SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'
Pred: SELECT julianday(b.Date) - julianday(u.CreationDate) AS DaysToBadge
FROM users u
JOIN badges b ON u.Id = b.UserId
WHERE u.DisplayName = 'Zolomon';
------------------------------
question: Identify the number of posts and comments left by the user, who has the latest created user account.
GT: SELECT COUNT(T2.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T3.PostId = T2.Id ORDER BY T1.CreationDate DESC LIMIT 1
Pred: WITH LatestUser AS (
    SELECT Id
    FROM users
    ORDER BY CreationDate DESC
    LIMIT 1
),
UserPosts AS (
    SELECT COUNT(*) AS post_count
    FROM posts
    WHERE OwnerUserId = (SELECT Id FROM LatestUser)
),
UserComments AS (
    SELECT COUNT(*) AS comment_count
    FROM comments
    WHERE UserId = (SELECT Id FROM LatestUser)
)
SELECT 
    COALESCE((SELECT post_count FROM UserPosts), 0) AS post_count,
    COALESCE((SELECT comment_count FROM UserComments), 0) AS comment_count;
------------------------------
question: Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it.
GT: SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 10
Pred: SELECT c.Text, c.UserDisplayName
FROM comments c
JOIN posts p ON c.PostId = p.Id
WHERE p.Title = 'Analysing wind data with R'
ORDER BY c.CreationDate DESC
LIMIT 10;
------------------------------
question: Count the number of posts with a tag specified as 'careers'.
GT: SELECT COUNT(Id) FROM tags WHERE TagName = 'careers'
Pred: SELECT COUNT(*)
FROM posts p
JOIN tags t ON p.Tags LIKE '%' || t.TagName || '%'
WHERE t.TagName = 'careers';
------------------------------
question: What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?
GT: SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'
Pred: SELECT u.Reputation, p.ViewCount
FROM users u
JOIN posts p ON u.Id = p.OwnerUserId
WHERE u.DisplayName = 'Jarrod Dixon';
------------------------------
question: How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?
GT: SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'
Pred: SELECT 
    COUNT(c.Id) AS CommentCount,
    COALESCE(COUNT(a.Id), 0) AS AnswerCount
FROM 
    posts p
LEFT JOIN 
    comments c ON p.Id = c.PostId
LEFT JOIN 
    votes a ON p.Id = a.PostId AND a.VoteTypeId = 2
WHERE 
    p.Title = 'Clustering 1D data'
GROUP BY 
    p.Title;
------------------------------
question: Among all the posts posted by the most influential user, identify the percentage with a score above 50.
GT: SELECT CAST(SUM(CASE WHEN T2.Score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM users T1 INNER JOIN posts T2 ON T1.Id = T2.OwnerUserId INNER JOIN ( SELECT MAX(Reputation) AS max_reputation FROM users ) T3 ON T1.Reputation = T3.max_reputation
Pred: SELECT 
    (SUM(CASE WHEN p.Score > 50 THEN 1 ELSE 0 END) * 100.0 / COUNT(p.Id)) AS percentage
FROM 
    posts p
JOIN 
    users u ON p.OwnerUserId = u.Id
WHERE 
    u.Reputation = (SELECT MAX(Reputation) FROM users);
------------------------------
question: Among the tags with tag ID below 15, how many of them have 20 count of posts and below?
GT: SELECT COUNT(id) FROM tags WHERE Count <= 20 AND Id < 15
Pred: SELECT COUNT(*) AS tag_count
FROM tags
JOIN posts ON tags.Id = posts.Tags
WHERE tags.Id < 15
GROUP BY tags.Id
HAVING tags.Count <= 20;
------------------------------
question: List the creation date and age of the user that commented with webiste.
GT: SELECT T2.CreationDate, T2.Age FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.text LIKE '%http://%'
Pred: SELECT c.CreationDate, u.Age
FROM comments c
JOIN users u ON c.UserId = u.Id
WHERE c.Text LIKE '%http://%';
------------------------------
question: In comments with 0 score, how many of the posts have view count lower than 5?
GT: SELECT COUNT(T1.Id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ViewCount < 5 AND T2.Score = 0
Pred: SELECT COUNT(DISTINCT p.Id) AS TotalPosts
FROM posts p
JOIN comments c ON p.Id = c.PostId
WHERE c.Score = 0 AND p.ViewCount < 5;
------------------------------
question: In posts with 1 comment, how many of the comments have 0 score?
GT: SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T2.Score = 0
Pred: SELECT COUNT(*)
FROM posts p
JOIN comments c ON p.Id = c.PostId
WHERE p.CommentCount = 1 AND c.Score = 0;
------------------------------
question: Among products comments with 0 score, what is the total number of users ages 40 years old?
GT: SELECT COUNT(DISTINCT T1.id) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score = 0 AND T2.Age = 40
Pred: SELECT COUNT(DISTINCT u.Id) AS TotalUsers
FROM comments c
JOIN users u ON c.UserId = u.Id
WHERE c.Score = 0 AND u.Age = 40;
------------------------------
question: What is the up vote number of the user that commented "R is also lazy evaluated."?
GT: SELECT T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'R is also lazy evaluated.'
Pred: SELECT v.UpVotes
FROM votes v
WHERE v.UserId = (
    SELECT c.UserId
    FROM comments c
    WHERE c.Text = 'R is also lazy evaluated.'
);
------------------------------
question: Please list the full names of all the superheroes with over 15 super powers.
GT: SELECT DISTINCT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.full_name HAVING COUNT(T2.power_id) > 15
Pred: SELECT s.full_name
FROM superhero s
JOIN hero_power hp ON s.id = hp.hero_id
GROUP BY s.id
HAVING COUNT(hp.power_id) > 15;
------------------------------
question: Rank heroes published by Marvel Comics by their height in descending order.
GT: SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'
Pred: SELECT 
    s.superhero_name
FROM 
    superhero s
INNER JOIN 
    publisher p ON s.publisher_id = p.id
WHERE 
    p.publisher_name = 'Marvel Comics'
ORDER BY 
    s.height_cm DESC;
------------------------------
question: Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.
GT: SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour
Pred: SELECT 
    s.superhero_name,
    c.colour AS eye_colour,
    COUNT(s.id) AS eye_colour_count
FROM 
    superhero s
JOIN 
    colour c ON s.eye_colour_id = c.id
JOIN 
    publisher p ON s.publisher_id = p.id
WHERE 
    p.publisher_name = 'Marvel Comics'
GROUP BY 
    c.id
ORDER BY 
    eye_colour_count DESC;
------------------------------
question: Who is the dumbest superhero?
GT: SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value LIMIT 1
Pred: SELECT s.superhero_name
FROM superhero s
JOIN hero_attribute ha ON s.id = ha.hero_id
JOIN attribute a ON ha.attribute_id = a.id
WHERE a.attribute_name = 'Intelligence'
AND ha.attribute_value = (
    SELECT MIN(ha.attribute_value)
    FROM hero_attribute ha
    JOIN attribute a ON ha.attribute_id = a.id
    WHERE a.attribute_name = 'Intelligence'
);
------------------------------
question: What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics.
GT: SELECT (CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM superhero)), CAST(SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T3.id = T1.alignment_id WHERE T3.alignment = 'Bad'
Pred: SELECT 
    (CAST(SUM(CASE WHEN a.alignment = 'Bad' THEN 1 ELSE 0 END) AS REAL) / COUNT(s.id)) * 100 AS percentage_bad_aligned,
    COUNT(CASE WHEN p.publisher_name = 'Marvel Comics' THEN s.id ELSE NULL END) AS count_marvel
FROM 
    superhero s
LEFT JOIN 
    alignment a ON s.alignment_id = a.id
LEFT JOIN 
    publisher p ON s.publisher_id = p.id;
------------------------------
question: Give the publisher ID of Star Trek.
GT: SELECT id FROM publisher WHERE publisher_name = 'Star Trek'
Pred: SELECT publisher_id
FROM publisher
WHERE publisher_name = 'Star Trek';
------------------------------
question: How many bad superheroes are there?
GT: SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Bad'
Pred: SELECT COUNT(*) 
FROM superhero 
WHERE alignment_id = 1;
------------------------------
question: Provide the hair colour of the human superhero who is 185 cm tall.
GT: SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human'
Pred: SELECT c.colour
FROM superhero s
JOIN colour c ON s.hair_colour_id = c.id
JOIN race r ON s.race_id = r.id
WHERE s.height_cm = 185 AND r.race = 'human';
------------------------------
question: How many heroes have stealth power?
GT: SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Stealth'
Pred: SELECT COUNT(DISTINCT superhero.id) AS total_superheroes
FROM superhero
INNER JOIN hero_power ON superhero.id = hero_power.hero_id
INNER JOIN superpower ON hero_power.power_id = superpower.id
WHERE superpower.power_name = 'stealth';
------------------------------
question: What is the hero's full name with the highest attribute in strength?
GT: SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1
Pred: SELECT s.full_name
FROM superhero s
JOIN hero_attribute ha ON s.id = ha.hero_id
JOIN attribute a ON ha.attribute_id = a.id
WHERE a.attribute_name = 'strength'
AND ha.attribute_value = (
    SELECT MAX(ha.attribute_value)
    FROM hero_attribute ha
    JOIN attribute a ON ha.attribute_id = a.id
    WHERE a.attribute_name = 'strength'
);
------------------------------
question: What is the average of superheroes with no skin colour?
GT: SELECT CAST(COUNT(*) AS REAL) / SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id
Pred: SELECT 
    CAST(SUM(CASE WHEN s.skin_colour_id = 1 THEN 1 ELSE 0 END) AS REAL) / COUNT(*) AS average
FROM 
    superhero s;
------------------------------
question: Which superhero has the most durability published by Dark Horse Comics?
GT: SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1
Pred: SELECT s.superhero_name
FROM superhero s
JOIN publisher p ON s.publisher_id = p.id
JOIN hero_attribute ha ON s.id = ha.hero_id
JOIN attribute a ON ha.attribute_id = a.id
WHERE p.publisher_name = 'Dark Horse Comics'
  AND a.attribute_name = 'Durability'
  AND ha.attribute_value = (
    SELECT MAX(ha.attribute_value)
    FROM hero_attribute ha
    WHERE ha.attribute_id = a.id
      AND ha.hero_id = s.id
  );
------------------------------
question: List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.
GT: SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'
Pred: SELECT 
    c1.colour AS eye_colour,
    c2.colour AS hair_colour,
    c3.colour AS skin_colour
FROM 
    superhero s
INNER JOIN 
    gender g ON s.gender_id = g.id
INNER JOIN 
    colour c1 ON s.eye_colour_id = c1.id
INNER JOIN 
    colour c2 ON s.hair_colour_id = c2.id
INNER JOIN 
    colour c3 ON s.skin_colour_id = c3.id
INNER JOIN 
    publisher p ON s.publisher_id = p.id
WHERE 
    g.gender = 'Female' AND p.publisher_name = 'Dark Horse Comics';
------------------------------
question: How many percent of female heroes were published by Marvel Comics?
GT: SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T3.gender = 'Female'
Pred: SELECT 
    CAST(SUM(CASE WHEN g.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS percentage_female_heroes
FROM 
    superhero s
JOIN 
    gender g ON s.gender_id = g.id
JOIN 
    publisher p ON s.publisher_id = p.id
WHERE 
    p.publisher_name = 'Marvel Comics';
------------------------------
question: Calculate the average height for each superhero.
GT: SELECT CAST(SUM(height_cm) AS REAL) / COUNT(id) FROM superhero
Pred: SELECT superhero_name, AVG(height_cm) AS average_height
FROM superhero
GROUP BY superhero_name;
------------------------------
question: Which hero was the fastest?
GT: SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1
Pred: SELECT s.superhero_name
FROM superhero s
JOIN hero_attribute ha ON s.id = ha.hero_id
JOIN attribute a ON ha.attribute_id = a.id
WHERE a.attribute_name = 'Speed'
AND ha.attribute_value = (
    SELECT MAX(ha.attribute_value)
    FROM hero_attribute ha
    JOIN attribute a ON ha.attribute_id = a.id
    WHERE a.attribute_name = 'Speed'
);
------------------------------
question: Who is the tallest superhero?
GT: SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1
Pred: SELECT superhero_name
FROM superhero
WHERE height_cm = (SELECT MAX(height_cm) FROM superhero);
------------------------------
question: What is the power ID of cryokinesis?
GT: SELECT id FROM superpower WHERE power_name = 'Cryokinesis'
Pred: SELECT id 
FROM superpower 
WHERE power_name = 'cryokinesis';
------------------------------
question: List the full names of superheroes with missing weight.
GT: SELECT DISTINCT full_name FROM superhero WHERE full_name IS NOT NULL AND (weight_kg IS NULL OR weight_kg = 0)
Pred: SELECT full_name
FROM superhero
WHERE weight_kg = 0 OR weight_kg IS NULL;
------------------------------
question: What is the race of the superhero with maximum attribute value?
GT: SELECT T3.race FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN race AS T3 ON T1.race_id = T3.id ORDER BY T2.attribute_value DESC LIMIT 1
Pred: SELECT r.race
FROM superhero s
JOIN hero_attribute ha ON s.id = ha.hero_id
JOIN race r ON s.race_id = r.id
WHERE ha.attribute_value = (
    SELECT MAX(attribute_value)
    FROM hero_attribute
);
------------------------------
question: List down at least five full names of superheroes with blue eyes.
GT: SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5
Pred: SELECT superhero.full_name
FROM superhero
JOIN colour ON superhero.eye_colour_id = colour.id
WHERE colour.colour = 'Blue'
LIMIT 5;
------------------------------
question: Give the race of the blue-haired male superhero.
GT: SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Blue' AND T4.gender = 'Male'
Pred: SELECT r.race
FROM superhero s
INNER JOIN colour c ON s.hair_colour_id = c.id
INNER JOIN gender g ON s.gender_id = g.id
INNER JOIN race r ON s.race_id = r.id
WHERE c.colour = 'blue' AND g.gender = 'male';
------------------------------
question: Among the bad superheroes, what is the percentage of female superheroes?
GT: SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.alignment = 'Bad'
Pred: SELECT 
    ROUND(
        CAST(
            SUM(CASE WHEN g.gender = 'Female' THEN 1 ELSE 0 END) AS REAL
        ) / COUNT(s.id) * 100.0, 
        2
    ) AS percentage_female
FROM 
    superhero s
JOIN 
    gender g ON s.gender_id = g.id
JOIN 
    alignment a ON s.alignment_id = a.id
WHERE 
    a.alignment = 'Bad';
------------------------------
question: In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color.
GT: SELECT SUM(CASE WHEN T2.id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg = 0 OR T1.weight_kg is NULL
Pred: SELECT 
    SUM(CASE WHEN T2.id = 7 THEN 1 ELSE 0 END) - 
    SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) AS difference
FROM 
    superhero T1
JOIN 
    colour T2 ON T1.eye_colour_id = T2.id
WHERE 
    T1.weight_kg = 0
GROUP BY 
    T1.id;
------------------------------
question: Name the tallest superhero.
GT: SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1
Pred: SELECT MAX(height_cm) FROM superhero;
------------------------------
question: Among all superheroes in Marvel Comics, identify the percentage of 'good' superheroes.
GT: SELECT CAST(COUNT(CASE WHEN T3.alignment = 'Good' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.publisher_name = 'Marvel Comics'
Pred: SELECT 
    ROUND(
        CAST(
            SUM(CASE WHEN a.alignment = 'Good' THEN 1 ELSE 0 END) AS REAL
        ) / COUNT(s.id) * 100.0
    ) AS percentage_good_superheroes
FROM 
    superhero s
JOIN 
    alignment a ON s.alignment_id = a.id
JOIN 
    publisher p ON s.publisher_id = p.id
WHERE 
    p.publisher_name = 'Marvel Comics';
------------------------------
question: Please list the reference names of the drivers who are eliminated in the first period in race number 20.
GT: SELECT T2.driverRef FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 20 ORDER BY T1.q1 DESC LIMIT 5
Pred: SELECT d.driverRef
FROM qualifying q
JOIN drivers d ON q.driverId = d.driverId
WHERE q.raceId = 20 AND q.q1 = (
    SELECT MAX(q1)
    FROM qualifying
    WHERE raceId = 20
);
------------------------------
question: Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?
GT: SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'
Pred: SELECT races.url
FROM races
JOIN circuits ON races.circuitid = circuits.circuitid
WHERE circuits.name = 'Circuit de Barcelona-Catalunya';
------------------------------
question: Please list the positions of the circuits built by the constructor Renault.
GT: SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'Renault'
Pred: SELECT c.position
FROM circuits c
JOIN constructorStandings cs ON c.circuitId = cs.circuitId
JOIN constructors co ON cs.constructorId = co.constructorId
WHERE co.name = 'Renault';
------------------------------
question: How many races in the year 2010 are held on grand prixs outside Asia and Europe?
GT: SELECT COUNT(T3.raceId) FROM circuits AS T1 INNER JOIN races AS T3 ON T3.circuitID = T1.circuitId WHERE T1.country NOT IN ( 'Bahrain', 'China', 'Singapore', 'Japan', 'Korea', 'Turkey', 'UAE', 'Malaysia', 'Spain', 'Monaco', 'Azerbaijan', 'Austria', 'Belgium', 'France', 'Germany', 'Hungary', 'Italy', 'UK' ) AND T3.year = 2010
Pred: SELECT COUNT(*)
FROM races r
INNER JOIN circuits c ON r.circuitid = c.circuitid
WHERE r.year = 2010
  AND r.name = 'Grand Prix'
  AND c.country NOT IN ('Asia', 'Europe');
------------------------------
question: Where can I find the information about the races held on Sepang International Circuit?
GT: SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'
Pred: SELECT r.url
FROM races r
INNER JOIN circuits c ON r.circuitid = c.circuitid
WHERE c.name = 'Sepang International Circuit';
------------------------------
question: Which country is the constructor which got 1 point in the race No. 24 from?
GT: SELECT T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 24 AND T1.points = 1
Pred: SELECT c.country
FROM constructorStandings cs
INNER JOIN constructors c ON cs.constructorId = c.constructorId
WHERE cs.raceId = 24 AND cs.points = 1;
------------------------------
question: For the driver who had the Q2 time as 0:01:40 in the qualifying race No. 355, what is his nationality?
GT: SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 355 AND T1.q2 LIKE '1:40%'
Pred: SELECT d.nationality
FROM qualifying q
INNER JOIN drivers d ON q.driverId = d.driverId
WHERE q.raceId = 355 AND q.q2 = '0:01:40';
------------------------------
question: What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?
GT: SELECT T2.number FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 903 AND T1.q3 LIKE '1:54%'
Pred: SELECT number
FROM qualifying
WHERE raceId = 903 AND q3 = '0:01:54';
------------------------------
question: For all the drivers who finished the game in race No. 592, who is the oldest?
GT: SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 592 AND T2.time IS NOT NULL AND T1.dob IS NOT NULL ORDER BY T1.dob ASC LIMIT 1
Pred: SELECT d.driverid, d.forename, d.surname, d.dob
FROM drivers d
JOIN results r ON d.driverid = r.driverid
WHERE r.time IS NOT NULL AND r.raceid = 592
ORDER BY d.dob DESC
LIMIT 1;
------------------------------
question: Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.
GT: SELECT DISTINCT T2.forename, T2.surname, T2.url FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 161 AND T1.time LIKE '1:27%'
Pred: SELECT d.url
FROM drivers d
JOIN lapTimes l ON d.driverId = l.driverId
JOIN races r ON l.raceId = r.raceId
WHERE l.time LIKE '0:01:27%' AND r.raceId = 161;
------------------------------
question: For the driver who had the Q2 time as 0:01:15 in race No. 347, where is he from?
GT: SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 347 AND T1.q2 LIKE '1:15%'
Pred: SELECT d.nationality
FROM qualifying q
INNER JOIN drivers d ON q.driverId = d.driverId
WHERE q.raceId = 347 AND q.q2 = '0:01:15';
------------------------------
question: In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?
GT: SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 45 AND T1.q3 LIKE '1:33%'
Pred: SELECT d.code
FROM qualifying q
JOIN drivers d ON q.driverId = d.driverId
WHERE q.raceId = 45 AND q.q3 = '0:01:33';
------------------------------
question: For the race happened in 2015/11/29, how many drivers did not finish the game?
GT: SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NULL
Pred: SELECT COUNT(*) AS drivers_not_finished
FROM drivers d
INNER JOIN results r ON d.driverId = r.driverId
INNER JOIN races ra ON r.raceId = ra.raceId
WHERE ra.date = '2015-11-29' AND r.status != 'Finished';
------------------------------
question: For all the drivers who finished the game in race No. 872, who is the youngest?
GT: SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 872 AND T2.time IS NOT NULL ORDER BY T1.dob DESC LIMIT 1
Pred: SELECT d.driverRef, d.forename, d.surname
FROM drivers d
INNER JOIN results r ON d.driverId = r.driverId
WHERE r.raceId = 872 AND r.time IS NOT NULL
ORDER BY d.dob DESC
LIMIT 1;
------------------------------
question: Who was the driver that got the best lap time in the race No. 348? Give his full name.
GT: SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 348 ORDER BY T1.time ASC LIMIT 1
Pred: SELECT 
    d.forename || ' ' || d.surname AS driverName
FROM 
    drivers d
JOIN 
    lapTimes l ON d.driverId = l.driverId
WHERE 
    l.raceId = 348
ORDER BY 
    l.time ASC
LIMIT 1;
------------------------------
question: Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?
GT: SELECT (SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) - SUM(IIF(T2.raceId = 854, T2.fastestLapSpeed, 0))) * 100 / SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Paul' AND T1.surname = 'di Resta'
Pred: WITH FastestLapSpeedCTE AS (
    SELECT 
        r.raceId,
        r.fastestLapSpeed
    FROM 
        results r
    INNER JOIN 
        drivers d ON r.driverId = d.driverId
    WHERE 
        d.forename = 'Paul' AND d.surname = 'di Resta'
)
SELECT 
    (fastestLapSpeed - LAG(fastestLapSpeed) OVER (ORDER BY raceId)) / fastestLapSpeed * 100 AS speed_difference_percentage
FROM 
    FastestLapSpeedCTE
WHERE 
    raceId = 853;
------------------------------
question: Which year was the first Singapore Grand Prix?
GT: SELECT year FROM races WHERE name = 'Singapore Grand Prix' ORDER BY year ASC LIMIT 1
Pred: SELECT year
FROM races
WHERE name = 'Singapore Grand Prix';
------------------------------
question: How many races were there in 2005? Name all the races in descending order.
GT: SELECT name FROM races WHERE year = 2005 ORDER BY name DESC
Pred: SELECT 
    COUNT(*) AS total_races,
    (SELECT name FROM races WHERE year = 2005 ORDER BY name DESC) AS race_names
FROM 
    races
WHERE 
    year = 2005;
------------------------------
question: List the names of all races that occurred in the earliest recorded year and month.
GT: SELECT name FROM races WHERE STRFTIME('%Y', date) = ( SELECT STRFTIME('%Y', date) FROM races ORDER BY date ASC LIMIT 1 ) AND STRFTIME('%m', date) = ( SELECT STRFTIME('%m', date) FROM races ORDER BY date ASC LIMIT 1 )
Pred: SELECT name
FROM races
WHERE strftime('%Y-%m', date) = strftime('%Y-%m', MIN(date));
------------------------------
question: Name the races in year 2017 that are not hosted in year 2000.
GT: SELECT name FROM races WHERE year = 2017 AND name NOT IN ( SELECT name FROM races WHERE year = 2000 )
Pred: SELECT name
FROM races
WHERE year = 2017;
------------------------------
question: In which country was the first European Grand Prix hosted? Name the circuit and location.
GT: SELECT T1.country, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix' ORDER BY T2.year ASC LIMIT 1
Pred: SELECT c.country, c.name AS circuit_name, c.location
FROM races r
JOIN circuits c ON r.circuitid = c.circuitid
WHERE r.name = 'European Grand Prix'
ORDER BY r.year ASC
LIMIT 1;
------------------------------
question: When was the last f1 season whereby Brands Hatch hosted the British Grand Prix?
GT: SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch' AND T2.name = 'British Grand Prix' ORDER BY T2.year DESC LIMIT 1
Pred: SELECT MAX(r.year) AS last_season
FROM races r
JOIN circuits c ON r.circuitid = c.circuitid
WHERE c.name = 'Brands Hatch' AND r.name = 'British Grand Prix';
------------------------------
question: How many seasons has Silverstone Circuit hosted the United Kindom grand prix?
GT: SELECT COUNT(T2.circuitid) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit' AND T2.name = 'British Grand Prix'
Pred: SELECT COUNT(DISTINCT s.year) AS NumberOfSeasons
FROM races r
JOIN circuits c ON r.circuitid = c.circuitid
JOIN seasons s ON r.year = s.year
WHERE r.name = 'British Grand Prix'
AND c.name = 'Silverstone'
AND c.country = 'United Kingdom';
------------------------------
question: Name all drivers in the 2010 Singapore Grand Prix order by their position stands.
GT: SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Singapore Grand Prix' AND T1.year = 2010 ORDER BY T2.position ASC
Pred: SELECT 
    d.forename || ' ' || d.surname AS driver_name
FROM 
    drivers d
INNER JOIN 
    results r ON d.driverId = r.driverId
INNER JOIN 
    races ra ON r.raceId = ra.raceId
WHERE 
    ra.year = 2010 AND ra.name = 'Singapore Grand Prix'
ORDER BY 
    r.position;
------------------------------
question: State the driver with the most points scored. Find his full name with that points.
GT: SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId ORDER BY T2.points DESC LIMIT 1
Pred: SELECT 
    d.forename || ' ' || d.surname AS driver_name,
    SUM(r.points) AS total_points
FROM 
    drivers d
JOIN 
    results r ON d.driverId = r.driverId
GROUP BY 
    d.driverId, d.forename, d.surname
ORDER BY 
    total_points DESC
LIMIT 1;
------------------------------
question: Name the top 3 drivers and the points they scored in the 2017 Chinese Grand Prix.
GT: SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Chinese Grand Prix' AND T1.year = 2017 ORDER BY T2.points DESC LIMIT 3
Pred: -- Step 1: Create a CTE to rank drivers based on their points in the 2017 Chinese Grand Prix
WITH RankedDrivers AS (
    SELECT
        d.forename,
        d.surname,
        r.points,
        ROW_NUMBER() OVER (ORDER BY r.points DESC) AS rank
    FROM
        drivers d
    JOIN
        results r ON d.driverId = r.driverId
    JOIN
        races ra ON r.raceId = ra.raceId
    WHERE
        ra.year = 2017 AND ra.name = 'Chinese Grand Prix'
)

-- Step 2: Select the top 3 drivers from the CTE
SELECT
    rd.forename,
    rd.surname,
    rd.points
FROM
    RankedDrivers rd
WHERE
    rd.rank <= 3;
------------------------------
question: What is the best lap time recorded? List the driver and race with such recorded lap time.
GT: SELECT T2.milliseconds, T1.forename, T1.surname, T3.name FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.milliseconds ASC LIMIT 1
Pred: -- Step 1: Identify the relevant tables
-- Step 2: Determine the best lap time
-- Step 3: Join the tables
-- Step 4: Filter the results
-- Step 5: Select the required columns

SELECT 
    d.forename, 
    d.surname, 
    r.name AS race_name
FROM 
    drivers d
JOIN 
    lapTimes l ON d.driverId = l.driverId
JOIN 
    races r ON l.raceId = r.raceId
WHERE 
    l.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes);
------------------------------
question: Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.
GT: SELECT CAST(COUNT(CASE WHEN T2.position <> 1 THEN T2.position END) AS REAL) * 100 / COUNT(T2.driverStandingsId) FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.surname = 'Hamilton' AND T1.year >= 2010
Pred: SELECT 
    (COUNT(CASE WHEN r.position > 1 THEN 1 END) * 1.0 / COUNT(r.raceId)) * 100 AS percentage
FROM 
    drivers d
JOIN 
    results r ON d.driverId = r.driverId
JOIN 
    races ra ON r.raceId = ra.raceId
WHERE 
    d.surname = 'Hamilton' AND ra.year >= 2010;
------------------------------
question: Name the driver with the most winning. Mention his nationality and what is his maximum point scores.
GT: SELECT T1.forename, T1.surname, T1.nationality, MAX(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId WHERE T2.wins >= 1 GROUP BY T1.forename, T1.surname, T1.nationality ORDER BY COUNT(T2.wins) DESC LIMIT 1
Pred: SELECT 
    d.forename || ' ' || d.surname AS driver_name,
    d.nationality,
    MAX(ds.wins) AS max_wins,
    MAX(ds.points) AS max_points
FROM 
    drivers d
JOIN 
    driverStandings ds ON d.driverId = ds.driverId
GROUP BY 
    d.driverId, d.forename, d.surname, d.nationality
ORDER BY 
    max_wins DESC
LIMIT 1;
------------------------------
question: How old is the youngest Japanese driver? What is his name?
GT: SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1
Pred: SELECT 
    forename || ' ' || surname AS driver_name,
    (strftime('%Y', 'now') - strftime('%Y', dob)) AS age
FROM 
    drivers
WHERE 
    nationality = 'Japanese'
ORDER BY 
    age ASC
LIMIT 1;
------------------------------
question: List circuits which host 4 f1 races from year 1990 to 2000.
GT: SELECT DISTINCT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE STRFTIME('%Y', T2.date) BETWEEN '1990' AND '2000' GROUP BY T1.name HAVING COUNT(T2.raceId) = 4
Pred: SELECT 
    c.circuitRef, 
    c.name
FROM 
    races r
JOIN 
    circuits c ON r.circuitId = c.circuitId
WHERE 
    r.date BETWEEN '1990-01-01' AND '2000-12-31'
GROUP BY 
    c.circuitId
HAVING 
    COUNT(r.raceId) = 4;
------------------------------
question: Which race was Alex Yoong in when he was in track number less than 20?
GT: SELECT T1.name FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 20
Pred: SELECT DISTINCT r.name AS race_name
FROM drivers d
JOIN results res ON d.driverId = res.driverId
JOIN races r ON res.raceId = r.raceId
WHERE d.forename = 'Alex' AND d.surname = 'Yoong' AND res.position < 20;
------------------------------
question: How many times did Michael Schumacher won from races hosted in Sepang International Circuit?
GT: SELECT SUM(T2.wins) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId INNER JOIN circuits AS T4 ON T4.circuitId = T3.circuitId WHERE T1.forename = 'Michael' AND T1.surname = 'Schumacher' AND T4.name = 'Sepang International Circuit'
Pred: SELECT COUNT(*) AS wins
FROM drivers d
JOIN results r ON d.driverId = r.driverId
JOIN races ra ON r.raceId = ra.raceId
JOIN circuits c ON ra.circuitId = c.circuitId
WHERE d.forename = 'Michael' 
  AND d.surname = 'Schumacher' 
  AND c.name = 'Sepang International Circuit'
  AND r.points = (
    SELECT MAX(points) 
    FROM results 
    WHERE raceId = ra.raceId
  );
------------------------------
question: State the race and year of race in which Michael Schumacher had his fastest lap.
GT: SELECT T1.name, T1.year FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher' ORDER BY T2.milliseconds ASC LIMIT 1
Pred: SELECT r.name AS race_name, r.year AS race_year
FROM drivers d
JOIN results res ON d.driverId = res.driverId
JOIN races r ON res.raceId = r.raceId
WHERE d.forename = 'Michael' AND d.surname = 'Schumacher'
AND res.milliseconds = (
    SELECT MIN(milliseconds)
    FROM results
    WHERE driverId = (
        SELECT driverId
        FROM drivers
        WHERE forename = 'Michael' AND surname = 'Schumacher'
    )
);
------------------------------
question: What is Eddie Irvine's average points scored in year 2000?
GT: SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Eddie' AND T1.surname = 'Irvine' AND T3.year = 2000
Pred: SELECT AVG(r.points) AS average_points
FROM drivers d
JOIN results r ON d.driverId = r.driverId
JOIN races ra ON r.raceId = ra.raceId
WHERE d.forename = 'Eddie' AND d.surname = 'Irvine' AND ra.year = 2000;
------------------------------
question: Which was Lewis Hamilton first race? What was his points recorded for his first race event?
GT: SELECT T1.name, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.year ASC LIMIT 1
Pred: SELECT 
    d.forename || ' ' || d.surname AS driver_name,
    r.year,
    res.points
FROM 
    drivers d
JOIN 
    results res ON d.driverId = res.driverId
JOIN 
    races r ON res.raceId = r.raceId
WHERE 
    d.forename = 'Lewis' AND d.surname = 'Hamilton'
ORDER BY 
    r.year ASC
LIMIT 1;
------------------------------
question: List all races in 2017 and the hosting country order by date of the event.
GT: SELECT DISTINCT T2.name, T1.country FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2017 ORDER BY T2.date ASC
Pred: SELECT 
    r.name AS race_name,
    c.country AS hosting_country,
    r.date
FROM 
    races r
JOIN 
    circuits c ON r.circuitid = c.circuitid
WHERE 
    r.year = 2017
ORDER BY 
    r.date;
------------------------------
question: What is the most laps f1 races had? Name the race, year and circuit location where the races with most laps was hosted.
GT: SELECT T3.lap, T2.name, T2.year, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN lapTimes AS T3 ON T3.raceId = T2.raceId ORDER BY T3.lap DESC LIMIT 1
Pred: SELECT r.name AS race_name, r.year, c.location AS circuit_location
FROM races r
INNER JOIN circuits c ON r.circuitid = c.circuitid
WHERE r.raceid IN (
    SELECT raceid
    FROM results
    GROUP BY raceid
    HAVING MAX(laps) = (
        SELECT MAX(laps)
        FROM results
    )
);
------------------------------
question: Among all European Grand Prix races, what is the percentage of the races were hosted in Germany?
GT: SELECT CAST(COUNT(CASE WHEN T1.country = 'Germany' THEN T2.circuitID END) AS REAL) * 100 / COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix'
Pred: SELECT 
    (SUM(CASE WHEN r.country = 'Germany' THEN 1 ELSE 0 END) * 100.0 / COUNT(r.raceId)) AS percentage
FROM 
    races r
WHERE 
    r.name = 'European Grand Prix';
------------------------------
question: In which country can I find the circuit with the highest altitude?
GT: SELECT country FROM circuits ORDER BY alt DESC LIMIT 1
Pred: SELECT country
FROM circuits
WHERE alt = (SELECT MAX(alt) FROM circuits);
------------------------------
question: Which country is the oldest driver from?
GT: SELECT nationality FROM drivers WHERE dob IS NOT NULL ORDER BY dob ASC LIMIT 1
Pred: SELECT nationality
FROM drivers
ORDER BY dob DESC
LIMIT 1;
------------------------------
question: Please list the surnames of all the Italian drivers.
GT: SELECT surname FROM drivers WHERE nationality = 'Italian'
Pred: SELECT surname
FROM drivers
WHERE nationality = 'italian';
------------------------------
question: Please give more information about the Formula_1 races that used the Silverstone Circuit.
GT: SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'
Pred: SELECT r.url
FROM races r
JOIN circuits c ON r.circuitid = c.circuitid
WHERE c.name = 'Silverstone';
------------------------------
question: What time did the the 2010's Formula_1 race took place on the Abu Dhabi Circuit?
GT: SELECT T2.date, T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2010 AND T2.name = 'Abu Dhabi Grand Prix'
Pred: SELECT r.date
FROM races r
INNER JOIN circuits c ON r.circuitid = c.circuitid
WHERE r.year = 2010 AND c.circuitref = 'abudhabi';
------------------------------
question: Please list the exact dates on which a Formula_1 race took place on the Barcelona-Catalunya circuit.
GT: SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'
Pred: SELECT races.date
FROM races
JOIN circuits ON races.circuitid = circuits.circuitid
WHERE circuits.name = 'Barcelona-Catalunya';
------------------------------
question: Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name.
GT: SELECT T3.forename, T3.surname, T3.driverRef FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Canadian Grand Prix' AND T2.rank = 1 AND T1.year = 2007
Pred: SELECT d.driverRef
FROM races r
JOIN results res ON r.raceId = res.raceId
JOIN drivers d ON res.driverId = d.driverId
WHERE r.name = 'Canadian Grand Prix'
  AND r.year = 2007
  AND res.position = 1;
------------------------------
question: In which Formula_1 race did Lewis Hamilton rank the highest?
GT: SELECT name FROM races WHERE raceId IN ( SELECT raceId FROM results WHERE rank = 1 AND driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) )
Pred: SELECT r.name AS race_name
FROM drivers d
JOIN results res ON d.driverId = res.driverId
JOIN races r ON res.raceId = r.raceId
WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'
AND res.rank = (
    SELECT MIN(rank)
    FROM results
    WHERE driverId = (
        SELECT driverId
        FROM drivers
        WHERE forename = 'Lewis' AND surname = 'Hamilton'
    )
);
------------------------------
question: Which was the fastest lap for Lewis Hamilton in the 2008 Australian Grand Prix?
GT: SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton'
Pred: SELECT 
    lt.time AS fastest_lap_time
FROM 
    drivers d
JOIN 
    results r ON d.driverId = r.driverId
JOIN 
    races ra ON r.raceId = ra.raceId
JOIN 
    lapTimes lt ON r.driverId = lt.driverId AND r.raceId = lt.raceId
WHERE 
    d.forename = 'Lewis' AND d.surname = 'Hamilton'
    AND ra.name = 'Australian Grand Prix'
    AND ra.year = 2008
    AND lt.time = (
        SELECT 
            MIN(lt2.time)
        FROM 
            lapTimes lt2
        WHERE 
            lt2.driverId = d.driverId AND lt2.raceId = ra.raceId
    );
------------------------------
question: What's the finish time for the driver who ranked second in 2008's AustChineseralian Grand Prix?
GT: SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank = 2 AND T2.name = 'Chinese Grand Prix' AND T2.year = 2008
Pred: SELECT 
    res.time AS finish_time
FROM 
    races r
INNER JOIN 
    results res ON r.raceId = res.raceId
WHERE 
    r.name = 'Australian Grand Prix' 
    AND r.year = 2008 
    AND res.position = 2;
------------------------------
question: What is the average fastest lap time in seconds for Lewis Hamilton in all the Formula_1 races?
GT: SELECT AVG(CAST(SUBSTR(T2.fastestLapTime, 1, INSTR(T2.fastestLapTime, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(T2.fastestLapTime, INSTR(T2.fastestLapTime, ':') + 1) AS REAL)) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.surname = 'Hamilton' AND T1.forename = 'Lewis'
Pred: WITH FastestLapTimes AS (
    SELECT 
        r.raceId,
        r.fastestLapTime,
        (CAST(SUBSTR(r.fastestLapTime, 1, 2) AS INTEGER) * 60 + 
         CAST(SUBSTR(r.fastestLapTime, 4, 2) AS INTEGER) + 
         CAST(SUBSTR(r.fastestLapTime, 7, 3) AS REAL) / 1000) AS fastestLapTimeInSeconds
    FROM 
        results r
    INNER JOIN 
        drivers d ON r.driverId = d.driverId
    WHERE 
        d.forename = 'Lewis' AND d.surname = 'Hamilton'
)
SELECT 
    AVG(fastestLapTimeInSeconds) AS averageFastestLapTimeInSeconds
FROM 
    FastestLapTimes;
------------------------------
question: What is the rate of drivers completing all the laps in the 2008 Australian Grand Prix?
GT: SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.resultId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008
Pred: SELECT 
    SUM(CASE WHEN r.time IS NOT NULL THEN 1 ELSE 0 END) * 1.0 / COUNT(r.driverId) AS rate
FROM 
    results r
JOIN 
    races ra ON r.raceId = ra.raceId
WHERE 
    ra.year = 2008 AND ra.name = 'Australian Grand Prix';
------------------------------
question: How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix?
GT: WITH time_in_seconds AS ( SELECT T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6) AS REAL) ELSE CAST(SUBSTR(T1.time, 2) AS REAL) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL AND T2.year = 2008 ), champion_time AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = 1), last_driver_incremental AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = (SELECT MAX(positionOrder) FROM time_in_seconds) ) SELECT (CAST((SELECT time_seconds FROM last_driver_incremental) AS REAL) * 100) / (SELECT time_seconds + (SELECT time_seconds FROM last_driver_incremental) FROM champion_time)
Pred: WITH RaceDetails AS (
    SELECT raceId
    FROM races
    WHERE name = 'Australian Grand Prix' AND year = 2008
),
ChampionTime AS (
    SELECT MIN(time) AS champion_time
    FROM results
    WHERE raceId = (SELECT raceId FROM RaceDetails)
),
LastDriverTime AS (
    SELECT MAX(time) AS last_driver_time
    FROM results
    WHERE raceId = (SELECT raceId FROM RaceDetails)
)
SELECT 
    (CAST(REPLACE(SUBSTR((SELECT champion_time FROM ChampionTime), 1, 2), ':', '') AS REAL) * 60 + 
     CAST(REPLACE(SUBSTR((SELECT champion_time FROM ChampionTime), 4, 2), ':', '') AS REAL) + 
     CAST(REPLACE(SUBSTR((SELECT champion_time FROM ChampionTime), 7, 3), '.', '') AS REAL)) - 
    (CAST(REPLACE(SUBSTR((SELECT last_driver_time FROM LastDriverTime), 1, 2), ':', '') AS REAL) * 60 + 
     CAST(REPLACE(SUBSTR((SELECT last_driver_time FROM LastDriverTime), 4, 2), ':', '') AS REAL) + 
     CAST(REPLACE(SUBSTR((SELECT last_driver_time FROM LastDriverTime), 7, 3), '.', '') AS REAL)) AS time_difference,
    ((CAST(REPLACE(SUBSTR((SELECT champion_time FROM ChampionTime), 1, 2), ':', '') AS REAL) * 60 + 
     CAST(REPLACE(SUBSTR((SELECT champion_time FROM ChampionTime), 4, 2), ':', '') AS REAL) + 
     CAST(REPLACE(SUBSTR((SELECT champion_time FROM ChampionTime), 7, 3), '.', '') AS REAL)) - 
    (CAST(REPLACE(SUBSTR((SELECT last_driver_time FROM LastDriverTime), 1, 2), ':', '') AS REAL) * 60 + 
     CAST(REPLACE(SUBSTR((SELECT last_driver_time FROM LastDriverTime), 4, 2), ':', '') AS REAL) + 
     CAST(REPLACE(SUBSTR((SELECT last_driver_time FROM LastDriverTime), 7, 3), '.', '') AS REAL)) / 
    (CAST(REPLACE(SUBSTR((SELECT last_driver_time FROM LastDriverTime), 1, 2), ':', '') AS REAL) * 60 + 
     CAST(REPLACE(SUBSTR((SELECT last_driver_time FROM LastDriverTime), 4, 2), ':', '') AS REAL) + 
     CAST(REPLACE(SUBSTR((SELECT last_driver_time FROM LastDriverTime), 7, 3), '.', '') AS REAL)) * 100 AS percentage_difference
------------------------------
question: How many circuits are there in Adelaide, Australia?
GT: SELECT COUNT(circuitId) FROM circuits WHERE location = 'Adelaide' AND country = 'Australia'
Pred: SELECT COUNT(*) 
FROM circuits 
WHERE country = 'Australia' AND location = 'Melbourne';
------------------------------
question: Which constructor has the highest point?
GT: SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId ORDER BY T1.points DESC LIMIT 1
Pred: SELECT c.name
FROM constructors c
JOIN constructorStandings cs ON c.constructorId = cs.constructorId
GROUP BY c.name
ORDER BY SUM(cs.points) DESC
LIMIT 1;
------------------------------
question: How many Japanese constructors have 0 points in 2 races?
GT: SELECT COUNT(T1.raceId) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T2.nationality = 'Japanese' GROUP BY T1.constructorId HAVING COUNT(raceId) = 2
Pred: SELECT COUNT(*) AS count
FROM (
    SELECT cs.constructorId
    FROM constructorStandings cs
    JOIN constructors c ON cs.constructorId = c.constructorId
    WHERE cs.points = 0 AND c.nationality = 'Japanese'
    GROUP BY cs.constructorId
    HAVING COUNT(cs.raceId) = 2
) AS cs;
------------------------------
question: Which constructors have been ranked 1?
GT: SELECT DISTINCT T2.name FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.rank = 1
Pred: SELECT c.name
FROM constructorStandings cs
JOIN constructors c ON cs.constructorId = c.constructorId
WHERE cs.position = 1;
------------------------------
question: Please calculate the race completion percentage of Japanese drivers from 2007 to 2009.
GT: SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.raceId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T3.nationality = 'Japanese' AND T2.year BETWEEN 2007 AND 2009
Pred: SELECT 
    ROUND(
        (COUNT(CASE WHEN r.time IS NOT NULL THEN 1 END) * 100.0 / COUNT(*)), 
        2
    ) AS race_completion_percentage
FROM 
    drivers d
JOIN 
    results r ON d.driverId = r.driverId
JOIN 
    races ra ON r.raceId = ra.raceId
WHERE 
    d.nationality = 'Japanese' 
    AND ra.year BETWEEN 2007 AND 2009;
------------------------------
question: What is the average time in seconds of champion for each year, before year 1975?
GT: WITH time_in_seconds AS ( SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6,2) AS REAL )   + CAST(SUBSTR(T1.time, 9) AS REAL)/1000 ELSE 0 END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL ), champion_time AS ( SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1 ) SELECT year, AVG(time_seconds) FROM champion_time WHERE year < 1975 GROUP BY year HAVING AVG(time_seconds) IS NOT NULL
Pred: SELECT 
    r.year,
    AVG(strftime('%s', r.time) - strftime('%s', '00:00:00')) AS average_time_seconds
FROM 
    results r
JOIN 
    (SELECT 
         raceId, 
         MAX(points) AS max_points
     FROM 
         results
     GROUP BY 
         raceId) max_points ON r.raceId = max_points.raceId AND r.points = max_points.max_points
JOIN 
    races ra ON r.raceId = ra.raceId
WHERE 
    r.status = 'Finished' 
    AND r.time IS NOT NULL 
    AND ra.year < 1975
GROUP BY 
    r.year;
------------------------------
question: Which drivers born after 1975 have been ranked 2? Please give their forenames and surnames.
GT: SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) > '1975' AND T1.rank = 2
Pred: SELECT DISTINCT d.forename, d.surname
FROM drivers d
JOIN results r ON d.driverId = r.driverId
WHERE d.dob > '1975-12-31'
AND r.position = 2;
------------------------------
question: Which driver has the fastest lap time? Please give their forenames and surnames.
GT: SELECT T2.forename, T2.surname, T1.fastestLapTime FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime ASC LIMIT 1
Pred: SELECT d.forename, d.surname
FROM results r
JOIN drivers d ON r.driverId = d.driverId
WHERE r.fastestLapTime = (
    SELECT MIN(fastestLapTime)
    FROM results
);
------------------------------
question: What is the fastest lap number of the champion in 2009?
GT: SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T1.time LIKE '_:%:__.___'
Pred: SELECT 
    driverId
FROM 
    driverStandings
WHERE 
    year = 2009
ORDER BY 
    points DESC
LIMIT 1
------------------------------
question: From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50?
GT: SELECT CAST(SUM(IIF(STRFTIME('%Y', T3.dob) < '1985' AND T1.laps > 50, 1, 0)) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.year BETWEEN 2000 AND 2005
Pred: WITH RelevantDrivers AS (
    SELECT COUNT(DISTINCT r.driverId) AS relevant_count
    FROM results r
    JOIN races ra ON r.raceId = ra.raceId
    JOIN drivers d ON r.driverId = d.driverId
    WHERE strftime('%Y', d.dob) < '1985'
      AND r.laps > 50
      AND ra.year BETWEEN 2000 AND 2005
),
TotalDrivers AS (
    SELECT COUNT(DISTINCT r.driverId) AS total_count
    FROM results r
    JOIN races ra ON r.raceId = ra.raceId
    WHERE ra.year BETWEEN 2000 AND 2005
)
SELECT 
    CAST((SELECT relevant_count FROM RelevantDrivers) AS REAL) * 100 / (SELECT total_count FROM TotalDrivers) AS percentage
;
------------------------------
question: List out the code for drivers who have nationality in America.
GT: SELECT code FROM drivers WHERE Nationality = 'American'
Pred: SELECT code
FROM drivers
WHERE nationality = 'America';
------------------------------
question: How many driver participated in race ID number 18?
GT: SELECT COUNT(driverId) FROM driverStandings WHERE raceId = 18
Pred: SELECT COUNT(DISTINCT driverId) AS NumberOfDrivers
FROM results
WHERE raceId = 18;
------------------------------
question: State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?
GT: SELECT COUNT(*) FROM ( SELECT T1.nationality FROM drivers AS T1 ORDER BY JULIANDAY(T1.dob) DESC LIMIT 3) AS T3 WHERE T3.nationality = 'Dutch'
Pred: SELECT 
    d.code,
    SUM(CASE WHEN d.nationality = 'Netherlands' THEN 1 ELSE 0 END) AS netherlandic_drivers
FROM 
    drivers d
WHERE 
    d.driverId IN (
        SELECT 
            driverId 
        FROM 
            drivers 
        ORDER BY 
            dob DESC 
        LIMIT 3
    );
------------------------------
question: List out top 3 German drivers who were born from 1980-1990 and have the earliest lap time.
GT: SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1990' ORDER BY T1.time LIMIT 3
Pred: WITH DriverLapTimes AS (
    SELECT 
        d.driverId,
        d.forename,
        d.surname,
        l.time AS lap_time
    FROM 
        drivers d
    JOIN 
        laptimes l ON d.driverId = l.driverId
    WHERE 
        d.nationality = 'German'
        AND strftime('%Y', d.dob) BETWEEN '1980' AND '1990'
),
MinLapTimes AS (
    SELECT 
        driverId,
        MIN(lap_time) AS min_lap_time
    FROM 
        DriverLapTimes
    GROUP BY 
        driverId
),
RankedDrivers AS (
    SELECT 
        dlt.driverId,
        dlt.forename,
        dlt.surname,
        dlt.lap_time,
        mlt.min_lap_time,
        RANK() OVER (ORDER BY mlt.min_lap_time ASC) AS rank
    FROM 
        DriverLapTimes dlt
    JOIN 
        MinLapTimes mlt ON dlt.driverId = mlt.driverId
)
SELECT 
    rd.forename,
    rd.surname,
    rd.min_lap_time
FROM 
    RankedDrivers rd
WHERE 
    rd.rank <= 3;
------------------------------
question: List out top 10 Spanish drivers who were born before 1982 and have the latest lap time.
GT: SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Spanish' AND STRFTIME('%Y', T2.dob) < '1982' ORDER BY T1.time DESC LIMIT 10
Pred: SELECT d.driverRef, d.forename, d.surname, lt.time
FROM drivers d
JOIN laptimes lt ON d.driverId = lt.driverId
WHERE d.nationality = 'Spanish'
  AND strftime('%Y', d.dob) < '1982'
  AND lt.milliseconds = (
    SELECT MAX(lt.milliseconds)
    FROM laptimes lt
    WHERE lt.driverId = d.driverId
  )
ORDER BY lt.time DESC
LIMIT 10;
------------------------------
question: Which year has the lowest speed of lap time?
GT: SELECT T2.year FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId ORDER BY T1.time DESC LIMIT 1
Pred: SELECT r.year
FROM races r
JOIN results res ON r.raceid = res.raceid
ORDER BY 
    CAST(REPLACE(SUBSTR(res.time, 4, 2), ':', '') AS INTEGER) * 60 + 
    CAST(SUBSTR(res.time, 7, 2) AS INTEGER) + 
    CAST(SUBSTR(res.time, 10, 3) AS INTEGER) / 1000
LIMIT 1;
------------------------------
question: List the driver's ID of the top five driver, by descending order, the fastest time during the first lap of the race.
GT: SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time LIMIT 5
Pred: WITH FirstLapTimes AS (
    SELECT 
        driverId,
        MIN(time) AS fastest_time
    FROM 
        lapTimes
    WHERE 
        lap = 1
    GROUP BY 
        driverId
),
RankedDrivers AS (
    SELECT 
        driverId,
        fastest_time,
        ROW_NUMBER() OVER (ORDER BY fastest_time DESC) AS rank
    FROM 
        FirstLapTimes
)
SELECT 
    driverId
FROM 
    RankedDrivers
WHERE 
    rank <= 5;
------------------------------
question: How many times the circuits were held in Austria? Please give their location and coordinates.
GT: SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Austria'
Pred: SELECT 
    (SELECT COUNT(*) FROM circuits WHERE country = 'Austria') AS count,
    circuits.location,
    circuits.lat,
    circuits.lng
FROM 
    circuits
WHERE 
    circuits.country = 'Austria';
------------------------------
question: What race number has the most finishers?
GT: SELECT raceId FROM results GROUP BY raceId ORDER BY COUNT(time IS NOT NULL) DESC LIMIT 1
Pred: SELECT raceId, COUNT(*) AS num_finishers
FROM results
WHERE time IS NOT NULL
GROUP BY raceId
ORDER BY num_finishers DESC
LIMIT 1;
------------------------------
question: On what year did the youngest driver had his first qualifying race? Also state the name, date and time of the race.
GT: SELECT T3.year, T3.name, T3.date, T3.time FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1
Pred: WITH youngest_driver AS (
    SELECT driverId
    FROM drivers
    WHERE dob = (SELECT MAX(dob) FROM drivers)
),
first_qualifying_race AS (
    SELECT q.driverId, r.year, r.name, r.date, r.time
    FROM qualifying q
    JOIN races r ON q.raceId = r.raceId
    WHERE q.driverId = (SELECT driverId FROM youngest_driver)
    ORDER BY r.date
    LIMIT 1
)
SELECT year, name, time
FROM first_qualifying_race;
------------------------------
question: How many American drivers have puncture status.
GT: SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 on T1.driverId = T2.driverId INNER JOIN status AS T3 on T2.statusId = T3.statusId WHERE T3.status = 'Puncture' AND T1.nationality = 'American'
Pred: SELECT COUNT(*) AS count
FROM drivers d
JOIN results r ON d.driverId = r.driverId
WHERE d.nationality = 'American' AND r.status = 'Puncture';
------------------------------
question: Which of the Italian constructor got the highest point to date? Give its introduction website?
GT: SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId WHERE T1.nationality = 'Italian' ORDER BY T2.points DESC LIMIT 1
Pred: SELECT c.name, c.url
FROM constructors c
JOIN constructorstandings cs ON c.constructorid = cs.constructorid
WHERE c.nationality = 'Italian'
GROUP BY c.constructorid
ORDER BY SUM(cs.points) DESC
LIMIT 1;
------------------------------
question: What is the website of the constructor who tallied the most total wins.
GT: SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId ORDER BY T2.wins DESC LIMIT 1
Pred: SELECT c.url
FROM constructors c
JOIN constructorStandings cs ON c.constructorId = cs.constructorId
GROUP BY c.constructorId
ORDER BY SUM(cs.wins) DESC
LIMIT 1;
------------------------------
question: Among the drivers who participated in the French Grand Prix, who has the slowest time in the 3rd lap.
GT: SELECT T1.driverId FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'French Grand Prix' AND T1.lap = 3 ORDER BY T1.time DESC LIMIT 1
Pred: SELECT d.forename, d.surname
FROM drivers d
INNER JOIN laptimes l ON d.driverid = l.driverid
INNER JOIN races r ON l.raceid = r.raceid
WHERE r.name = 'French Grand Prix' AND l.lap = 3
ORDER BY l.time DESC
LIMIT 1;
------------------------------
question: In which race did the fastest 1st lap time was recorded? Please indicate the time in milliseconds.
GT: SELECT T1.milliseconds FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.lap = 1 ORDER BY T1.time LIMIT 1
Pred: SELECT r.name AS race_name, r.date AS race_date, lt.time AS fastest_lap_time_ms
FROM lapTimes lt
JOIN races r ON lt.raceId = r.raceId
WHERE lt.time = (
    SELECT MIN(time)
    FROM lapTimes
    WHERE lap = 1
)
AND lt.lap = 1;
------------------------------
question: List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985.
GT: SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1985' GROUP BY T2.forename, T2.surname ORDER BY AVG(T1.duration) LIMIT 3
Pred: WITH DriverPitStops AS (
    SELECT 
        d.driverId,
        d.forename,
        d.surname,
        AVG(p.duration) AS avg_pit_stop_duration
    FROM 
        drivers d
    JOIN 
        pitStops p ON d.driverId = p.driverId
    WHERE 
        d.nationality = 'German' AND 
        strftime('%Y', d.dob) BETWEEN '1980' AND '1985'
    GROUP BY 
        d.driverId
),
RankedDrivers AS (
    SELECT 
        driverId,
        forename,
        surname,
        avg_pit_stop_duration,
        ROW_NUMBER() OVER (ORDER BY avg_pit_stop_duration ASC) AS rank
    FROM 
        DriverPitStops
)
SELECT 
    driverId,
    forename,
    surname,
    avg_pit_stop_duration
FROM 
    RankedDrivers
WHERE 
    rank <= 3;
------------------------------
question: Who is the champion of the Canadian Grand Prix in 2008? Indicate his finish time.
GT: SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T2.year = 2008 AND T1.time LIKE '_:%:__.___'
Pred: WITH RaceResultsCTE AS (
    SELECT 
        r.raceId,
        r.year,
        r.name AS raceName,
        res.driverId,
        res.position,
        res.points,
        res.milliseconds,
        ROW_NUMBER() OVER (PARTITION BY r.raceId ORDER BY res.points DESC) AS rank
    FROM 
        races r
    INNER JOIN 
        results res ON r.raceId = res.raceId
    WHERE 
        r.year = 2008 AND r.name = 'Canadian Grand Prix'
)
SELECT 
    d.forename || ' ' || d.surname AS driverName,
    strftime('%H:%M:%S.%f', rr.milliseconds / 1000, 'unixepoch') AS finishTime
FROM 
    RaceResultsCTE rr
INNER JOIN 
    drivers d ON rr.driverId = d.driverId
WHERE 
    rr.rank = 1;
------------------------------
question: Find the full name, Wiki Pedia page link, and date of birth of German drivers born between 1971 and 1985. List it in descending order of date of birth.
GT: SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC
Pred: SELECT 
    d.forename || ' ' || d.surname AS full_name,
    d.url,
    d.dob
FROM 
    drivers d
WHERE 
    d.nationality = 'German' 
    AND strftime('%Y', d.dob) BETWEEN '1971' AND '1985'
ORDER BY 
    d.dob DESC;
------------------------------
question: In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?
GT: SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'
Pred: SELECT location, country, lat, lng
FROM circuits
WHERE name = 'Hungaroring';
------------------------------
question: Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team.
GT: SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T2.name ORDER BY SUM(T1.points) DESC LIMIT 1
Pred: SELECT 
    c.name AS constructor_name,
    c.nationality,
    SUM(cs.points) AS total_points
FROM 
    races r
JOIN 
    constructorStandings cs ON r.raceId = cs.raceId
JOIN 
    constructors c ON cs.constructorId = c.constructorId
WHERE 
    r.name = 'Monaco Grand Prix' 
    AND r.year BETWEEN 1980 AND 2010
GROUP BY 
    c.name, c.nationality
ORDER BY 
    total_points DESC
LIMIT 1;
------------------------------
question: What is the average score of Lewis Hamilton among all the Turkish Grand Prix?
GT: SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.name = 'Turkish Grand Prix'
Pred: SELECT AVG(r.points) AS average_score
FROM drivers d
JOIN results r ON d.driverId = r.driverId
JOIN races ra ON r.raceId = ra.raceId
WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' AND ra.name = 'Turkish Grand Prix';
------------------------------
question: What is the annual average number of races held during the first 10 years of the 21st century?
GT: SELECT CAST(SUM(CASE WHEN year BETWEEN 2000 AND 2010 THEN 1 ELSE 0 END) AS REAL) / 10 FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31'
Pred: SELECT AVG(race_count) AS average_races
FROM (
    SELECT year, COUNT(raceId) AS race_count
    FROM races
    WHERE year BETWEEN 2000 AND 2009
    GROUP BY year
) AS yearly_race_counts;
------------------------------
question: In terms of number of points acquired, how many victories did the driver who ranked 91st acquired?
GT: SELECT SUM(CASE WHEN points = 91 THEN wins ELSE 0 END) FROM driverStandings
Pred: SELECT ds.wins
FROM driverStandings ds
INNER JOIN drivers d ON ds.driverId = d.driverId
WHERE ds.positionText = '91';
------------------------------
question: Which racetrack hosted the most recent race? Indicate the full location.
GT: SELECT T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.date DESC LIMIT 1
Pred: SELECT location, country
FROM races
ORDER BY date DESC
LIMIT 1;
------------------------------
question: What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?
GT: SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE q3 IS NOT NULL AND T3.year = 2008 AND T3.circuitId IN ( SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit' ) ORDER BY CAST(SUBSTR(q3, 1, INSTR(q3, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(q3, INSTR(q3, ':') + 1, INSTR(q3, '.') - INSTR(q3, ':') - 1) AS REAL) + CAST(SUBSTR(q3, INSTR(q3, '.') + 1) AS REAL) / 1000 ASC LIMIT 1
Pred: SELECT d.forename || ' ' || d.surname AS driver_name
FROM qualifying q
JOIN races r ON q.raceid = r.raceid
JOIN circuits c ON r.circuitid = c.circuitid
JOIN drivers d ON q.driverid = d.driverid
WHERE r.year = 2008
  AND c.name = 'Marina Bay Street Circuit'
  AND q.position = 1
  AND q.raceid = (
    SELECT raceid
    FROM qualifying
    WHERE raceid = r.raceid
    ORDER BY position
    LIMIT 1 OFFSET 2
  );
------------------------------
question: As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined.
GT: SELECT T1.forename, T1.surname, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN driverStandings AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T2.raceId = T3.raceId ORDER BY JULIANDAY(T1.dob) DESC LIMIT 1
Pred: SELECT 
    d.forename || ' ' || d.surname AS driver_name,
    d.nationality,
    ra.name AS race_name
FROM 
    drivers d
JOIN 
    results r ON d.driverId = r.driverId
JOIN 
    races ra ON r.raceId = ra.raceId
WHERE 
    d.dob = (SELECT MIN(dob) FROM drivers)
    AND ra.date = (
        SELECT MIN(date) 
        FROM races 
        WHERE raceId IN (
            SELECT raceId 
            FROM results 
            WHERE driverId = d.driverId
        )
    );
------------------------------
question: How many wins was achieved by the oldest racer? Indicate his/her full name.
GT: SELECT SUM(T1.wins),T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId ORDER BY T2.dob ASC LIMIT 1
Pred: SELECT 
    d.forename || ' ' || d.surname AS driverName,
    SUM(ds.wins) AS totalWins
FROM 
    drivers d
JOIN 
    driverStandings ds ON d.driverId = ds.driverId
WHERE 
    d.dob = (SELECT MIN(dob) FROM drivers);
------------------------------
question: Among all the lap records set on various circuits, what is the time for the fastest one?
GT: SELECT time FROM lapTimes ORDER BY (CASE WHEN INSTR(time, ':') <> INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':') THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 3600 ELSE 0 END) + (CAST(SUBSTR(time, INSTR(time, ':') - 2 * (INSTR(time, ':') = INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':')), INSTR(time, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL)) + (CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000) ASC LIMIT 1
Pred: SELECT MIN(time) AS fastest_lap_time
FROM lapTimes;
------------------------------
question: Please list the time each driver spent at the pit stop during the 2011 Australian Grand Prix.
GT: SELECT T1.duration FROM pitStops AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2011 AND T2.name = 'Australian Grand Prix'
Pred: SELECT 
    ps.driverId,
    ps.duration
FROM 
    pitStops ps
JOIN 
    races r ON ps.raceId = r.raceId
WHERE 
    r.year = 2011 AND r.name = 'Australian Grand Prix'
ORDER BY 
    ps.driverId;
------------------------------
question: What is the lap record set by Lewis Hamilton in a Formula_1 race?
GT: SELECT T1.time FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'
Pred: SELECT MIN(lt.time) AS fastest_lap_time
FROM drivers d
JOIN lapTimes lt ON d.driverId = lt.driverId
WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';
------------------------------
question: Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names.
GT: WITH lap_times_in_seconds AS (SELECT driverId, (CASE WHEN SUBSTR(time, 1, INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 60 ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL) ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, '.') + 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000 ELSE 0 END) AS time_in_seconds FROM lapTimes) SELECT T2.forename, T2.surname, T1.driverId FROM (SELECT driverId, MIN(time_in_seconds) AS min_time_in_seconds FROM lap_times_in_seconds GROUP BY driverId) AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.min_time_in_seconds ASC LIMIT 20
Pred: SELECT d.forename || ' ' || d.surname AS driver_name
FROM drivers d
JOIN laptimes l ON d.driverId = l.driverId
WHERE l.time = (
    SELECT MIN(time)
    FROM laptimes
)
ORDER BY l.time ASC
LIMIT 20;
------------------------------
question: What was the position of the circuits during Lewis Hamilton's fastest lap in a Formula_1 race?
GT: SELECT T1.position FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.time ASC LIMIT 1
Pred: SELECT r.position AS circuit_position
FROM drivers d
JOIN results res ON d.driverId = res.driverId
JOIN races r ON res.raceId = r.raceId
JOIN circuits c ON r.circuitId = c.circuitId
WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'
AND (r.raceId, res.position) IN (
    SELECT raceId, position
    FROM results
    WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')
    ORDER BY time
    LIMIT 1
);
------------------------------
question: What is the lap record for the Austrian Grand Prix Circuit?
GT: WITH fastest_lap_times AS ( SELECT T1.raceId, T1.fastestLapTime FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL) SELECT MIN(fastest_lap_times.fastestLapTime) as lap_record FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix'
Pred: SELECT MIN(r.time) AS fastest_lap_time
FROM races ra
INNER JOIN circuits c ON ra.circuitid = c.circuitid
INNER JOIN results r ON ra.raceid = r.raceid
WHERE c.name = 'Austrian Grand Prix Circuit';
------------------------------
question: Please list the lap records for the circuits in Italy.
GT: WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1
Pred: WITH ItalianCircuits AS (
    SELECT circuitId
    FROM circuits
    WHERE country = 'Italy'
),
FastestLapTimes AS (
    SELECT 
        r.raceId,
        r.driverId,
        MIN(r.milliseconds) AS fastest_lap_time
    FROM 
        results r
    INNER JOIN 
        ItalianCircuits ic ON r.raceId = ic.circuitId
    GROUP BY 
        r.raceId, r.driverId
)
SELECT 
    d.forename || ' ' || d.surname AS driver_name,
    flt.fastest_lap_time
FROM 
    FastestLapTimes flt
INNER JOIN 
    drivers d ON flt.driverId = d.driverId;
------------------------------
question: In which Formula_1 race was the lap record for the Austrian Grand Prix Circuit set?
GT: WITH fastest_lap_times AS ( SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T2.name FROM races AS T2 INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN results AS T1 on T2.raceId = T1.raceId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix'
Pred: SELECT r.name AS race_name
FROM races r
JOIN circuits c ON r.circuitid = c.circuitid
JOIN lapTimes lt ON r.raceid = lt.raceid
WHERE c.name = 'Austrian Grand Prix'
AND lt.time = (
    SELECT MIN(lt2.time)
    FROM lapTimes lt2
    WHERE lt2.raceid = r.raceid
);
------------------------------
question: In the race a driver set the lap record for the Austrian Grand Prix Circuit, how long did he spent at the pit stop at that same race?
GT: WITH fastest_lap_times AS ( SELECT T1.raceId, T1.driverId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL), lap_record_race AS ( SELECT T1.raceId, T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix') SELECT T4.duration FROM lap_record_race INNER JOIN pitStops AS T4 on lap_record_race.raceId = T4.raceId AND lap_record_race.driverId = T4.driverId
Pred: SELECT pitStops.duration
FROM pitStops
WHERE pitStops.raceId = (
    SELECT races.raceId
    FROM races
    WHERE races.name = 'Austrian Grand Prix Circuit'
)
AND pitStops.driverId = (
    SELECT results.driverId
    FROM results
    WHERE results.raceId = (
        SELECT races.raceId
        FROM races
        WHERE races.name = 'Austrian Grand Prix Circuit'
    )
    AND results.fastestLapTime IS NOT NULL
);
------------------------------
question: Please list the location coordinates of the circuits whose lap record is 1:29.488.
GT: SELECT T3.lat, T3.lng FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T1.time = '1:29.488'
Pred: SELECT circuits.lat, circuits.lng
FROM results
INNER JOIN races ON results.raceid = races.raceid
INNER JOIN circuits ON races.circuitid = circuits.circuitid
WHERE results.time = '1:29.488';
------------------------------
question: What is the height of the tallest player? Indicate his name.
GT: SELECT player_name FROM Player ORDER BY height DESC LIMIT 1
Pred: SELECT height, player_name
FROM Player
WHERE height = (SELECT MAX(height) FROM Player);
------------------------------
question: What is the preferred foot when attacking of the player with the lowest potential?
GT: SELECT preferred_foot FROM Player_Attributes WHERE potential IS NOT NULL ORDER BY potential ASC LIMIT 1
Pred: SELECT preferred_foot
FROM Player_Attributes
ORDER BY potential ASC
LIMIT 1;
------------------------------
question: Among the players with an overall rating between 60 to 65, how many players whose going to be in all of your attack moves instead of defensing?
GT: SELECT COUNT(id) FROM Player_Attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low'
Pred: SELECT COUNT(*)
FROM Player p
JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id
WHERE pa.overall_rating >= 60 AND pa.overall_rating < 65 AND pa.defensive_work_rate = 'low';
------------------------------
question: Who are the top 5 players who perform better in crossing actions? Indicate their player id.
GT: SELECT id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5
Pred: SELECT player_api_id
FROM Player_Attributes
ORDER BY crossing DESC
LIMIT 5;
------------------------------
question: Give the name of the league had the most goals in the 2016 season?
GT: SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' GROUP BY t2.name ORDER BY SUM(t1.home_team_goal + t1.away_team_goal) DESC LIMIT 1
Pred: SELECT 
    l.name AS league_name
FROM 
    Match m
JOIN 
    League l ON m.country_id = l.country_id
WHERE 
    m.season = '2016'
GROUP BY 
    l.name
ORDER BY 
    SUM(m.home_team_goal + m.away_team_goal) DESC
LIMIT 1;
------------------------------
question: Which home team had lost the fewest matches in the 2016 season?
GT: SELECT teamDetails.team_long_name FROM Match AS matchData INNER JOIN Team AS teamDetails ON matchData.home_team_api_id = teamDetails.team_api_id WHERE matchData.season = '2015/2016' AND matchData.home_team_goal - matchData.away_team_goal < 0 GROUP BY matchData.home_team_api_id ORDER BY COUNT(*) ASC LIMIT 1
Pred: SELECT 
    t.team_long_name
FROM 
    Match m
JOIN 
    Team t ON m.home_team_api_id = t.team_api_id
WHERE 
    m.season = '2015/2016' AND m.home_team_goal < m.away_team_goal
GROUP BY 
    t.team_long_name
ORDER BY 
    COUNT(*) ASC
LIMIT 1;
------------------------------
question: Indicate the full names of the top 10 players with the highest number of penalties.
GT: SELECT t2.player_name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.id = t2.id ORDER BY t1.penalties DESC LIMIT 10
Pred: SELECT 
    p.player_name
FROM 
    Player p
JOIN 
    Player_Attributes pa ON p.player_api_id = pa.player_api_id
ORDER BY 
    pa.penalties DESC
LIMIT 10;
------------------------------
question: In Scotland Premier League, which away team won the most during the 2010 season?
GT: SELECT teamInfo.team_long_name FROM League AS leagueData INNER JOIN Match AS matchData ON leagueData.id = matchData.league_id INNER JOIN Team AS teamInfo ON matchData.away_team_api_id = teamInfo.team_api_id WHERE leagueData.name = 'Scotland Premier League' AND matchData.season = '2009/2010' AND matchData.away_team_goal - matchData.home_team_goal > 0 GROUP BY matchData.away_team_api_id ORDER BY COUNT(*) DESC LIMIT 1
Pred: SELECT 
    T.team_long_name,
    COUNT(*) AS wins
FROM 
    Match M
JOIN 
    Team T ON M.away_team_api_id = T.team_api_id
JOIN 
    League L ON M.league_id = L.id
WHERE 
    M.season = '2009/2010'
    AND M.away_team_goal > M.home_team_goal
    AND L.name = 'Scotland Premier League'
GROUP BY 
    M.away_team_api_id
ORDER BY 
    wins DESC
LIMIT 1;
------------------------------
question: What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed?
GT: SELECT t1.buildUpPlaySpeed FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id ORDER BY t1.buildUpPlaySpeed ASC LIMIT 4
Pred: -- Step 1: Calculate the maximum buildUpPlaySpeed for each team
WITH TeamSpeedCTE AS (
    SELECT 
        team_api_id,
        MAX(buildUpPlaySpeed) AS max_speed
    FROM 
        Team_Attributes
    GROUP BY 
        team_api_id
),

-- Step 2: Rank the teams based on their maximum buildUpPlaySpeed
RankedTeamsCTE AS (
    SELECT 
        team_api_id,
        max_speed,
        ROW_NUMBER() OVER (ORDER BY max_speed DESC) AS rank
    FROM 
        TeamSpeedCTE
)

-- Step 3: Select the top 4 teams with the highest buildUpPlaySpeed
SELECT 
    team_api_id,
    max_speed
FROM 
    RankedTeamsCTE
WHERE 
    rank <= 4;
------------------------------
question: At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015.
GT: SELECT DISTINCT DATETIME() - T2.birthday age FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id WHERE STRFTIME('%Y',t1.`date`) >= '2013' AND STRFTIME('%Y',t1.`date`) <= '2015' AND t1.sprint_speed >= 97
Pred: SELECT 
    (strftime('%Y', pa.date) - strftime('%Y', p.birthday)) - 
    (strftime('%m-%d', pa.date) < strftime('%m-%d', p.birthday)) AS age
FROM 
    Player p
JOIN 
    Player_Attributes pa ON p.player_api_id = pa.player_api_id
WHERE 
    pa.sprint_speed >= 97 AND 
    strftime('%Y', pa.date) BETWEEN '2013' AND '2015';
------------------------------
question: Give the name of the league with the highest matches of all time and how many matches were played in the said league.
GT: SELECT t2.name, t1.max_count FROM League AS t2 JOIN (SELECT league_id, MAX(cnt) AS max_count FROM (SELECT league_id, COUNT(id) AS cnt FROM Match GROUP BY league_id) AS subquery) AS t1 ON t1.league_id = t2.id
Pred: SELECT 
    l.name AS league_name, 
    COUNT(*) AS match_count
FROM 
    Match m
JOIN 
    League l ON m.league_id = l.id
GROUP BY 
    m.league_id
ORDER BY 
    match_count DESC
LIMIT 1;
------------------------------
question: List the players' api id who had the highest above average overall ratings in 2010.
GT: SELECT player_api_id FROM Player_Attributes WHERE SUBSTR(`date`, 1, 4) = '2010' ORDER BY overall_rating DESC LIMIT 1
Pred: WITH AverageOverallRating AS (
    SELECT AVG(overall_rating) AS avg_overall_rating
    FROM Player_Attributes
    WHERE strftime('%Y', date) = '2010'
),
MaxAboveAverageRating AS (
    SELECT MAX(overall_rating) AS max_overall_rating
    FROM Player_Attributes
    WHERE strftime('%Y', date) = '2010'
    AND overall_rating > (SELECT avg_overall_rating FROM AverageOverallRating)
)
SELECT pa.player_api_id
FROM Player_Attributes pa
JOIN MaxAboveAverageRating mar ON pa.overall_rating = mar.max_overall_rating
WHERE strftime('%Y', pa.date) = '2010';
------------------------------
question: Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.
GT: SELECT CAST(COUNT(CASE WHEN t2.preferred_foot = 'left' THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) BETWEEN '1987' AND '1992'
Pred: SELECT 
    (SUM(CASE WHEN preferred_foot = 'left' THEN 1 ELSE 0 END) * 100.0 / COUNT(player_fifa_api_id)) AS percentage
FROM 
    Player
WHERE 
    strftime('%Y', birthday) BETWEEN '1987' AND '1992';
------------------------------
question: List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy.
GT: SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 GROUP BY t1.id ORDER BY CAST(SUM(t2.heading_accuracy) AS REAL) / COUNT(t2.`player_fifa_api_id`) DESC LIMIT 10
Pred: SELECT 
    p.player_name,
    AVG(pa.heading_accuracy) AS avg_heading_accuracy
FROM 
    Player p
JOIN 
    Player_Attributes pa ON p.player_api_id = pa.player_api_id
WHERE 
    p.height > 180
GROUP BY 
    p.player_api_id
ORDER BY 
    avg_heading_accuracy DESC
LIMIT 10;
------------------------------
question: For the teams with normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing.
GT: SELECT t3.team_long_name FROM Team AS t3 INNER JOIN Team_Attributes AS t4 ON t3.team_api_id = t4.team_api_id WHERE t4.buildUpPlayDribblingClass = 'Normal' AND t4.chanceCreationPassing < ( SELECT CAST(SUM(t2.chanceCreationPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayDribblingClass = 'Normal' AND SUBSTR(t2.`date`, 1, 4) = '2014') ORDER BY t4.chanceCreationPassing DESC
Pred: SELECT 
    T.team_long_name
FROM 
    Team T
JOIN 
    Team_Attributes TA ON T.team_api_id = TA.team_api_id
WHERE 
    TA.buildUpPlayDribblingClass = 'Normal'
    AND TA.date >= '2014-01-01 00:00:00'
    AND TA.date <= '2014-01-31 00:00:00'
    AND TA.chanceCreationPassing < (
        SELECT AVG(chanceCreationPassing)
        FROM Team_Attributes
        WHERE date >= '2014-01-01 00:00:00'
        AND date <= '2014-01-31 00:00:00'
    )
ORDER BY 
    TA.chanceCreationPassing DESC;
------------------------------
question: List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season.
GT: SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2009/2010' GROUP BY t1.name HAVING (CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) - (CAST(SUM(t2.away_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) > 0
Pred: SELECT 
    l.name AS league_name
FROM 
    Match m
JOIN 
    Team t ON m.home_team_api_id = t.team_api_id
JOIN 
    League l ON t.country_id = l.country_id
WHERE 
    m.season = '2009/2010'
GROUP BY 
    l.name
HAVING 
    AVG(m.home_team_goal) > AVG(m.away_team_goal);
------------------------------
question: Among all the players whose weight is under 130, how many of them preferred foot in attacking is left?
GT: SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.weight < 130 AND t2.preferred_foot = 'left'
Pred: SELECT COUNT(*)
FROM Player p
INNER JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id
WHERE p.weight < 130 AND pa.preferred_foot = 'left';
------------------------------
question: Who has the highest average finishing rate between the highest and shortest football player?
GT: SELECT A FROM ( SELECT AVG(finishing) result, 'Max' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MAX(height) FROM Player ) UNION SELECT AVG(finishing) result, 'Min' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MIN(height) FROM Player ) ) ORDER BY result DESC LIMIT 1
Pred: SELECT 
    p.player_api_id,
    AVG(pa.finishing) AS avg_finishing_rate
FROM 
    Player p
JOIN 
    Player_Attributes pa ON p.player_api_id = pa.player_api_id
WHERE 
    p.height BETWEEN (SELECT MAX(height) FROM Player) AND (SELECT MIN(height) FROM Player)
GROUP BY 
    p.player_api_id
ORDER BY 
    avg_finishing_rate DESC
LIMIT 1;
------------------------------
question: How many players whose first names are Adam and weigh more than 170?
GT: SELECT COUNT(id) FROM Player WHERE weight > 170 AND player_name LIKE 'Adam%'
Pred: SELECT COUNT(DISTINCT p.player_api_id) AS player_count
FROM Player p
JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id
JOIN Team t ON p.player_api_id = t.team_api_id
WHERE p.player_name LIKE 'Adam%' AND p.weight > 170 AND t.buildUpPlaySpeedClass = 'Fast';
------------------------------
question: List out of players whose preferred foot is left.
GT: SELECT DISTINCT t1.id, t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.preferred_foot = 'left'
Pred: SELECT p.player_name
FROM Player p
JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id
WHERE pa.preferred_foot = 'left';
------------------------------
question: From 2010 to 2015, what was the average overall rating of players who are higher than 170?
GT: SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 170 AND STRFTIME('%Y',t2.`date`) >= '2010' AND STRFTIME('%Y',t2.`date`) <= '2015'
Pred: SELECT AVG(pa.overall_rating) AS average_overall_rating
FROM Player p
JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id
JOIN Match m ON p.player_api_id = m.home_player_1 OR p.player_api_id = m.away_player_1
WHERE p.height > 170
  AND strftime('%Y', m.date) BETWEEN '2010' AND '2015';
------------------------------
question: List all the football player with the highest balance score and potential score of 61.
GT: SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.potential = '61' ORDER BY t2.balance DESC LIMIT 1
Pred: SELECT p.player_name
FROM Player p
JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id
WHERE pa.potential = 61
AND pa.balance = (
    SELECT MAX(balance)
    FROM Player_Attributes
);
------------------------------
question: Which player is older, Aaron Lennon or Abdelaziz Barrada?
GT: SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1
Pred: SELECT player_name
FROM Player
WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada')
ORDER BY birthday DESC
LIMIT 1;
------------------------------
question: Which of these players performs the best in crossing actions, Alexis, Ariel Borysiuk or Arouna Kone?
GT: SELECT t1.player_name, t2.crossing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY t2.crossing DESC LIMIT 1
Pred: SELECT p.player_name
FROM Player p
JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id
WHERE p.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone')
ORDER BY pa.crossing DESC
LIMIT 1;
------------------------------
question: Among the players whose height is over 180, how many of them have a volley score of over 70?
GT: SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 AND t2.volleys > 70
Pred: SELECT COUNT(*) AS total_players
FROM Player p
JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id
WHERE p.height > 180 AND pa.volleys > 70;
------------------------------
question: What is the long passing score of the oldest player?
GT: SELECT t2.long_passing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t1.birthday ASC LIMIT 1
Pred: SELECT pa.long_passing
FROM Player_Attributes pa
JOIN (
    SELECT player_api_id
    FROM Player
    ORDER BY birthday ASC
    LIMIT 1
) AS oldest_player ON pa.player_api_id = oldest_player.player_api_id;
------------------------------
question: Give the name of the league had the most matches in the 2008/2009 season?
GT: SELECT t1.name FROM League AS t1 JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2008/2009' GROUP BY t1.name HAVING COUNT(t2.id) = (SELECT MAX(match_count) FROM (SELECT COUNT(t2.id) AS match_count FROM Match AS t2 WHERE t2.season = '2008/2009' GROUP BY t2.league_id))
Pred: SELECT l.name AS league_name
FROM (
    SELECT m.league_id, COUNT(*) AS match_count
    FROM Match m
    WHERE m.season = '2008/2009'
    GROUP BY m.league_id
    ORDER BY match_count DESC
    LIMIT 1
) AS subquery
JOIN League l ON subquery.league_id = l.id;
------------------------------
question: What is the average overall rating of the players born before the year 1986?
GT: SELECT SUM(t2.overall_rating) / COUNT(t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) < '1986'
Pred: SELECT AVG(pa.overall_rating) AS average_overall_rating
FROM Player p
JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id
WHERE strftime('%Y', p.birthday) < '1986';
------------------------------
question: How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?
GT: SELECT (SUM(CASE WHEN t1.player_name = 'Ariel Borysiuk' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id
Pred: WITH PlayerRatings AS (
    SELECT 
        p.player_name,
        pa.overall_rating
    FROM 
        Player p
    INNER JOIN 
        Player_Attributes pa ON p.player_api_id = pa.player_api_id
    WHERE 
        p.player_name IN ('Ariel Borysiuk', 'Paulin Puel')
)
SELECT 
    (SELECT overall_rating FROM PlayerRatings WHERE player_name = 'Ariel Borysiuk') - 
    (SELECT overall_rating FROM PlayerRatings WHERE player_name = 'Paulin Puel') AS rating_difference,
    ((SELECT overall_rating FROM PlayerRatings WHERE player_name = 'Ariel Borysiuk') - 
    (SELECT overall_rating FROM PlayerRatings WHERE player_name = 'Paulin Puel')) / 
    (SELECT overall_rating FROM PlayerRatings WHERE player_name = 'Paulin Puel') * 100 AS percentage_increase;
------------------------------
question: What is the average number of goals made by Parma as the away team while playing in Italy?
GT: SELECT CAST(SUM(T1.away_team_goal) AS REAL) / COUNT(T1.id) FROM "Match" AS T1 INNER JOIN TEAM AS T2 ON T1.away_team_api_id = T2.team_api_id INNER JOIN Country AS T3 ON T1.country_id = T3.id WHERE T2.team_long_name = 'Parma' AND T3.name = 'Italy'
Pred: SELECT AVG(M.away_team_goal) AS average_goals
FROM Match M
INNER JOIN Team T ON M.away_team_api_id = T.team_api_id
INNER JOIN Country C ON T.team_fifa_api_id = C.id
WHERE T.team_long_name = 'Parma' AND C.name = 'Italy';
------------------------------
question: How was Francesco Migliore's attacking work rate on 2015/5/1?
GT: SELECT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.`date` LIKE '2015-05-01%' AND t1.player_name = 'Francesco Migliore'
Pred: SELECT pa.attacking_work_rate
FROM Player p
INNER JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id
INNER JOIN Match m ON p.player_api_id = m.home_player_1 OR p.player_api_id = m.away_player_1
WHERE p.player_name = 'Francesco Migliore' AND m.date = '2015-05-01';
------------------------------
question: When was the first time did Kevin Constant have his highest crossing score? Give the date.
GT: SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1
Pred: SELECT pa.date
FROM Player p
JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id
WHERE p.player_name = 'Kevin Constant'
AND pa.crossing = (
    SELECT MAX(crossing)
    FROM Player_Attributes
    WHERE player_api_id = p.player_api_id
)
ORDER BY pa.date ASC
LIMIT 1;
------------------------------
question: What was the build up play speed class for "Willem II" on 2011/2/22?
GT: SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Willem II' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'
Pred: SELECT ta.buildUpPlaySpeedClass
FROM Team_Attributes ta
INNER JOIN Team t ON ta.team_api_id = t.id
WHERE t.team_long_name = 'Willem II' AND ta.date = '2012-02-22';
------------------------------
question: How was the build up play dribbling class for "LEI" on 2015/9/10?
GT: SELECT t2.buildUpPlayDribblingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'LEI' AND SUBSTR(t2.`date`, 1, 10) = '2015-09-10'
Pred: SELECT 
    CASE 
        WHEN T.team_short_name = 'LEI' THEN TA.buildUpPlayDribblingClass
        ELSE NULL
    END AS buildUpPlayDribblingClass
FROM 
    Team T
INNER JOIN 
    Team_Attributes TA ON T.team_api_id = TA.team_api_id
INNER JOIN 
    Match M ON T.team_api_id = M.home_team_api_id OR T.team_api_id = M.away_team_api_id
WHERE 
    M.date = '2015-09-10 00:00:00';
------------------------------
question: Tell the build Up play passing class for "FC Lorient" on 2010/2/22.
GT: SELECT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'FC Lorient' AND t2.`date` LIKE '2010-02-22%'
Pred: SELECT ta.buildUpPlayPassingClass
FROM Team t
INNER JOIN Match m ON t.team_api_id = m.home_team_api_id
INNER JOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id
WHERE m.date LIKE '2010-02-22%' AND t.team_long_name = 'FC Lorient';
------------------------------
question: State the chance creation passing class for "PEC Zwolle" on 2013/9/20.
GT: SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'PEC Zwolle' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'
Pred: SELECT ta.chance_creation_passing_class
FROM Team t
INNER JOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id
WHERE t.team_long_name = 'PEC Zwolle' AND ta.date = '2013-09-20 00:00:00';
------------------------------
question: What was the chance creation crossing class for "Hull City" on 2010/2/22?
GT: SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hull City' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'
Pred: SELECT ta.chance_creation_crossing_class
FROM Team t
JOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id
JOIN Match m ON t.team_api_id = m.home_team_api_id
WHERE t.team_long_name = 'Hull City' AND m.date = '2010-02-22 00:00:00';
------------------------------
question: For the team "Hannover 96", what was its defence aggression class on 2015/9/10?
GT: SELECT t2.chanceCreationShootingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hannover 96' AND t2.`date` LIKE '2015-09-10%'
Pred: SELECT ta.defenceAggressionClass
FROM Team t
INNER JOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id
WHERE t.team_long_name = 'Hannover 96'
  AND ta.date = '2015-09-10';
------------------------------
question: What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?
GT: SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Marko Arnautovic' AND SUBSTR(t2.`date`, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'
Pred: SELECT AVG(pa.overall_rating) AS average_overall_rating
FROM Player p
JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id
WHERE p.player_name = 'Marko Arnautovic'
AND pa.date BETWEEN '2007-02-22' AND '2016-04-21';
------------------------------
question: What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?
GT: SELECT (SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Jordan Bowery' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) LvsJ_percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-07-12'
Pred: SELECT 
    CASE 
        WHEN pa1.overall_rating > pa2.overall_rating THEN 
            (pa1.overall_rating - pa2.overall_rating) / pa2.overall_rating * 100
        ELSE 0
    END AS rating_difference_percentage
FROM 
    Player p1
JOIN 
    Player_Attributes pa1 ON p1.player_api_id = pa1.player_api_id
JOIN 
    Player p2 ON p2.player_api_id = pa2.player_api_id
JOIN 
    Player_Attributes pa2 ON p2.player_api_id = pa2.player_api_id
WHERE 
    pa1.date = '2013/7/12' 
    AND pa2.date = '2013/7/12' 
    AND p1.player_name = 'Landon Donovan' 
    AND p2.player_name = 'Jordan Bowery';
------------------------------
question: List down the name of players who are 35 years old and above.
GT: SELECT player_name FROM Player WHERE CAST((JULIANDAY('now') - JULIANDAY(birthday)) AS REAL) / 365 >= 35
Pred: SELECT player_name
FROM Player
WHERE (strftime('%Y', 'now') - strftime('%Y', birthday)) >= 35;
------------------------------
question: How many home team goal have been scored by Aaron Lennon?
GT: SELECT SUM(t2.home_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_9 WHERE t1.player_name = 'Aaron Lennon'
Pred: SELECT SUM(M.home_team_goal) AS total_goals
FROM Match M
JOIN Player P ON M.home_player_1 = P.player_api_id
WHERE P.player_name = 'Aaron Lennon'
AND (M.home_player_1 = P.player_api_id OR M.home_player_2 = P.player_api_id OR M.home_player_3 = P.player_api_id OR M.home_player_4 = P.player_api_id OR M.home_player_5 = P.player_api_id OR M.home_player_6 = P.player_api_id OR M.home_player_7 = P.player_api_id OR M.home_player_8 = P.player_api_id OR M.home_player_9 = P.player_api_id OR M.home_player_10 = P.player_api_id OR M.home_player_11 = P.player_api_id);
------------------------------
question: Sum up the away team goal scored by both Daan Smith and Filipe Ferreira.
GT: SELECT SUM(t2.away_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_5 WHERE t1.player_name IN ('Daan Smith', 'Filipe Ferreira')
Pred: SELECT 
    p.player_name, 
    SUM(m.away_team_goal) AS total_goals
FROM 
    Player p
INNER JOIN 
    Match m ON p.player_api_id = m.away_player_1 
    OR p.player_api_id = m.away_player_2 
    OR p.player_api_id = m.away_player_3 
    OR p.player_api_id = m.away_player_4 
    OR p.player_api_id = m.away_player_5 
    OR p.player_api_id = m.away_player_6 
    OR p.player_api_id = m.away_player_7 
    OR p.player_api_id = m.away_player_8 
    OR p.player_api_id = m.away_player_9 
    OR p.player_api_id = m.away_player_10 
    OR p.player_api_id = m.away_player_11
WHERE 
    p.player_name = 'Daan Smith' 
    OR p.player_name = 'Filipe Ferreira'
GROUP BY 
    p.player_name;
------------------------------
question: Calculate the total home team goal scored by players whose age are 30 years old and below.
GT: SELECT SUM(t2.home_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_1 WHERE datetime(CURRENT_TIMESTAMP, 'localtime') - datetime(T1.birthday) < 31
Pred: SELECT SUM(m.home_team_goal) AS total_home_goals
FROM Player p
JOIN Match m ON p.player_api_id = m.home_player_1 OR p.player_api_id = m.home_player_2 OR p.player_api_id = m.home_player_3 OR p.player_api_id = m.home_player_4 OR p.player_api_id = m.home_player_5 OR p.player_api_id = m.home_player_6 OR p.player_api_id = m.home_player_7 OR p.player_api_id = m.home_player_8 OR p.player_api_id = m.home_player_9 OR p.player_api_id = m.home_player_10 OR p.player_api_id = m.home_player_11
WHERE (strftime('%Y', 'now') - strftime('%Y', p.birthday)) <= 30;
------------------------------
question: State the name of the most strongest player.
GT: SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)
Pred: SELECT MAX(overall_rating) FROM Player_Attributes
------------------------------
question: State the name of players who came from Belgium.
GT: SELECT t3.player_name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id WHERE t1.name = 'Belgium'
Pred: SELECT DISTINCT p.player_name
FROM Player p
JOIN Match m ON p.player_api_id = m.home_player_1 OR p.player_api_id = m.away_player_1
JOIN Team t ON m.home_team_api_id = t.team_api_id OR m.away_team_api_id = t.team_api_id
JOIN League l ON t.team_api_id = l.id
JOIN Country c ON l.country_id = c.id
WHERE c.name = 'Belgium';
------------------------------
question: Locate players with vision scores of 90 and above, state the country of these players.
GT: SELECT DISTINCT t4.name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id INNER JOIN Match AS t3 ON t2.player_api_id = t3.home_player_8 INNER JOIN Country AS t4 ON t3.country_id = t4.id WHERE t1.vision > 89
Pred: SELECT P.player_name, C.name AS country_name
FROM Player P
INNER JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id
INNER JOIN Country C ON P.player_fifa_api_id = C.id
WHERE PA.vision >= 90;
------------------------------
question: Which country's players have the heaviest average weights?
GT: SELECT t1.name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id GROUP BY t1.name ORDER BY AVG(t3.weight) DESC LIMIT 1
Pred: SELECT 
    c.name AS country_name,
    AVG(p.weight) AS average_weight
FROM 
    Player p
JOIN 
    Team t ON p.player_fifa_api_id = t.team_fifa_api_id
JOIN 
    Country c ON t.team_api_id = c.id
GROUP BY 
    c.name
ORDER BY 
    average_weight DESC
LIMIT 1;
------------------------------
question: What is the average heights of Italy players?
GT: SELECT CAST(SUM(T1.height) AS REAL) / COUNT(T1.id) FROM Player AS T1 INNER JOIN Match AS T2 ON T1.id = T2.id INNER JOIN Country AS T3 ON T2.country_id = T3.ID WHERE T3.NAME = 'Italy'
Pred: SELECT AVG(p.height) AS AvgHeight
FROM Player p
JOIN Country c ON p.player_api_id = c.id
WHERE c.name = 'Italy';
------------------------------
question: What is the difference between players 6 and 23's jumping scores?
GT: SELECT SUM(CASE WHEN t1.id = 6 THEN t1.jumping ELSE 0 END) - SUM(CASE WHEN t1.id = 23 THEN t1.jumping ELSE 0 END) FROM Player_Attributes AS t1
Pred: SELECT 
    (SELECT jumping FROM Player_Attributes WHERE player_fifa_api_id = 6) - 
    (SELECT jumping FROM Player_Attributes WHERE player_fifa_api_id = 23) AS difference
------------------------------
question: Please provide top five football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking.
GT: SELECT id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential DESC LIMIT 5
Pred: -- Step 1: Find the minimum potential value
SELECT MIN(potential) AS min_potential
FROM Player_Attributes

-- Step 2: Use the minimum potential to filter players who prefer to use their right foot
SELECT p.player_api_id
FROM Player p
JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id
WHERE pa.potential = (
    SELECT MIN(potential)
    FROM Player_Attributes
)
AND p.preferred_foot = 'right'
LIMIT 5;
------------------------------
question: How many players had the highest potential score for crossing that preferred to use their left foots while attacking?
GT: SELECT COUNT(t1.id) FROM Player_Attributes AS t1 WHERE t1.preferred_foot = 'left' AND t1.crossing = ( SELECT MAX(crossing) FROM Player_Attributes)
Pred: SELECT MAX(crossing) FROM Player_Attributes
------------------------------
question: In the 2015–2016 season, how many games were played in the Italian Serie A league?
GT: SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Italy Serie A' AND t2.season = '2015/2016'
Pred: SELECT COUNT(*) AS total_matches
FROM Match m
JOIN League l ON m.league_id = l.id
WHERE m.season = '2015/2016' AND l.name = 'Serie A';
------------------------------
question: Please state the finishing rate and curve score of the player who has the heaviest weight.
GT: SELECT id, finishing, curve FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 1 ) LIMIT 1
Pred: SELECT pa.finishing, pa.curve
FROM Player p
INNER JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id
WHERE p.weight = (SELECT MAX(weight) FROM Player);
------------------------------
question: Please provide the full name of the away team that scored the most goals.
GT: SELECT t2.team_long_name FROM Match AS t1 INNER JOIN Team AS t2 ON t1.away_team_api_id = t2.team_api_id ORDER BY t1.away_team_goal DESC LIMIT 1
Pred: SELECT T.team_long_name
FROM Match M
JOIN Team T ON M.away_team_api_id = T.team_api_id
WHERE M.away_team_goal = (
    SELECT MAX(away_team_goal)
    FROM Match
    GROUP BY away_team_api_id
    ORDER BY SUM(away_team_goal) DESC
    LIMIT 1
);
------------------------------
question: What is the percentage of players that are under 180 cm who have an overall strength of more than 70?
GT: SELECT CAST(COUNT(CASE WHEN t2.overall_rating > 70 THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height < 180
Pred: SELECT 
    CAST(COUNT(CASE WHEN p.height < 180 AND pa.overall_rating > 70 THEN 1 END) AS REAL) / COUNT(*) * 100 AS percentage
FROM 
    Player p
INNER JOIN 
    Player_Attributes pa ON p.player_api_id = pa.player_api_id;
------------------------------
question: Are there more in-patient or outpatient who were male? What is the deviation in percentage?
GT: SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE SEX = 'M'
Pred: WITH MaleCounts AS (
    SELECT 
        SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS InpatientCount,
        SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) AS OutpatientCount
    FROM 
        Patient
    WHERE 
        SEX = 'M'
)
SELECT 
    InpatientCount,
    OutpatientCount,
    (InpatientCount * 100.0 / NULLIF(OutpatientCount, 0)) AS Percentage
FROM 
    MaleCounts;
------------------------------
question: What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient?
GT: SELECT SUM(CASE WHEN Admission = '+' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE Diagnosis = 'SLE'
Pred: SELECT 
    CAST(
        COUNT(CASE WHEN Admission = '-' THEN 1 END) AS REAL
    ) / 
    COUNT(CASE WHEN Admission = '+' THEN 1 END) AS Ratio
FROM 
    Patient
WHERE 
    Diagnosis = 'SLE';
------------------------------
question: For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with.
GT: SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2
Pred: SELECT 
    e.ID, 
    p.SEX, 
    e.Diagnosis
FROM 
    Examination e
INNER JOIN 
    Patient p ON e.ID = p.ID
WHERE 
    e.Thrombosis = 2;
------------------------------
question: For in-patient age 50 and above, what is their average anti-cardiolipin antibody (IgG) concentration?
GT: SELECT AVG(T2.`aCL IgG`) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) >= 50 AND T1.Admission = '+'
Pred: SELECT AVG(e."aCL IgG") AS Average_aCL_IgG
FROM Examination e
INNER JOIN Patient p ON e.ID = p.ID
WHERE p.Admission = '+'
AND (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) >= '50';
------------------------------
question: What was the age of the youngest patient when they initially arrived at the hospital?
GT: SELECT MIN(STRFTIME('%Y', `First Date`) - STRFTIME('%Y', Birthday)) FROM Patient
Pred: SELECT MIN(age) AS youngest_age
FROM (
    SELECT 
        (strftime('%Y', First_Date) - strftime('%Y', Birthday)) AS age
    FROM 
        Patient
) AS age_calculation;
------------------------------
question: What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.
GT: SELECT T2.Symptoms, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Symptoms IS NOT NULL ORDER BY T1.Birthday DESC LIMIT 1
Pred: SELECT 
    e.Symptoms,
    e.Diagnosis
FROM 
    Patient p
JOIN 
    Examination e ON p.ID = e.ID
WHERE 
    e.Symptoms IS NOT NULL
ORDER BY 
    p.Birthday ASC
LIMIT 1;
------------------------------
question: For the year that concluded on December 31, 1998, how many male patients on average were tested in the lab each month?
GT: SELECT CAST(COUNT(T1.ID) AS REAL) / 12 FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.Date) = '1998' AND T1.SEX = 'M'
Pred: SELECT 
    strftime('%Y-%m', L.Date) AS Month,
    COUNT(L.ID) / 12 AS Average_Male_Patients_Per_Month
FROM 
    Laboratory L
JOIN 
    Patient P ON L.ID = P.ID
WHERE 
    L.Date BETWEEN '1998-01-01' AND '1998-12-31'
    AND P.SEX = 'M'
GROUP BY 
    Month;
------------------------------
question: The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?
GT: SELECT T1.Date, STRFTIME('%Y', T2.`First Date`) - STRFTIME('%Y', T2.Birthday),T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SJS' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1
Pred: SELECT 
    (SELECT MAX(l.Date) 
     FROM Laboratory l 
     WHERE l.ID = (
         SELECT p.ID 
         FROM Patient p 
         WHERE p.Diagnosis = 'SJS' 
         ORDER BY p.Birthday ASC 
         LIMIT 1
     )
    ) AS latest_laboratory_date,
    (strftime('%Y', (SELECT p.First_Date 
                      FROM Patient p 
                      WHERE p.Diagnosis = 'SJS' 
                      ORDER BY p.Birthday ASC 
                      LIMIT 1)) - strftime('%Y', (SELECT p.Birthday 
                                                  FROM Patient p 
                                                  WHERE p.Diagnosis = 'SJS' 
                                                  ORDER BY p.Birthday ASC 
                                                  LIMIT 1))) AS age_at_first_arrival;
------------------------------
question: How many patients hadn't undergone a medical examination until at least a year following their initial hospital visit?
GT: SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND STRFTIME('%Y', T2.`Examination Date`) - STRFTIME('%Y', T1.`First Date`) >= 1
Pred: SELECT COUNT(*) 
FROM Examination e
INNER JOIN Patient p ON e.ID = p.ID
WHERE (strftime('%Y', e."Examination Date") - strftime('%Y', p."First Date")) >= 1;
------------------------------
question: How many underage patients were examined during the course of the three-year period from 1990 to 1993?
GT: SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.`Examination Date`) BETWEEN '1990' AND '1993' AND STRFTIME('%Y', T2.`Examination Date`) - STRFTIME('%Y', T1.Birthday) < 18
Pred: SELECT COUNT(*) 
FROM Examination e
JOIN Patient p ON e.ID = p.ID
WHERE strftime('%Y', p.Birthday) < '1982' 
AND strftime('%Y', e."Examination Date") BETWEEN '1990' AND '1993';
------------------------------
question: How many male patients have elevated total bilirubin count?
GT: SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 AND T1.SEX = 'M'
Pred: SELECT COUNT(Patient.ID) AS MaleCount
FROM Patient
INNER JOIN Laboratory ON Patient.ID = Laboratory.ID
WHERE Laboratory.`T-BIL` >= 2.0 AND Patient.SEX = 'M';
------------------------------
question: What is the most common illness that doctors identified among the patients whose lab work was done between 1/1/1985, and 12/31/1995?
GT: SELECT T2.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY T2.Diagnosis ORDER BY COUNT(T2.Diagnosis) DESC LIMIT 1
Pred: SELECT Diagnosis, COUNT(*) AS Count
FROM Examination
WHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31'
GROUP BY Diagnosis
ORDER BY Count DESC
LIMIT 1;
------------------------------
question: How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?
GT: SELECT STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday), T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.HGB DESC LIMIT 1
Pred: WITH MaxHGB AS (
    SELECT MAX(HGB) AS max_hgb
    FROM Laboratory
)
SELECT 
    (strftime('%Y', e."Examination Date") - strftime('%Y', p.Birthday)) AS age,
    e.Diagnosis
FROM Examination e
JOIN Laboratory l ON e.ID = l.ID
JOIN Patient p ON e.ID = p.ID
WHERE l.HGB = (SELECT max_hgb FROM MaxHGB);
------------------------------
question: Was the total cholesterol status for the patient id 2927464 on 1995-9-4 at the normal level?
GT: SELECT CASE WHEN `T-CHO` < 250 THEN 'Normal' ELSE 'Abnormal' END FROM Laboratory WHERE ID = 2927464 AND Date = '1995-09-04'
Pred: SELECT 
    CASE 
        WHEN T-CHO < 250 THEN 'Normal'
        ELSE 'Not Normal'
    END AS TotalCholesterolStatus
FROM 
    Laboratory
WHERE 
    ID = 2927464 AND Date = '1995-09-04';
------------------------------
question: What was the gender of the first AORTITIS diagnosed patient?
GT: SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' AND `First Date` IS NOT NULL ORDER BY `First Date` ASC LIMIT 1
Pred: SELECT SEX
FROM Patient
WHERE Diagnosis = 'AORTITIS'
ORDER BY First_Date ASC
LIMIT 1;
------------------------------
question: For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?
GT: SELECT `aCL IgA`, `aCL IgG`, `aCL IgM` FROM Examination WHERE ID IN ( SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19' ) AND `Examination Date` = '1993-11-12'
Pred: SELECT e."aCL IgM"
FROM "Examination" e
INNER JOIN "Patient" p ON e."ID" = p."ID"
WHERE p."Description" = '1994-02-19' 
  AND p."Diagnosis" = 'SLE' 
  AND e."Examination Date" = '1993-11-12';
------------------------------
question: For the patient who first came to the hospital on 1991/6/13 who was diagnosed with SJS, what is the total number of his/her Laboratory tests in 1995?
GT: SELECT COUNT(*) FROM Laboratory WHERE ID = ( SELECT ID FROM Patient WHERE `First Date` = '1991-06-13' AND Diagnosis = 'SJS' ) AND STRFTIME('%Y', Date) = '1995'
Pred: SELECT COUNT(lab.ID) AS total_laboratory_tests
FROM Laboratory lab
JOIN Patient pat ON lab.ID = pat.ID
WHERE pat.Diagnosis = 'SJS'
  AND pat.First_Date = '1991-06-13'
  AND strftime('%Y', lab.Date) = '1995';
------------------------------
question: For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981?
GT: SELECT CAST((SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END)) AS REAL) / SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18'
Pred: WITH MonthlyCholesterol AS (
    SELECT 
        p.ID,
        SUM(CASE WHEN l.Date LIKE '1981-11-%' THEN l."T-CHO" ELSE 0 END) AS NovemberCholesterol,
        SUM(CASE WHEN l.Date LIKE '1981-12-%' THEN l."T-CHO" ELSE 0 END) AS DecemberCholesterol
    FROM 
        Patient p
    INNER JOIN 
        Laboratory l ON p.ID = l.ID
    WHERE 
        p.Birthday = '1959-02-18'
    GROUP BY 
        p.ID
)
SELECT 
    (NovemberCholesterol - DecemberCholesterol) / NovemberCholesterol AS DecreaseRate
FROM 
    MonthlyCholesterol;
------------------------------
question: Lists all patients by ID who were diagnosed with Behcet's and had their exams between 01/01/197 and 12/31/1997.
GT: SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'Behcet'
Pred: SELECT e.ID
FROM Examination e
JOIN Patient p ON e.ID = p.ID
WHERE e."Examination Date" BETWEEN '1997-01-01' AND '1997-12-31'
AND p.Diagnosis = 'Behcet';
------------------------------
question: How many female patients born in 1964 were admitted to the hospital? List them by ID.
GT: SELECT ID FROM Patient WHERE STRFTIME('%Y', Birthday) = '1964' AND SEX = 'F' AND Admission = '+'
Pred: SELECT ID, COUNT(*) AS count
FROM Patient
WHERE SEX = 'F' AND strftime('%Y', Birthday) = '1964' AND Admission = '+'
GROUP BY ID;
------------------------------
question: What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?
GT: SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S' AND `aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S')
Pred: SELECT COUNT(*)
FROM Examination
WHERE Thrombosis = 2
  AND ANA_Pattern = 'S'
  AND aCL_IgM > (
    SELECT AVG(aCL_IgM) * 1.2
    FROM Examination
    WHERE Thrombosis = 2
      AND ANA_Pattern = 'S'
  );
------------------------------
question: What percentage of male patients who first presented to the hospital in 1981 were diagnosed with BEHCET?
GT: SELECT CAST(SUM(CASE WHEN Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE STRFTIME('%Y', `First Date`) = '1981' AND SEX = 'M'
Pred: SELECT 
    (COUNT(CASE WHEN Diagnosis = 'BEHCET' THEN 1 END) * 100.0 / COUNT(*)) AS percentage
FROM 
    Patient
WHERE 
    SEX = 'M' 
    AND strftime('%Y', First Date) = '1981';
------------------------------
question: List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range.
GT: SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.`T-BIL` < 2.0 AND T2.Date LIKE '1991-10-%'
Pred: SELECT l.ID
FROM Laboratory l
JOIN Patient p ON l.ID = p.ID
WHERE p.Admission = '-'
AND l.Date BETWEEN '1991-10-01' AND '1991-10-31'
AND l.T_BIL < 2.0;
------------------------------
question: When was the medical information on patient number 48473 first documented, and what disease did she have?
GT: SELECT `First Date`, Diagnosis FROM Patient WHERE ID = 48473
Pred: SELECT Description, Diagnosis
FROM Patient
WHERE ID = 48473;
------------------------------
question: How many patients who underwent testing in 1997 had protein levels outside the normal range?
GT: SELECT COUNT(ID) FROM Laboratory WHERE (ALB <= 6.0 OR ALB >= 8.5) AND STRFTIME('%Y', Date) = '1997'
Pred: SELECT COUNT(DISTINCT ID) 
FROM Laboratory 
WHERE strftime('%Y', Date) = '1997' 
AND (TP > 8.5 OR TP < 6);
------------------------------
question: What proportion of patients who had signs of thrombocytopenia had SLE diagnosed?
GT: SELECT CAST(SUM(CASE WHEN Diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Examination WHERE Symptoms = 'thrombocytopenia'
Pred: SELECT 
    (SUM(CASE WHEN Diagnosis = 'ITP' THEN 1 ELSE 0 END) * 100.0 / 
     SUM(CASE WHEN Diagnosis = 'SLE' THEN 1 ELSE 0 END)) AS Proportion
FROM 
    Examination
WHERE 
    Symptoms LIKE '%thrombocytopenia%';
------------------------------
question: How many male patients who underwent testing between 1995 and 1997 and were subsequently diagnosed with Behcet disease did not stay in the hospital for treatment?
GT: SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'Behcet' AND T1.SEX = 'M' AND STRFTIME('%Y', T2.`Examination Date`) BETWEEN '1995' AND '1997' AND T1.Admission = '-'
Pred: SELECT COUNT(*)
FROM Patient p
INNER JOIN Examination e ON p.ID = e.ID
WHERE p.SEX = 'M'
  AND e.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31'
  AND p.Diagnosis = 'Behcet'
  AND p.Admission = '-';
------------------------------
question: How many patients who were female got white blood cells that were below 3.5?
GT: SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC < 3.5 AND T1.SEX = 'F'
Pred: SELECT COUNT(DISTINCT p.ID) AS TotalFemaleWithLowWBC
FROM Patient p
INNER JOIN Laboratory l ON p.ID = l.ID
WHERE p.SEX = 'F' AND l.WBC < 3.5;
------------------------------
question: How long did it take after patient number 821298 arrived at the hospital for the first time before her evaluation began?
GT: SELECT STRFTIME('%d', T3.`Examination Date`) - STRFTIME('%d', T1.`First Date`) FROM Patient AS T1 INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T1.ID = 821298
Pred: SELECT DATEDIFF(e."Examination Date", p."First Date") AS DaysBeforeEvaluation
FROM Examination e
JOIN Patient p ON e.ID = p.ID
WHERE e.ID = 821298;
------------------------------
question: Was the patient with the number 57266's uric acid within a normal range?
GT: SELECT CASE WHEN (T1.SEX = 'F' AND T2.UA > 6.5) OR (T1.SEX = 'M' AND T2.UA > 8.0) THEN true ELSE false END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 57266
Pred: SELECT 
    CASE 
        WHEN p.SEX = 'M' AND l.UA > 8.0 THEN 'Yes'
        WHEN p.SEX = 'F' AND l.UA > 6.5 THEN 'Yes'
        ELSE 'No'
    END AS "Uric Acid within Normal Range"
FROM 
    Laboratory l
INNER JOIN 
    Patient p ON l.ID = p.ID
WHERE 
    l.ID = 57266;
------------------------------
question: List all patients with their sex and date of birthday, whose AST glutamic oxaloacetic transaminase (GOT) index is within normal range for loboratory examination in 1994.
GT: SELECT DISTINCT T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND STRFTIME('%Y', T2.Date) = '1994'
Pred: SELECT P.ID, P.SEX, P.Birthday
FROM Patient P
JOIN Laboratory L ON P.ID = L.ID
WHERE L.GOT < 60 AND strftime('%Y', L.Date) = '1994';
------------------------------
question: Provide the ID and age of patient with lactate dehydrogenase (LDH) between 100-300 index above the normal range.
GT: SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 600 AND T2.LDH < 800
Pred: SELECT 
    L.ID,
    (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS age
FROM 
    Laboratory L
INNER JOIN 
    Patient P ON L.ID = P.ID
WHERE 
    L.LDH BETWEEN 100 AND 300;
------------------------------
question: Name the ID of the patient who is born on the April 1st, 1982. Is his/her alkaliphophatase (ALP) within normal range?
GT: SELECT T1.ID , CASE WHEN T2.ALP < 300 THEN 'normal' ELSE 'abNormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1982-04-01'
Pred: SELECT 
    L.ID,
    CASE 
        WHEN L.ALP < 300 THEN 'Yes'
        ELSE 'No'
    END AS "Within Normal Range"
FROM 
    Laboratory L
INNER JOIN 
    Patient P ON L.ID = P.ID
WHERE 
    P.Birthday = '1982-04-01';
------------------------------
question: For all female patient with total protein (TP) beyond the normal index, what is the deviation of their TP idex from the normal.
GT: SELECT T2.TP - 8.5 FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.TP > 8.5
Pred: SELECT 
    L.ID,
    L.TP - 8.5 AS TP_Deviation
FROM 
    Laboratory L
INNER JOIN 
    Patient P ON L.ID = P.ID
WHERE 
    P.SEX = 'F' AND L.TP > 8.5;
------------------------------
question: Sort in descending order all patients by birthday for male patient with albumin not within range.
GT: SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND (T2.ALB <= 3.5 OR T2.ALB >= 5.5) ORDER BY T1.Birthday DESC
Pred: SELECT p.*, l.ALB
FROM Patient p
INNER JOIN Laboratory l ON p.ID = l.ID
WHERE p.SEX = 'M' AND (l.ALB <= 3.5 OR l.ALB >= 5.5)
ORDER BY p.Birthday DESC;
------------------------------
question: For all patient born in 1982, state if their albumin is within normal range.
GT: SELECT CASE WHEN T2.ALB >= 3.5 AND T2.ALB <= 5.5 THEN 'normal' ELSE 'abnormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1982'
Pred: SELECT 
    p.ID,
    CASE 
        WHEN l.ALB BETWEEN 3.5 AND 5.5 THEN 'Normal'
        ELSE 'Abnormal'
    END AS Albumin_Status
FROM 
    Patient p
JOIN 
    Laboratory l ON p.ID = l.ID
WHERE 
    strftime('%Y', p.Birthday) = '1982' AND
    l.ALB BETWEEN 3.5 AND 5.5;
------------------------------
question: What is the percentage of the female patient whose uric acid (UA) beyond the normal range?
GT: SELECT CAST(SUM(CASE WHEN T2.UA > 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F'
Pred: SELECT 
    (CAST(COUNT(l.ID) AS REAL) / COUNT(p.ID)) * 100 AS percentage
FROM 
    Laboratory l
JOIN 
    Patient p ON l.ID = p.ID
WHERE 
    p.SEX = 'F' AND l.UA > 6.5;
------------------------------
question: For all patients with normal uric acid (UA), what is the average UA index based on their latest laboratory examination result?
GT: SELECT AVG(T2.UA) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.UA < 6.5 AND T1.SEX = 'F') OR (T2.UA < 8.0 AND T1.SEX = 'M') AND T2.Date = ( SELECT MAX(Date) FROM Laboratory )
Pred: WITH LatestLaboratory AS (
    SELECT 
        l.ID,
        l.UA,
        ROW_NUMBER() OVER (PARTITION BY l.ID ORDER BY l.Date DESC) AS rn
    FROM 
        Laboratory l
)
SELECT 
    AVG(ll.UA) AS average_UA_index
FROM 
    LatestLaboratory ll
JOIN 
    Patient p ON ll.ID = p.ID
WHERE 
    ll.rn = 1
    AND (p.SEX = 'M' AND ll.UA < 8.0 OR p.SEX = 'F' AND ll.UA < 6.5);
------------------------------
question: Are there more male patients with creatinine not within the normal range than female? True or False?
GT: SELECT CASE WHEN SUM(CASE WHEN T1.SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) THEN 'True' ELSE 'False' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5
Pred: SELECT 
    CASE 
        WHEN SUM(CASE WHEN p.SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN p.SEX = 'F' THEN 1 ELSE 0 END) THEN 1
        ELSE 0
    END AS result
FROM 
    Patient p
JOIN 
    Laboratory l ON p.ID = l.ID
WHERE 
    l.CRE >= 1.5;
------------------------------
question: What is the highest total bilirubin level recorded? List out the patient details with ID, sex and birthday with that index.
GT: SELECT T2.`T-BIL`, T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.`T-BIL` DESC LIMIT 1
Pred: SELECT P.ID, P.SEX, P.Birthday
FROM Patient P
JOIN Laboratory L ON P.ID = L.ID
WHERE L.T_BIL = (SELECT MAX(T_BIL) FROM Laboratory);
------------------------------
question: List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range.
GT: SELECT T1.ID,T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 GROUP BY T1.SEX,T1.ID
Pred: SELECT 
    GROUP_CONCAT(DISTINCT p.ID) AS list,
    p.SEX
FROM 
    Laboratory l
INNER JOIN 
    Patient p ON l.ID = p.ID
WHERE 
    l."T-BIL" >= 2.0
GROUP BY 
    p.SEX;
------------------------------
question: Who is the oldest patient with the highest total cholesterol (T-CHO). State the patient ID and T-CHO index.
GT: SELECT T1.ID, T2.`T-CHO` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.`T-CHO` DESC, T1.Birthday ASC LIMIT 1
Pred: SELECT 
    p.ID AS Oldest_Patient_ID,
    MAX(l."T-CHO") AS Highest_Total_Cholesterol
FROM 
    Patient p
JOIN 
    Laboratory l ON p.ID = l.ID
WHERE 
    p.Birthday = (SELECT MIN(Birthday) FROM Patient);
------------------------------
question: List each patient's ID and blood glucose (GLU) index that were within normal range for patient's whose data was first recorded in 1991.
GT: SELECT DISTINCT T1.ID, T2.GLU FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.`First Date`) = '1991' AND T2.GLU < 180
Pred: SELECT 
    p.ID, 
    l.GLU
FROM 
    Laboratory l
JOIN 
    Patient p ON l.ID = p.ID
WHERE 
    strftime('%Y', p.Description) = '1991' 
    AND l.GLU < 180;
------------------------------
question: List the patient ID, sex and birthday who has abnormal white blood cell count. Group them by sex and list the patient by age in ascending order.
GT: SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC <= 3.5 OR T2.WBC >= 9.0 GROUP BY T1.SEX,T1.ID ORDER BY T1.Birthday ASC
Pred: SELECT 
    p.ID,
    p.SEX,
    p.Birthday,
    (julianday('now') - julianday(p.Birthday)) / 365.25 AS Age
FROM 
    Patient p
JOIN 
    Laboratory l ON p.ID = l.ID
WHERE 
    l.WBC <= 3.5 OR l.WBC >= 9.0
GROUP BY 
    p.SEX
ORDER BY 
    Age ASC;
------------------------------
question: What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age.
GT: SELECT DISTINCT T1.Diagnosis, T1.ID , STRFTIME('%Y', CURRENT_TIMESTAMP) -STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5
Pred: SELECT 
    l.ID, 
    (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) AS age, 
    p.Diagnosis
FROM 
    Laboratory l
JOIN 
    Patient p ON l.ID = p.ID
WHERE 
    l.RBC < 3.5;
------------------------------
question: Among all outpatients, list out those have low hemoglobin level. State the different IDs and their sex.
GT: SELECT DISTINCT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HGB < 10 AND T1.Admission = '-'
Pred: SELECT DISTINCT p.ID, p.SEX
FROM Patient p
JOIN Laboratory l ON p.ID = l.ID
WHERE p.Admission = '-' AND l.HBG < 10;
------------------------------
question: Among the patients who were diagnosed with SLE, who is the oldest with normal hemoglobin level. Provide the ID and sex.
GT: SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.HGB > 10 AND T2.HGB < 17 ORDER BY T1.Birthday ASC LIMIT 1
Pred: WITH RecentLaboratory AS (
    SELECT 
        p.ID,
        p.SEX,
        p.Birthday,
        l.HGB,
        ROW_NUMBER() OVER (PARTITION BY p.ID ORDER BY l.Date DESC) AS rn
    FROM 
        Patient p
    INNER JOIN 
        Laboratory l ON p.ID = l.ID
)
SELECT 
    ID,
    SEX
FROM 
    RecentLaboratory
WHERE 
    rn = 1
    AND Diagnosis = 'SLE'
    AND HGB > 10
    AND HGB < 17
ORDER BY 
    Birthday DESC
LIMIT 1;
------------------------------
question: For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?
GT: SELECT SUM(CASE WHEN T2.PLT <= 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.PLT >= 400 THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID
Pred: SELECT 
    SUM(CASE WHEN PLT < 100 THEN 1 ELSE 0 END) - 
    SUM(CASE WHEN PLT > 400 THEN 1 ELSE 0 END) AS calculation
FROM 
    Laboratory
WHERE 
    PLT <= 100 OR PLT >= 400;
------------------------------
question: For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level.
GT: SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) < 50 AND STRFTIME('%Y', T2.Date) = '1984'
Pred: SELECT L.*, P.*
FROM Laboratory L
JOIN Patient P ON L.ID = P.ID
WHERE strftime('%Y', L.Date) = '1984'
  AND strftime('%Y', 'now') - strftime('%Y', P.Birthday) < 50
  AND L.PLT BETWEEN 100 AND 400;
------------------------------
question: For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)?
GT: SELECT CAST(SUM(CASE WHEN T2.PT >= 14 AND T1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 55
Pred: SELECT 
    ROUND(
        CAST(SUM(CASE WHEN p.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) / 
        SUM(CASE WHEN l.PT >= 14 THEN 1 ELSE 0 END), 
        2
    ) AS percentage
FROM 
    Patient p
JOIN 
    Laboratory l ON p.ID = l.ID
WHERE 
    (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) > 55
    AND l.PT >= 14;
------------------------------
question: For the examinations done after 1997/1/1, how many of them have the result of an inactivated partial prothrom bin time?
GT: SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.Date > '1997-01-01' AND T2.APTT >= 45
Pred: SELECT COUNT(*) 
FROM Examination 
WHERE `Examination Date` > '1997-01-01' AND APTT < 45;
------------------------------
question: Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level?
GT: SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T2.WBC > 3.5 AND T2.WBC < 9.0 AND T1.SEX = 'M'
Pred: SELECT COUNT(DISTINCT p.ID) AS MaleCount
FROM Patient p
INNER JOIN Laboratory l ON p.ID = l.ID
WHERE p.SEX = 'M'
  AND l.WBC > 3.5
  AND l.WBC < 9.0
  AND (l.FG <= 150 OR l.FG >= 450);
------------------------------
question: How many patients born after 1980/1/1 have an abnormal fibrinogen level?
GT: SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T1.Birthday > '1980-01-01'
Pred: SELECT COUNT(DISTINCT p.ID) 
FROM Patient p
JOIN Laboratory l ON p.ID = l.ID
WHERE p.Birthday > '1980-01-01' AND l.FG NOT BETWEEN 150 AND 450;
------------------------------
question: Please list the disease names of the patients that have a proteinuria level higher than normal.
GT: SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` >= 30
Pred: SELECT DISTINCT e.Diagnosis
FROM Examination e
JOIN Laboratory l ON e.ID = l.ID
WHERE l."U-PRO" >= 30;
------------------------------
question: Which patient has a normal proteinuria level and is diagnosed with SLE? Please give his or her patient ID.
GT: SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` > 0 AND T2.`U-PRO` < 30 AND T1.Diagnosis = 'SLE'
Pred: SELECT L.ID
FROM Laboratory L
INNER JOIN Examination E ON L.ID = E.ID
WHERE L."U-PRO" > 0 AND L."U-PRO" < 30 AND E.Diagnosis = 'SLE';
------------------------------
question: How many patients with an Ig G higher than normal?
GT: SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG >= 2000
Pred: SELECT COUNT(DISTINCT ID) 
FROM Laboratory 
WHERE IGG >= 2000;
------------------------------
question: Among the patients with a normal Ig G level, how many of them have symptoms?
GT: SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG BETWEEN 900 AND 2000 AND T3.Symptoms IS NOT NULL
Pred: SELECT COUNT(DISTINCT l.ID) AS count
FROM Laboratory l
INNER JOIN Examination e ON l.ID = e.ID
WHERE l.IGG > 900 AND l.IGG < 2000 AND e.Symptoms IS NOT NULL;
------------------------------
question: For the patient who has the highest Ig A within the normal range, what is his or her diagnosis?
GT: SELECT patientData.Diagnosis FROM Patient AS patientData INNER JOIN Laboratory AS labData ON patientData.ID = labData.ID WHERE labData.IGA BETWEEN 80 AND 500 ORDER BY labData.IGA DESC LIMIT 1
Pred: SELECT P.Diagnosis
FROM Patient P
JOIN Laboratory L ON P.ID = L.ID
WHERE L.IGA = (
    SELECT MAX(IGA)
    FROM Laboratory
    WHERE IGA BETWEEN 80 AND 500
);
------------------------------
question: How many patients with a normal Ig A level came to the hospital after 1990/1/1?
GT: SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 AND  strftime('%Y',  T1.`First Date`) > '1990'
Pred: SELECT COUNT(Lab.ID) AS Total_Patients
FROM Laboratory Lab
INNER JOIN Patient Pat ON Lab.ID = Pat.ID
WHERE Lab.IGA > 80 AND Lab.IGA < 500
AND strftime('%Y', Pat."First Date") >= '1990';
------------------------------
question: For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with?
GT: SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGM NOT BETWEEN 40 AND 400 GROUP BY T1.Diagnosis ORDER BY COUNT(T1.Diagnosis) DESC LIMIT 1
Pred: WITH AbnormalIgM AS (
    SELECT 
        e.ID,
        e.Diagnosis
    FROM 
        Examination e
    JOIN 
        Laboratory l ON e.ID = l.ID
    WHERE 
        l.IGM <= 40 OR l.IGM >= 400
),
DiagnosisCounts AS (
    SELECT 
        Diagnosis,
        COUNT(*) AS Count
    FROM 
        AbnormalIgM
    GROUP BY 
        Diagnosis
),
RankedDiagnoses AS (
    SELECT 
        Diagnosis,
        Count,
        ROW_NUMBER() OVER (ORDER BY Count DESC) AS Rank
    FROM 
        DiagnosisCounts
)
SELECT 
    Diagnosis
FROM 
    RankedDiagnoses
WHERE 
    Rank = 1;
------------------------------
question: How many patients with a abnormal C-reactive protein don't have their data recorded?
GT: SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.CRP = '+' ) AND T1.Description IS NULL
Pred: SELECT COUNT(DISTINCT p.ID) AS count
FROM Laboratory l
JOIN Patient p ON l.ID = p.ID
WHERE l.CRP = '+' AND p.Description IS NULL;
------------------------------
question: How many patients with a normal Rhuematoid Factor has a positive measure of degree of coagulation?
GT: SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.RA = '-' OR T2.RA = '+-') AND T3.KCT = '+'
Pred: SELECT COUNT(DISTINCT l.ID) 
FROM Laboratory l
JOIN Examination e ON l.ID = e.ID
WHERE l.RF IN ('-', '+-') AND e.KCT = '+';
------------------------------
question: How many patients with a normal RF don't have thrombosis?
GT: SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND T1.Thrombosis = 0
Pred: SELECT COUNT(DISTINCT ID) AS Total_Patients
FROM Examination
WHERE RF < 20 AND Thrombosis = '0';
------------------------------
question: How many patients with a normal level of complement 3 have a P pattern observed in the sheet of ANA examination?
GT: SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.C3 > 35 AND T1.`ANA Pattern` = 'P'
Pred: SELECT COUNT(DISTINCT l.ID) AS Total_Patients
FROM Laboratory l
INNER JOIN Examination e ON l.ID = e.ID
WHERE l.C3 > 35 AND e.ANA Pattern = 'P';
------------------------------
question: Among the patients have blood clots in veins, how many of them have a normal level of complement 4?
GT: SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.C4 > 10 AND T1.Diagnosis = 'APS'
Pred: SELECT COUNT(DISTINCT e.ID) AS num_patients
FROM Examination e
INNER JOIN Laboratory l ON e.ID = l.ID
WHERE e.Thrombosis = 1 AND l.C4 > 10;
------------------------------
question: How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital?
GT: SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP = 'negative' OR T2.RNP = '0' AND T1.Admission = '+'
Pred: SELECT COUNT(DISTINCT L.ID) AS Total_Patient
FROM Laboratory L
INNER JOIN Patient P ON L.ID = P.ID
WHERE L.RNP IN ('-', '+-') AND P.Admission = '+';
------------------------------
question: Among the patients with normal anti-SM, how many of them does not have thrombosis?
GT: SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('negative','0') AND T1.Thrombosis = 0
Pred: SELECT COUNT(*)
FROM Examination e
INNER JOIN Laboratory l ON e.ID = l.ID
WHERE e.Thrombosis = 0 AND l.SM IN ('-', '+-');
------------------------------
question: For the patients with an abnormal anti-SM, please list the IDs of the three youngest ones.
GT: SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM NOT IN ('negative','0') ORDER BY T1.Birthday DESC LIMIT 3
Pred: SELECT ID
FROM Patient
WHERE SM NOT IN ('negative', '0')
ORDER BY Birthday DESC
LIMIT 3;
------------------------------
question: Please list the IDs of the patients who had the examination done after 1997/1/1 and had a normal anti-scl70.
GT: SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SC170 IN ('negative','0') AND T2.Date > 1997-01-01
Pred: SELECT ID
FROM Examination
WHERE Examination Date > '1997-01-01' AND SC170 IN ('negative', '0');
------------------------------
question: Among the patients who has a normal anti-scl70, how many of them are female and does not have any symptom?
GT: SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.SC170 = 'negative' OR T2.SC170 = '0') AND T1.SEX = 'F' AND T3.Symptoms IS NULL
Pred: SELECT COUNT(DISTINCT p.ID) 
FROM Patient p 
JOIN Examination e ON p.ID = e.ID 
WHERE e.SC170 IN ('negative', '0') 
  AND p.SEX = 'F' 
  AND e.Symptoms IS NULL;
------------------------------
question: How many patients with a normal anti-SSA came to the hospital before 2000?
GT: SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA IN ('negative', '0') AND STRFTIME('%Y', T2.Date) < '2000'
Pred: SELECT COUNT(DISTINCT p.ID) AS "Number of distinct ones"
FROM Patient p
JOIN Laboratory l ON p.ID = l.ID
WHERE l.SSA IN ('-', '+')
AND strftime('%Y', p."First Date") < '2000';
------------------------------
question: Which patient is the first patient with an abnormal anti-SSA to come to the hospital? Please give his or her ID.
GT: SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`First Date` IS NOT NULL AND T2.SSA NOT IN ('negative', '0') ORDER BY T1.`First Date` ASC LIMIT 1
Pred: SELECT p.ID
FROM Patient p
INNER JOIN Examination e ON p.ID = e.ID
WHERE e.SSA NOT IN ('negative', '0')
ORDER BY p."First Date"
LIMIT 1;
------------------------------
question: How many patients have a normal anti-SSB and are diagnosed with SLE in the examination?
GT: SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB = 'negative' OR '0' AND T1.Diagnosis = 'SLE'
Pred: SELECT COUNT(DISTINCT L.ID) 
FROM Laboratory L 
JOIN Examination E ON L.ID = E.ID 
WHERE L.SSB IN ('-', '+-') AND E.Diagnosis = 'SLE';
------------------------------
question: For the patients whose anti-SSB are normal, how many of them have other symptoms observed in their examination?
GT: SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB = 'negative' OR '0' AND T1.Symptoms IS NOT NULL
Pred: SELECT COUNT(DISTINCT ID) AS count
FROM Examination
WHERE SSB IN ('negative', '0') AND Symptoms IS NOT NULL;
------------------------------
question: Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male?
GT: SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA IN ('negative', '0') AND T2.SSB IN ('negative', '0') AND T1.SEX = 'M'
Pred: SELECT COUNT(DISTINCT p.ID) AS MaleCount
FROM Patient p
INNER JOIN Laboratory l ON p.ID = l.ID
WHERE p.SEX = 'M' AND l.CENTROMEA IN ('-', '+-') AND l.SSB IN ('-', '+-');
------------------------------
question: For the patients who have an abnormal level of anti-DNA, please list the diseases they are diagnosed with.
GT: SELECT DISTINCT(T1.Diagnosis) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA >= 8
Pred: SELECT examination.Diagnosis
FROM Laboratory
INNER JOIN Examination ON Laboratory.ID = Examination.ID
WHERE Laboratory.DNA >= 8;
------------------------------
question: What is the percentage of patient who has a abnormal level of glutamic oxaloacetic transaminase level, yet he or she is diagnosed with SLE?
GT: SELECT COUNT(CASE WHEN T1.Diagnosis LIKE '%SLE%' THEN T1.ID ELSE 0 END) / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`GOT` >= 60
Pred: SELECT 
    (CAST(COUNT(CASE WHEN p.Diagnosis = 'SLE' THEN 1 ELSE NULL END) AS REAL) / COUNT(l.ID)) * 100 AS percentage
FROM 
    Laboratory l
JOIN 
    Patient p ON l.ID = p.ID
WHERE 
    l.GOT >= 60;
------------------------------
question: Among the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born?
GT: SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT >= 60 ORDER BY T1.Birthday DESC LIMIT 1
Pred: SELECT p.Birthday
FROM Laboratory l
INNER JOIN Patient p ON l.ID = p.ID
WHERE l.GOT >= 60
ORDER BY p.Birthday ASC
LIMIT 1;
------------------------------
question: Please list the top three patients' birthdays with the highest glutamic pylvic transaminase in the normal range.
GT: SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT < 60 ORDER BY T2.GPT DESC LIMIT 3
Pred: WITH RankedLaboratory AS (
    SELECT 
        L.ID,
        L.GPT,
        P.Birthday,
        ROW_NUMBER() OVER (PARTITION BY L.ID ORDER BY L.GPT DESC) AS rank
    FROM 
        Laboratory L
    INNER JOIN 
        Patient P ON L.ID = P.ID
    WHERE 
        L.GPT < 60
)
SELECT 
    Birthday
FROM 
    RankedLaboratory
WHERE 
    rank <= 3;
------------------------------
question: For the patient with the highest lactate dehydrogenase in the normal range, when was his or her data first recorded?
GT: SELECT T1.`First Date` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH < 500 ORDER BY T2.LDH ASC LIMIT 1
Pred: SELECT p."First Date"
FROM Laboratory l
JOIN Patient p ON l.ID = p.ID
WHERE l.LDH = (
    SELECT MAX(LDH)
    FROM Laboratory
    WHERE LDH < 500
);
------------------------------
question: When is the latest patient's medical data recorded? This patient should have an abnormal level of lactate dehydrogenase.
GT: SELECT T1.`First Date` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH >= 500 ORDER BY T1.`First Date` DESC LIMIT 1
Pred: WITH LatestPatient AS (
    SELECT ID
    FROM Patient
    ORDER BY First_Date DESC
    LIMIT 1
),
AbnormalLDH AS (
    SELECT L.Date
    FROM LatestPatient LP
    JOIN Laboratory L ON LP.ID = L.ID
    WHERE L.LDH >= 500
)
SELECT Date
FROM AbnormalLDH;
------------------------------
question: For the patients who are diagnosed with SJS, how many of them have a normal level of total protein?
GT: SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' AND T2.TP > 6.0 AND T2.TP < 8.5
Pred: SELECT COUNT(*)
FROM Laboratory L
INNER JOIN Patient P ON L.ID = P.ID
WHERE P.Diagnosis = 'SJS' AND L.TP BETWEEN 6.0 AND 8.5;
------------------------------
question: What is the examination date of the patient whose albumin is the highest in the normal range?
GT: SELECT Date FROM Laboratory WHERE ALB > 3.5 AND ALB < 5.5 ORDER BY ALB DESC LIMIT 1
Pred: SELECT Date
FROM Examination
WHERE ID IN (
    SELECT ID
    FROM Laboratory
    WHERE ALB = (
        SELECT MAX(ALB)
        FROM Laboratory
        WHERE ALB > 3.5 AND ALB < 5.5
    )
    AND ALB > 3.5 AND ALB < 5.5
);
------------------------------
question: What is the anti Cardiolipin antibody concentration of the female patient with the highest uric acid level in the normal range?
GT: SELECT T3.`aCL IgG`, T3.`aCL IgM`, T3.`aCL IgA` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T1.SEX = 'F' AND T2.UA > 6.5 ORDER BY T2.UA DESC LIMIT 1
Pred: SELECT 
    e."aCL IgG", 
    e."aCL IgM", 
    e."aCL IgA"
FROM 
    Examination e
JOIN 
    Patient p ON e.ID = p.ID
WHERE 
    p.SEX = 'F' 
    AND e.UA > 6.50
ORDER BY 
    e.UA DESC
LIMIT 1;
------------------------------
question: Please list the patient's ID whose creatinine level is normal and whose anti Cardiolipin antibody concentration level is the highest.
GT: SELECT T2.ID FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.CRE < 1.5 ORDER BY T2.`aCL IgA` DESC LIMIT 1
Pred: SELECT L.ID
FROM Laboratory L
WHERE L.CRE < 1.5
AND L.aCL_IgA = (
    SELECT MAX(aCL_IgA)
    FROM Laboratory
);
------------------------------
question: Among the patients whose total bilirubin is over the normal range, how many of them have a peripheral pattern observed in the sheet of ANA examination?
GT: SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-BIL` >= 2 AND T3.`ANA Pattern` LIKE '%P%'
Pred: SELECT COUNT(DISTINCT l.ID) AS Total_Patients
FROM Laboratory l
INNER JOIN Examination e ON l.ID = e.ID
WHERE l."T-BIL" >= 2.0 AND e."ANA Pattern" LIKE '%P%';
------------------------------
question: Among the patients whose total cholesterol is within the normal range, how many of them have a P pattern observed in the sheet of ANA examination?
GT: SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T3.`ANA Pattern` = 'P' AND T2.`T-CHO` < 250
Pred: SELECT COUNT(DISTINCT l.ID) AS Total_Patients
FROM Laboratory l
INNER JOIN Examination e ON l.ID = e.ID
WHERE l."T-CHO" < 250 AND e."ANA Pattern" = 'P';
------------------------------
question: What is the disease name of the patient who has the highest level of triglyceride within the normal range?
GT: SELECT T1.Diagnosis FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG < 200 ORDER BY T2.TG DESC LIMIT 1
Pred: SELECT Diagnosis
FROM Examination
WHERE TG = (
    SELECT MAX(TG)
    FROM Examination
    WHERE TG < 200
);
------------------------------
question: How many patients diagnosed with SLE have a normal white blood cell level?
GT: SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.WBC BETWEEN 3.5 AND 9
Pred: SELECT COUNT(DISTINCT p.ID) AS Total_SLE_Patients
FROM Patient p
INNER JOIN Laboratory l ON p.ID = l.ID
WHERE p.Diagnosis = 'SLE' AND l.WBC BETWEEN 3.5 AND 9.0;
------------------------------
question: Please list the patient's ID if he or she has an abnormal level of red blood cell and is followed at the outpatient clinic.
GT: SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.RBC <= 3.5 OR T2.RBC >= 6) AND T1.Admission = '-'
Pred: SELECT L.ID
FROM Laboratory L
INNER JOIN Patient P ON L.ID = P.ID
WHERE L.RBC <= 3.5 OR L.RBC >= 6.0
AND P.Admission = '-';
------------------------------
question: Among the patients who have a normal platelet level, how many of them have other symptoms observed?
GT: SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 100 AND T2.PLT < 400 AND T1.Diagnosis IS NOT NULL
Pred: SELECT COUNT(*) AS Total_Patients
FROM Laboratory L
INNER JOIN Examination E ON L.ID = E.ID
WHERE L.PLT > 100 AND L.PLT < 400 AND E.Symptoms IS NOT NULL;
------------------------------
question: Please list a patient's platelet level if it is within the normal range and if he or she is diagnosed with MCTD.
GT: SELECT T2.PLT FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'MCTD' AND T2.PLT BETWEEN 100 AND 400
Pred: SELECT l.PLT
FROM Laboratory l
INNER JOIN Examination e ON l.ID = e.ID
WHERE l.PLT > 100 AND l.PLT < 400 AND e.Diagnosis = 'MCTD';
------------------------------
question: How many students in the Student_Club are from the College of Engineering?
GT: SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'
Pred: SELECT COUNT(*)
FROM member m
JOIN major mj ON m.link_to_major = mj.major_id
WHERE m.position = 'Student_Club' AND mj.college = 'College of Engineering';
------------------------------
question: Please list the full names of the students in the Student_Club that come from the Art and Design Department.
GT: SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department'
Pred: SELECT 
    m.first_name || ' ' || m.last_name AS full_name
FROM 
    member m
JOIN 
    major mj ON m.link_to_major = mj.major_id
JOIN 
    event e ON m.member_id = e.link_to_member
WHERE 
    e.event_name = 'Student_Club' 
    AND mj.department = 'Art and Design Department';
------------------------------
question: How many students of the Student_Club have attended the event "Women's Soccer"?
GT: SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'
Pred: SELECT COUNT(*) AS total_members
FROM event e
INNER JOIN attendance a ON e.event_id = a.link_to_event
INNER JOIN member m ON a.link_to_member = m.member_id
WHERE e.event_name = 'Women''s Soccer'
AND m.position = 'Student'
AND m.position = 'Student_Club';
------------------------------
question: Among the students from the Student_Club who attended the event "Women's Soccer", how many of them want a T-shirt that's in medium size?
GT: SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium'
Pred: SELECT COUNT(*) AS total_members
FROM event e
INNER JOIN attendance a ON e.event_id = a.link_to_event
INNER JOIN member m ON a.link_to_member = m.member_id
WHERE e.event_name = 'Women''s Soccer'
AND m.t_shirt_size = 'Medium'
AND m.position = 'Student_Club';
------------------------------
question: What is the event that has the highest attendance of the students from the Student_Club?
GT: SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_name ORDER BY COUNT(T2.link_to_event) DESC LIMIT 1
Pred: SELECT e.event_name
FROM event e
JOIN attendance a ON e.event_id = a.link_to_event
JOIN member m ON a.link_to_member = m.member_id
WHERE m.position = 'Student_Club'
GROUP BY e.event_id
ORDER BY COUNT(a.link_to_event) DESC
LIMIT 1;
------------------------------
question: How many events of the Student_Club did Sacha Harrison attend in 2019?
GT: SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Sacha' AND T3.last_name = 'Harrison' AND SUBSTR(T1.event_date, 1, 4) = '2019'
Pred: SELECT COUNT(e.event_id) AS total_events_attended
FROM event e
JOIN attendance a ON e.event_id = a.link_to_event
JOIN member m ON a.link_to_member = m.member_id
WHERE e.event_date LIKE '2019%' 
  AND e.event_name = 'Student_Club' 
  AND m.first_name = 'Sacha' 
  AND m.last_name = 'Harrison';
------------------------------
question: Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?
GT: SELECT T1.event_name FROM event AS T1  INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id  HAVING COUNT(T2.link_to_event) > 10 EXCEPT SELECT T1.event_name  FROM event AS T1  WHERE T1.type = 'Meeting'
Pred: SELECT COUNT(*) AS meeting_count
FROM (
    SELECT e.event_id
    FROM event e
    JOIN attendance a ON e.event_id = a.link_to_event
    JOIN member m ON a.link_to_member = m.member_id
    WHERE e.type = 'Meeting'
      AND m.first_name || ' ' || m.last_name LIKE '%Student_Club%'
    GROUP BY e.event_id
    HAVING COUNT(DISTINCT a.link_to_member) > 10
) AS meeting_events;
------------------------------
question: List the full name of all the members of the Student_Club who attended the "Laugh Out Loud" event.
GT: SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'
Pred: SELECT 
    m.first_name || ' ' || m.last_name AS full_name
FROM 
    member m
INNER JOIN 
    attendance a ON m.member_id = a.link_to_member
INNER JOIN 
    event e ON a.link_to_event = e.event_id
WHERE 
    e.event_name = 'Laugh Out Loud';
------------------------------
question: How much did the Student_Club members spend on food in September Meeting?
GT: SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Food' AND SUBSTR(T1.event_date, 6, 2) = '09'
Pred: SELECT SUM(b.spent) AS total_spent_on_food
FROM event e
INNER JOIN budget b ON e.event_id = b.link_to_event
INNER JOIN attendance a ON e.event_id = a.link_to_event
INNER JOIN member m ON a.link_to_member = m.member_id
WHERE e.event_name = 'September Meeting'
  AND b.category = 'Food'
  AND m.position = 'Student_Club';
------------------------------
question: List the full name of the Student_Club members that grew up in Illinois state.
GT: SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'
Pred: SELECT m.first_name || ' ' || m.last_name AS full_name
FROM member m
JOIN zip_code z ON m.zip = z.zip_code
WHERE m.position = 'Student Club Member' AND z.state = 'Illinois';
------------------------------
question: What department offers the major that Pierce and Guidi took?
GT: SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.last_name = 'Pierce' OR T1.last_name = 'Guidi'
Pred: SELECT m.department
FROM member AS mb
INNER JOIN major AS m ON mb.link_to_major = m.major_id
WHERE mb.first_name = 'Pierce' AND mb.last_name = 'Guidi';
------------------------------
question: Was each expense in October Meeting on October 8, 2019 approved?
GT: SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date LIKE '2019-10-08%'
Pred: SELECT DISTINCT e.event_name, ex.approved
FROM event e
JOIN attendance a ON e.event_id = a.link_to_event
JOIN member m ON a.link_to_member = m.member_id
JOIN expense ex ON m.member_id = ex.link_to_member
WHERE e.event_name = 'October Meeting'
  AND e.event_date = '2019-10-08'
  AND ex.approved = 'true';
------------------------------
question: Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.
GT: SELECT SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2019' THEN T2.spent ELSE 0 END) - SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2020' THEN T2.spent ELSE 0 END) AS num FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event
Pred: WITH EventBudget AS (
    SELECT 
        e.event_id,
        e.event_name,
        e.event_date,
        b.spent
    FROM 
        event e
    JOIN 
        budget b ON e.event_id = b.link_to_event
    WHERE 
        e.event_name = 'Student_Club'
),
YearlySpent AS (
    SELECT 
        SUBSTR(event_date, 1, 4) AS year,
        SUM(spent) AS total_spent
    FROM 
        EventBudget
    GROUP BY 
        year
)
SELECT 
    (SELECT total_spent FROM YearlySpent WHERE year = '2019') - 
    (SELECT total_spent FROM YearlySpent WHERE year = '2020') AS difference;
------------------------------
question: What was the cost for the "Posters" on 2019/9/4?
GT: SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04'
Pred: SELECT e.cost
FROM event AS ev
JOIN expense AS e ON ev.event_id = e.link_to_budget
WHERE ev.event_name = 'Posters' AND ev.event_date = '2019-09-04';
------------------------------
question: What is the status of the event which bought "Post Cards, Posters" on 2019/8/20?
GT: SELECT T1.event_status FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Post Cards, Posters' AND T2.expense_date = '2019-08-20'
Pred: SELECT e.event_status
FROM event e
JOIN budget b ON e.event_id = b.link_to_event
JOIN expense ex ON b.budget_id = ex.link_to_budget
WHERE ex.expense_description = 'Post Cards, Posters'
  AND ex.expense_date = '2019-8-20';
------------------------------
question: Who was the first one paid his/her dues? Tell the full name.
GT: SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.source = 'Dues' ORDER BY T2.date_received LIMIT 1
Pred: SELECT m.first_name || ' ' || m.last_name AS full_name
FROM member m
JOIN (
    SELECT link_to_member, MIN(date_received) AS earliest_payment_date
    FROM income
    WHERE source = 'Dues'
    GROUP BY link_to_member
) i ON m.member_id = i.link_to_member
ORDER BY i.earliest_payment_date ASC
LIMIT 1;
------------------------------
question: How many times was the budget in Advertisement for "Yearly Kickoff" meeting more than "October Meeting"?
GT: SELECT CAST(SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.type = 'Meeting'
Pred: WITH AdvertisementBudgets AS (
    SELECT 
        b.amount,
        e.event_name
    FROM 
        budget b
    INNER JOIN 
        event e ON b.link_to_event = e.event_id
    WHERE 
        b.category = 'Advertisement'
),
EventSums AS (
    SELECT 
        event_name,
        SUM(amount) AS total_amount
    FROM 
        AdvertisementBudgets
    GROUP BY 
        event_name
)
SELECT 
    COUNT(*) AS count
FROM (
    SELECT 
        (SELECT total_amount FROM EventSums WHERE event_name = 'Yearly Kickoff') /
        (SELECT total_amount FROM EventSums WHERE event_name = 'October Meeting') AS ratio
) AS RatioCTE
WHERE 
    ratio > 1;
------------------------------
question: What percentage was the budget for Parking to the total budget for the "November Speaker"?
GT: SELECT CAST(SUM(CASE WHEN T1.category = 'Parking' THEN T1.amount ELSE 0 END) AS REAL) * 100 / SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Speaker'
Pred: SELECT 
    (SUM(CASE WHEN b.category = 'Parking' THEN b.amount ELSE 0 END) / 
     COUNT(CASE WHEN e.event_name = 'November Speaker' THEN 1 ELSE NULL END)) * 100 AS percentage
FROM 
    budget b
JOIN 
    event e ON b.link_to_event = e.event_id;
------------------------------
question: What are the expenses of the budget with the lowest remaining?
GT: SELECT T2.expense_description FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget ORDER BY T1.remaining LIMIT 1
Pred: SELECT MIN(remaining) AS min_remaining
   FROM budget
------------------------------
question: List all the members who attended the event "October Meeting".
GT: SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'October Meeting'
Pred: SELECT DISTINCT m.first_name, m.last_name
FROM event e
JOIN attendance a ON e.event_id = a.link_to_event
JOIN member m ON a.link_to_member = m.member_id
WHERE e.event_name = 'October Meeting';
------------------------------
question: Which college do most of the members go to?
GT: SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id GROUP BY T2.major_id ORDER BY COUNT(T2.college) DESC LIMIT 1
Pred: SELECT m.college, COUNT(m.major_id) AS member_count
FROM member AS m
JOIN major AS mj ON m.link_to_major = mj.major_id
GROUP BY m.college
ORDER BY member_count DESC
LIMIT 1;
------------------------------
question: List all the expenses incurred by the vice president.
GT: SELECT T2.expense_id, T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'
Pred: SELECT e.expense_description
FROM expense e
JOIN member m ON e.link_to_member = m.member_id
WHERE m.position = 'Vice President';
------------------------------
question: List the name of students that have attended more than 7 events.
GT: SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T2.link_to_member HAVING COUNT(T2.link_to_event) > 7
Pred: SELECT 
    m.first_name || ' ' || m.last_name AS full_name
FROM 
    member m
INNER JOIN 
    attendance a ON m.member_id = a.link_to_member
GROUP BY 
    m.member_id
HAVING 
    COUNT(a.link_to_event) > 7;
------------------------------
question: State the name of students from Georgetown, South Carolina.
GT: SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Georgetown' AND T2.state = 'South Carolina'
Pred: SELECT m.first_name || ' ' || m.last_name AS full_name
FROM member m
JOIN zip_code z ON m.zip = z.zip_code
WHERE z.city = 'Georgetown' AND z.state = 'South Carolina';
------------------------------
question: How many income generated by Grant Gilmour?
GT: SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Grant' AND T1.last_name = 'Gilmour'
Pred: SELECT COUNT(i.income_id) AS total_income
FROM income i
JOIN member m ON i.link_to_member = m.member_id
WHERE m.first_name = 'Grant' AND m.last_name = 'Gilmour';
------------------------------
question: Which student was able to generate income more than $40?
GT: SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount > 40
Pred: SELECT 
    m.first_name || ' ' || m.last_name AS full_name
FROM 
    member m
INNER JOIN 
    income i ON m.member_id = i.link_to_member
WHERE 
    m.position = 'Student' AND i.amount > 40;
------------------------------
question: What is the total expense for the Yearly Kickoff?
GT: SELECT SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'Yearly Kickoff'
Pred: SELECT SUM(ex.cost) AS total_expense
FROM event e
JOIN expense ex ON e.event_id = ex.link_to_event
WHERE e.event_name = 'Yearly Kickoff';
------------------------------
question: Which student has been entrusted to manage the budget for the Yearly Kickoff?
GT: SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Yearly Kickoff'
Pred: SELECT m.first_name || ' ' || m.last_name AS full_name
FROM event e
JOIN budget b ON e.event_id = b.link_to_event
JOIN member m ON b.link_to_event = m.member_id
WHERE e.event_name = 'Yearly Kickoff';
------------------------------
question: Which students manage to generate the highest income. State his/her full name along with the income source.
GT: SELECT T1.first_name, T1.last_name, T2.source FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.first_name, T1.last_name, T2.source ORDER BY SUM(T2.amount) DESC LIMIT 1
Pred: SELECT m.first_name, m.last_name, i.source, i.amount
FROM member m
JOIN income i ON m.member_id = i.link_to_member
WHERE i.amount = (
    SELECT MAX(amount)
    FROM income
);
------------------------------
question: Which event has the lowest cost?
GT: SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget ORDER BY T3.cost LIMIT 1
Pred: SELECT e.event_name
FROM event e
JOIN expense ex ON e.event_id = ex.link_to_event
GROUP BY e.event_id
HAVING MIN(ex.cost) = (
    SELECT MIN(cost)
    FROM expense
);
------------------------------
question: What is the ratio between students majored in finance and physics?
GT: SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio FROM major
Pred: SELECT 
    (SELECT COUNT(*) 
     FROM member m 
     JOIN major mj ON m.link_to_major = mj.major_id 
     WHERE mj.major_name = 'Finance') /
    (SELECT COUNT(*) 
     FROM member m 
     JOIN major mj ON m.link_to_major = mj.major_id 
     WHERE mj.major_name = 'Physics') AS ratio;
------------------------------
question: Provide the number of events attended by Luisa Guidi. What is her major?
GT: SELECT COUNT(T3.link_to_event), T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T2.first_name = 'Luisa' AND T2.last_name = 'Guidi'
Pred: SELECT COUNT(a.link_to_event) AS event_count, m.major_name
FROM member m
JOIN attendance a ON m.member_id = a.link_to_member
JOIN major mj ON m.link_to_major = mj.major_id
WHERE m.first_name = 'Luisa' AND m.last_name = 'Guidi';
------------------------------
question: Did Maya Mclean attend the 'Women's Soccer' event?
GT: SELECT CASE WHEN T3.event_name = 'Women''s Soccer' THEN 'YES' END AS result FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean'
Pred: SELECT e.event_name
FROM member m
JOIN attendance a ON m.member_id = a.link_to_member
JOIN event e ON a.link_to_event = e.event_id
WHERE m.first_name = 'Maya' AND m.last_name = 'Mclean' AND e.event_name = 'Women''s Soccer';
------------------------------
question: Identify the type of expenses and their total value approved for 'October Meeting' event.
GT: SELECT T1.type, SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting'
Pred: SELECT 
    e.type AS expense_type,
    SUM(e.cost) AS total_value
FROM 
    event ev
JOIN 
    budget b ON ev.event_id = b.link_to_event
JOIN 
    expense e ON b.budget_id = e.link_to_budget
WHERE 
    ev.event_name = 'October Meeting' 
    AND e.approved = 'true'
GROUP BY 
    e.type;
------------------------------
question: Among the budgets for Food, which one has the highest budgeted amount?
GT: SELECT budget_id FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget )
Pred: SELECT MAX(amount) AS max_budget_amount
FROM budget
WHERE category = 'Food';
------------------------------
question: Among the budgets for Advertising, list out top three which have the most budgeted amount?
GT: SELECT budget_id FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3
Pred: SELECT amount
FROM budget
WHERE category = 'Advertisement'
ORDER BY amount DESC
LIMIT 3;
------------------------------
question: List out the full name and total cost that member id "rec4BLdZHS2Blfp4v" incurred?
GT: SELECT T1.first_name, T1.last_name, SUM(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v'
Pred: SELECT 
    m.first_name || ' ' || m.last_name AS full_name,
    SUM(e.cost) AS total_cost
FROM 
    member m
INNER JOIN 
    expense e ON m.member_id = e.link_to_member
WHERE 
    m.member_id = 'rec4BLdZHS2Blfp4v'
GROUP BY 
    m.first_name, m.last_name;
------------------------------
question: Calculate the percentage of members who are major Business in the list?
GT: SELECT CAST(SUM(CASE WHEN T2.major_name = 'Business' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member'
Pred: SELECT 
    CAST(COUNT(*) AS REAL) * 100.0 / (SELECT COUNT(*) FROM member) AS percentage
FROM 
    member m
JOIN 
    major mj ON m.link_to_major = mj.major_id
WHERE 
    mj.major_name = 'Business' AND m.position = 'Member';
------------------------------
question: List the last name of members with a major in environmental engineering and include its department and college name.
GT: SELECT T2.last_name, T1.department, T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member' AND T1.major_name = 'Environmental Engineering'
Pred: SELECT m.last_name, mj.major_name, mj.department, mj.college
FROM member m
INNER JOIN major mj ON m.link_to_major = mj.major_id
WHERE mj.major_name = 'Environmental Engineering';
------------------------------
question: What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?
GT: SELECT DISTINCT T2.category, T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' AND T2.spent = 0 AND T1.type = 'Guest Speaker'
Pred: SELECT b.category
FROM event e
JOIN budget b ON e.event_id = b.link_to_event
WHERE e.type = 'Guest Speaker'
  AND e.location = 'MU 215'
  AND b.spent = 0;
------------------------------
question: Which countries have zip codes with post office boxes?
GT: SELECT DISTINCT county FROM zip_code WHERE type = 'PO Box' AND county IS NOT NULL
Pred: SELECT DISTINCT county
FROM zip_code
WHERE type = 'PO Box';
------------------------------
question: Please provide links to events for members who have paid more than 50 dollar.
GT: SELECT DISTINCT T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T1.cost > 50
Pred: SELECT DISTINCT e.link_to_event
FROM expense AS ex
JOIN budget AS b ON ex.link_to_budget = b.budget_id
JOIN event AS e ON b.link_to_event = e.event_id
WHERE ex.cost > 50;
------------------------------
question: Which members who were approved from 1/10/2019 to 11/19/2019? Please identify the member who attended the event and the link to their event.
GT: SELECT DISTINCT T1.link_to_member, T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE date(SUBSTR(T1.expense_date, 1, 10)) BETWEEN '2019-01-10' AND '2019-11-19' AND T1.approved = 'true'
Pred: SELECT m.first_name, m.last_name, a.link_to_event
FROM member m
INNER JOIN attendance a ON m.member_id = a.link_to_member
INNER JOIN expense e ON a.link_to_member = e.link_to_member
WHERE e.approved = 'true' AND e.expense_date BETWEEN '2019-01-10' AND '2019-11-19';
------------------------------
question: Please indicate the college of the person whose first name is Katy with the link to the major "rec1N0upiVLy5esTO".
GT: SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.link_to_major = 'rec1N0upiVLy5esTO' AND T1.first_name = 'Katy'
Pred: SELECT m.college
FROM member AS m
JOIN major AS mj ON m.link_to_major = mj.major_id
WHERE m.first_name = 'Katy' AND m.link_to_major = 'rec1N0upiVLy5esTO';
------------------------------
question: How many members have education major in the College of Education & Human Services?
GT: SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member' AND T2.major_name LIKE '%Education%' AND T2.college = 'College of Education & Human Services'
Pred: SELECT COUNT(*)
FROM member m
JOIN major mj ON m.link_to_major = mj.major_id
WHERE mj.major_name = 'Education'
  AND m.position = 'Member'
  AND mj.college = 'College of Education & Human Services';
------------------------------
question: List the expenses that spend more than fifty dollars on average.
GT: SELECT expense_description FROM expense GROUP BY expense_description HAVING AVG(cost) > 50
Pred: SELECT expense_description, AVG(cost) AS average_cost
FROM expense
GROUP BY expense_description
HAVING AVG(cost) > 50;
------------------------------
question: Find the full name of members whose t-shirt size is extra large.
GT: SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large'
Pred: SELECT first_name || ' ' || last_name AS full_name
FROM member
WHERE t_shirt_size = 'X-Large';
------------------------------
question: Find the name and date of events with expenses for pizza that were more than fifty dollars but less than a hundred dollars.
GT: SELECT T1.event_name, T1.event_date FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T3.expense_description = 'Pizza' AND T3.cost > 50 AND T3.cost < 100
Pred: SELECT e.event_name, e.event_date
FROM event e
JOIN expense ex ON e.event_id = ex.link_to_event
WHERE ex.expense_description = 'Pizza' AND ex.cost > 50 AND ex.cost < 100;
------------------------------
question: In the events with more than forty incomes, list the city and country in which the event is happening.
GT: SELECT DISTINCT T3.city, T3.county FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN zip_code AS T3 ON T3.zip_code = T2.zip WHERE T1.amount > 40
Pred: SELECT z.city, z.county
FROM event e
JOIN income i ON e.event_id = i.link_to_member
JOIN zip_code z ON e.location = z.zip_code
GROUP BY e.event_id
HAVING COUNT(i.income_id) > 40;
------------------------------
question: Among the members who incurred expenses in more than one event, who paid the most amount?
GT: SELECT T2.member_id FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN budget AS T3 ON T1.link_to_budget = T3.budget_id INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id GROUP BY T2.member_id HAVING COUNT(DISTINCT T4.event_id) > 1 ORDER BY SUM(T1.cost) DESC LIMIT 1
Pred: SELECT m.first_name, m.last_name, e.total_expenses
FROM (
    SELECT e.link_to_member, SUM(e.cost) AS total_expenses
    FROM expense e
    JOIN budget b ON e.link_to_budget = b.budget_id
    JOIN event ev ON b.link_to_event = ev.event_id
    GROUP BY e.link_to_member
    HAVING COUNT(DISTINCT ev.event_id) > 1
) e
JOIN member m ON e.link_to_member = m.member_id
ORDER BY e.total_expenses DESC
LIMIT 1;
------------------------------
question: What is the average amount paid by students in a position other than a member?
GT: SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN member as T2 ON T1.link_to_member = T2.member_id WHERE T2.position != 'Member'
Pred: SELECT 
    CAST(SUM(e.cost) AS REAL) / COUNT(e.event_id) AS average_amount_paid
FROM 
    member m
JOIN 
    expense e ON m.member_id = e.link_to_member
WHERE 
    m.position != 'Member';
------------------------------
question: List the name of events with less than average parking cost.
GT: SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)
Pred: SELECT e.event_name
FROM event e
JOIN expense ex ON e.event_id = ex.link_to_event
WHERE ex.category = 'Parking'
AND ex.cost < (
    SELECT AVG(cost)
    FROM expense
    WHERE category = 'Parking'
);
------------------------------
question: What is the percentage of the cost for the meeting events?
GT: SELECT SUM(CASE WHEN T1.type = 'Meeting' THEN T3.cost ELSE 0 END) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget
Pred: SELECT 
    (CAST(SUM(e.cost) AS REAL) / COUNT(DISTINCT ev.event_id)) * 100 AS percentage
FROM 
    event ev
JOIN 
    budget b ON ev.event_id = b.link_to_event
JOIN 
    expense e ON b.budget_id = e.link_to_budget
WHERE 
    ev.type = 'Meeting';
------------------------------
question: Which budget allowed the most money for water, chips, and cookies?
GT: SELECT T2.budget_id FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Water, chips, cookies' ORDER BY T1.cost DESC LIMIT 1
Pred: SELECT expense_description
FROM expense
WHERE cost = (
    SELECT MAX(cost)
    FROM expense
    WHERE expense_description = 'Water, chips, cookies'
) AND expense_description = 'Water, chips, cookies';
------------------------------
question: List the full name of the top five members who spend the most money in the descending order of spending.
GT: SELECT T3.first_name, T3.last_name FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id ORDER BY T2.spent DESC LIMIT 5
Pred: SELECT 
    m.first_name || ' ' || m.last_name AS full_name,
    SUM(e.cost) AS total_spent
FROM 
    member m
JOIN 
    expense e ON m.member_id = e.link_to_member
GROUP BY 
    m.member_id
ORDER BY 
    total_spent DESC
LIMIT 5;
------------------------------
question: Calculate the difference in the percentage of members in New Jersey and Vermont.
GT: SELECT CAST((SUM(CASE WHEN T2.state = 'New Jersey' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.state = 'Vermont' THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T1.member_id) AS diff FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip
Pred: WITH StateCounts AS (
    SELECT 
        COUNT(CASE WHEN z.state = 'New Jersey' THEN 1 END) AS new_jersey_count,
        COUNT(CASE WHEN z.state = 'Vermont' THEN 1 END) AS vermont_count,
        COUNT(m.member_id) AS total_member_count
    FROM member m
    JOIN zip_code z ON m.zip = z.zip_code
    WHERE m.position = 'Member'
),
PercentageCalculation AS (
    SELECT 
        (new_jersey_count * 100.0 / total_member_count) AS new_jersey_percentage,
        (vermont_count * 100.0 / total_member_count) AS vermont_percentage
    FROM StateCounts
)
SELECT 
    new_jersey_percentage - vermont_percentage AS state_difference
FROM PercentageCalculation;
------------------------------
question: Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.
GT: SELECT DISTINCT T3.first_name, T3.last_name, T4.amount FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T3.member_id = T2.link_to_member INNER JOIN income AS T4 ON T4.link_to_member = T3.member_id WHERE T4.date_received = '2019-09-09'
Pred: SELECT m.first_name, m.last_name, i.amount
FROM member m
INNER JOIN income i ON m.member_id = i.link_to_member
WHERE i.date_received = '9/9/2019';
------------------------------
question: Calculate the total amount spent on speaker gifts and list the name of the event they were spent on.
GT: SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' GROUP BY T2.event_name
Pred: SELECT 
    e.event_name, 
    SUM(b.spent) AS total_spent
FROM 
    budget b
JOIN 
    event e ON b.link_to_event = e.event_id
WHERE 
    b.category = 'Speaker Gifts'
GROUP BY 
    e.event_name;
------------------------------
question: What is the ratio of customers who pay in EUR against customers who pay in CZK?
GT: SELECT CAST(SUM(IIF(Currency = 'EUR', 1, 0)) AS FLOAT) / SUM(IIF(Currency = 'CZK', 1, 0)) AS ratio FROM customers
Pred: SELECT 
    (SELECT COUNT(*) FROM customers WHERE Currency = 'EUR') / 
    (SELECT COUNT(*) FROM customers WHERE Currency = 'CZK') AS Ratio_EUR_to_CZK;
------------------------------
question: Which customers, paying in CZK, consumed the most gas in 2011?
GT: SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Date BETWEEN 201101 AND 201112 GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1
Pred: SELECT 
    c.CustomerID,
    SUM(y.Consumption) AS TotalConsumption
FROM 
    customers c
JOIN 
    yearmonth y ON c.CustomerID = y.CustomerID
WHERE 
    c.Currency = 'CZK'
    AND y.Date BETWEEN '201101' AND '201112'
GROUP BY 
    c.CustomerID
ORDER BY 
    TotalConsumption DESC
LIMIT 10;
------------------------------
question: How many customers in KAM had a consumption of less than 30,000 for the year 2012?
GT: SELECT COUNT(*) FROM ( SELECT T2.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND SUBSTRING(T2.Date, 1, 4) = '2012' GROUP BY T2.CustomerID HAVING SUM(T2.Consumption) < 30000 ) AS t1
Pred: SELECT COUNT(*) 
FROM customers c
JOIN yearmonth y ON c.CustomerID = y.CustomerID
WHERE c.Segment = 'KAM' 
  AND y.Consumption < 30000 
  AND y.Date BETWEEN '201201' AND '201212';
------------------------------
question: Which year recorded the most gas use paid in EUR?
GT: SELECT SUBSTRING(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY SUBSTRING(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1
Pred: SELECT 
    strftime('%Y', t1.Date) AS Year,
    SUM(t1.Amount) AS TotalGasUse
FROM 
    transactions_1k t1
JOIN 
    customers t2 ON t1.CustomerID = t2.CustomerID
WHERE 
    t2.Currency = 'EUR'
GROUP BY 
    Year
ORDER BY 
    TotalGasUse DESC
LIMIT 1;
------------------------------
question: Which year recorded the most consumption of gas paid in CZK?
GT: SELECT SUBSTR(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' GROUP BY SUBSTR(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1
Pred: SELECT 
    SUBSTR(ym.Date, 1, 4) AS Year,
    SUM(ym.Consumption) AS TotalConsumption
FROM 
    yearmonth ym
JOIN 
    customers c ON ym.CustomerID = c.CustomerID
WHERE 
    c.Currency = 'CZK'
GROUP BY 
    SUBSTR(ym.Date, 1, 4)
ORDER BY 
    TotalConsumption DESC
LIMIT 1;
------------------------------
question: What was the gas consumption peak month for SME customers in 2013?
GT: SELECT SUBSTR(T2.Date, 5, 2) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME' GROUP BY SUBSTR(T2.Date, 5, 2) ORDER BY SUM(T2.Consumption) DESC LIMIT 1
Pred: SELECT 
    y.Date
FROM 
    yearmonth y
JOIN 
    customers c ON y.CustomerID = c.CustomerID
WHERE 
    c.Segment = 'SME' AND y.Date LIKE '2013%'
ORDER BY 
    y.Consumption DESC
LIMIT 1;
------------------------------
question: What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?
GT: SELECT CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Consumption = ( SELECT MIN(Consumption) FROM yearmonth ) AND T2.Date BETWEEN 201301 AND 201312
Pred: WITH CustomerConsumption AS (
    SELECT 
        c.CustomerID,
        c.Segment,
        SUM(y.Consumption) AS TotalConsumption
    FROM 
        yearmonth y
    INNER JOIN 
        customers c ON y.CustomerID = c.CustomerID
    WHERE 
        y.Date BETWEEN '201301' AND '201312'
        AND c.Currency = 'CZK'
    GROUP BY 
        c.CustomerID, c.Segment
),
RankedConsumption AS (
    SELECT 
        CustomerID,
        Segment,
        TotalConsumption,
        ROW_NUMBER() OVER (PARTITION BY Segment ORDER BY TotalConsumption ASC) AS ConsumptionRank
    FROM 
        CustomerConsumption
),
LowestConsumption AS (
    SELECT 
        CustomerID,
        Segment,
        TotalConsumption
    FROM 
        RankedConsumption
    WHERE 
        ConsumptionRank = 1
),
SegmentAverage AS (
    SELECT 
        Segment,
        AVG(TotalConsumption) AS AverageConsumption
    FROM 
        LowestConsumption
    GROUP BY 
        Segment
)
SELECT 
    (SELECT AverageConsumption FROM SegmentAverage WHERE Segment = 'SME') - 
    (SELECT AverageConsumption FROM SegmentAverage WHERE Segment = 'LAM') AS SMEvsLAM,
    (SELECT AverageConsumption FROM SegmentAverage WHERE Segment = 'LAM') - 
    (SELECT AverageConsumption FROM SegmentAverage WHERE Segment = 'KAM') AS LAMvsKAM,
    (SELECT AverageConsumption FROM SegmentAverage WHERE Segment = 'KAM') - 
    (SELECT AverageConsumption FROM SegmentAverage WHERE Segment = 'SME') AS KAMvsSME;
------------------------------
question: Which of the three segments—SME, LAM and KAM—has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?
GT: SELECT CAST((SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0))) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0)), CAST(SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) , CAST(SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID
Pred: WITH YearlyConsumption AS (
    SELECT
        c.Segment,
        SUM(CASE WHEN ym.Date LIKE '2012%' THEN ym.Consumption ELSE 0 END) AS Consumption2012,
        SUM(CASE WHEN ym.Date LIKE '2013%' THEN ym.Consumption ELSE 0 END) AS Consumption2013
    FROM yearmonth ym
    INNER JOIN customers c ON ym.CustomerID = c.CustomerID
    WHERE c.Currency = 'EUR'
    GROUP BY c.Segment
),
SegmentTrends AS (
    SELECT
        Segment,
        Consumption2012,
        Consumption2013,
        (Consumption2013 - Consumption2012) AS IncreaseOrDecrease,
        ((Consumption2013 - Consumption2012) / Consumption2013) * 100 AS PercentageIncrease
    FROM YearlyConsumption
)
SELECT
    Segment,
    IncreaseOrDecrease,
    PercentageIncrease
FROM (
    SELECT
        Segment,
        IncreaseOrDecrease,
        PercentageIncrease,
        RANK() OVER (ORDER BY PercentageIncrease DESC) AS RankIncrease,
        RANK() OVER (ORDER BY PercentageIncrease ASC) AS RankDecrease
    FROM SegmentTrends
)
WHERE RankIncrease = 1 OR RankDecrease = 1;
------------------------------
question: Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?
GT: SELECT SUM(Currency = 'CZK') - SUM(Currency = 'EUR') FROM customers WHERE Segment = 'SME'
Pred: SELECT 
    SUM(CASE WHEN c.Currency = 'CZK' THEN t.Amount ELSE 0 END) -
    SUM(CASE WHEN c.Currency = 'EUR' THEN t.Amount ELSE 0 END) AS AmountDifference
FROM 
    transactions_1k t
JOIN 
    customers c ON t.CustomerID = c.CustomerID
WHERE 
    c.Segment = 'SME';
------------------------------
question: Which LAM customer used the Euro as their currency and had the highest consumption in October 2013?
GT: SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T2.Date = '201310' AND T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1
Pred: SELECT c.CustomerID
FROM customers c
JOIN yearmonth y ON c.CustomerID = y.CustomerID
WHERE c.Segment = 'LAM'
  AND c.Currency = 'Euro'
  AND y.Date = '201310'
ORDER BY y.Consumption DESC
LIMIT 1;
------------------------------
question: Which country has more "value for money" gas stations? Please give a total number of "value for money" gas stations in each country.
GT: SELECT Country , ( SELECT COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' ) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY COUNT(GasStationID) DESC LIMIT 1
Pred: SELECT 
    Country, 
    COUNT(*) AS TotalValueForMoneyStations
FROM 
    gasstations
WHERE 
    Segment = 'Value for money'
GROUP BY 
    Country
ORDER BY 
    TotalValueForMoneyStations DESC
LIMIT 1;
------------------------------
question: What percentage of KAM customers pay in euros?
GT: SELECT CAST(SUM(Currency = 'EUR') AS FLOAT) * 100 / COUNT(CustomerID) FROM customers WHERE Segment = 'KAM'
Pred: WITH KAMCustomers AS (
    SELECT 
        c.CustomerID,
        SUM(CASE WHEN c.Currency = 'EUR' THEN t.Amount ELSE 0 END) AS TotalAmountEuro,
        SUM(t.Amount) AS TotalAmount
    FROM customers c
    INNER JOIN transactions_1k t ON c.CustomerID = t.CustomerID
    WHERE c.Segment = 'KAM'
    GROUP BY c.CustomerID
)
SELECT 
    (SUM(TotalAmountEuro) / SUM(TotalAmount)) * 100 AS PercentageKAMUsesEuro
FROM KAMCustomers;
------------------------------
question: What percentage of Slovakian gas stations are premium?
GT: SELECT CAST(SUM(IIF(Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / COUNT(GasStationID) FROM gasstations WHERE Country = 'SVK'
Pred: SELECT 
    (CAST(SUM(CASE WHEN Segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS PercentageOfPremiumGasStations
FROM 
    gasstations
WHERE 
    Country = 'Slovakia';
------------------------------
question: Which client segment consumed the least in September 2013?
GT: SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1
Pred: SELECT 
    c.Segment
FROM 
    customers c
JOIN 
    yearmonth y ON c.CustomerID = y.CustomerID
WHERE 
    y.Date = '201309'
GROUP BY 
    c.Segment
ORDER BY 
    SUM(y.Consumption) ASC
LIMIT 1;
------------------------------
question: What is the highest monthly consumption in the year 2012?
GT: SELECT SUM(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012' GROUP BY SUBSTR(Date, 5, 2) ORDER BY SUM(Consumption) DESC LIMIT 1
Pred: SELECT 
    Date,
    SUM(Consumption) AS TotalConsumption
FROM 
    yearmonth
WHERE 
    Date LIKE '2012%'
GROUP BY 
    Date
ORDER BY 
    TotalConsumption DESC
LIMIT 1;
------------------------------
question: What is the biggest monthly consumption of the customers who use euro as their currency?
GT: SELECT SUM(T2.Consumption) / 12 AS MonthlyConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY MonthlyConsumption DESC LIMIT 1
Pred: WITH MonthlyConsumption AS (
    SELECT 
        y.CustomerID,
        AVG(y.Consumption) AS AverageMonthlyConsumption
    FROM 
        yearmonth y
    INNER JOIN 
        customers c ON y.CustomerID = c.CustomerID
    WHERE 
        c.Currency = 'EUR'
    GROUP BY 
        y.CustomerID
)
SELECT 
    MAX(AverageMonthlyConsumption) AS BiggestMonthlyConsumption
FROM 
    MonthlyConsumption;
------------------------------
question: Please list the product description of the products bought in transactions in euro.
GT: SELECT DISTINCT T1.ProductID, T3.Description FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Currency = 'EUR'
Pred: SELECT 
    p.Description
FROM 
    transactions_1k t
JOIN 
    customers c ON t.CustomerID = c.CustomerID
JOIN 
    products p ON t.ProductID = p.ProductID
WHERE 
    c.Currency = 'EUR';
------------------------------
question: Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?
GT: SELECT COUNT(*) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' AND T1.Consumption > 1000.00
Pred: SELECT COUNT(DISTINCT c.CustomerID) AS TotalCustomers
FROM customers c
JOIN yearmonth y ON c.CustomerID = y.CustomerID
WHERE c.Currency = 'EUR' AND y.Consumption > 1000;
------------------------------
question: What is the average total price of the transactions taken place in gas stations in the Czech Republic?
GT: SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'
Pred: SELECT AVG(t.Amount * t.Price) AS AverageTotalPrice
FROM transactions_1k t
INNER JOIN gasstations g ON t.GasStationID = g.GasStationID
WHERE g.Country = 'CZE';
------------------------------
question: For the customers who paid in the euro, what is their average total price of the transactions?
GT: SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Currency = 'EUR'
Pred: SELECT AVG(SUM(t.Price)) AS AverageTotalPrice
FROM customers c
JOIN transactions_1k t ON c.CustomerID = t.CustomerID
WHERE c.Currency = 'EUR';
------------------------------
question: Which customer paid the most in 2012/8/25?
GT: SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY SUM(Price) DESC LIMIT 1
Pred: SELECT CustomerID, SUM(Amount) AS TotalAmount
FROM transactions_1k
WHERE Date = '2012-08-25'
GROUP BY CustomerID
ORDER BY TotalAmount DESC
LIMIT 1;
------------------------------
question: For the earliest customer, what segment did he/she have?
GT: SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID ORDER BY Date ASC LIMIT 1
Pred: SELECT Segment
FROM customers
WHERE CustomerID = (SELECT MIN(CustomerID) FROM customers);
------------------------------
question: For the customer who paid 124.05 in 2012/8/24, how much did he/she spend during the January of 2012? And what is the date and expenses exactly?
GT: SELECT T1.CustomerID, T2.Date, T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Price = 124.05 AND T2.Date = '201201'
Pred: SELECT 
    t1.Date, 
    t1.Amount, 
    SUM(t1.Amount) OVER (PARTITION BY t1.CustomerID) AS TotalAmount
FROM 
    transactions_1k t1
WHERE 
    t1.CustomerID = (
        SELECT 
            t2.CustomerID 
        FROM 
            transactions_1k t2 
        WHERE 
            t2.Date = '2012-08-24' 
            AND t2.Amount = 124.05
    )
    AND t1.Date BETWEEN '2012-01-01' AND '2012-01-31';
------------------------------
question: There's one customer spent 214582.17 in the June of 2013, which currency did he/she use?
GT: SELECT T2.Currency FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201306' AND T1.Consumption = 214582.17
Pred: SELECT c.Currency
FROM transactions_1k t
JOIN customers c ON t.CustomerID = c.CustomerID
WHERE t.Date LIKE '201306%'
GROUP BY t.CustomerID, c.Currency
HAVING SUM(t.Amount) = 214582.17;
------------------------------
question: What's the nationality of the customer who spent 548.4 in 2012/8/24?
GT: SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Price = 548.4
Pred: SELECT c.Country
FROM transactions_1k t
JOIN customers c ON t.CustomerID = c.CustomerID
WHERE t.Amount = 548.4 AND t.Date = '2012-08-24';
------------------------------
question: What is the percentage of the customers who used EUR in 2012/8/25?
GT: SELECT CAST(SUM(IIF(T2.Currency = 'EUR', 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-25'
Pred: SELECT 
    (CAST(COUNT(CASE WHEN c.Currency = 'EUR' THEN 1 END) AS REAL) / COUNT(*)) * 100 AS percentage_eur
FROM 
    customers c
JOIN 
    transactions_1k t ON c.CustomerID = t.CustomerID
WHERE 
    t.Date = '2012-08-25';
------------------------------
question: For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013?
GT: SELECT CAST(SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) - SUM(IIF(SUBSTR(Date, 1, 4) = '2013', Consumption, 0)) AS FLOAT) / SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) FROM yearmonth WHERE CustomerID = ( SELECT T1.CustomerID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' AND T1.Price = 634.8 )
Pred: WITH CustomerTransactions AS (
    SELECT CustomerID
    FROM transactions_1k
    WHERE Amount = 634.8 AND Date = '2012-08-25'
),
YearlyConsumption AS (
    SELECT 
        ym.CustomerID,
        SUM(CASE WHEN ym.Date LIKE '2012%' THEN ym.Consumption ELSE 0 END) AS consumption_2012,
        SUM(CASE WHEN ym.Date LIKE '2013%' THEN ym.Consumption ELSE 0 END) AS consumption_2013
    FROM yearmonth ym
    INNER JOIN CustomerTransactions ct ON ym.CustomerID = ct.CustomerID
    GROUP BY ym.CustomerID
)
SELECT 
    (yc.consumption_2012 - yc.consumption_2013) / yc.consumption_2012 AS consumption_decrease_rate
FROM YearlyConsumption yc;
------------------------------
question: Which gas station has the highest amount of revenue?
GT: SELECT GasStationID FROM transactions_1k GROUP BY GasStationID ORDER BY SUM(Price) DESC LIMIT 1
Pred: WITH StationRevenue AS (
    SELECT 
        t.GasStationID,
        SUM(t.Amount) AS TotalRevenue
    FROM 
        transactions_1k t
    GROUP BY 
        t.GasStationID
)
SELECT 
    sr.GasStationID,
    sr.TotalRevenue
FROM 
    StationRevenue sr
ORDER BY 
    sr.TotalRevenue DESC
LIMIT 1;
------------------------------
question: What is the percentage of "premium" against the overall segment in Country = "SVK"?
GT: SELECT CAST(SUM(IIF(Country = 'SVK' AND Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations
Pred: SELECT 
    CASE 
        WHEN Segment = 'Premium' THEN 'Premium'
        ELSE 'Other'
    END AS Segment,
    (CAST(SUM(CASE WHEN Segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS Percentage
FROM 
    gasstations
WHERE 
    Country = 'SVK'
GROUP BY 
    Segment;
------------------------------
question: What is the amount spent by customer "38508" at the gas stations? How much had the customer spent in January 2012?
GT: SELECT SUM(T1.Price) , SUM(IIF(T3.Date = '201201', T1.Price, 0)) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.CustomerID = '38508'
Pred: SELECT SUM(Amount) AS TotalSpent
FROM transactions_1k
WHERE CustomerID = 38508 AND Date = '201201';
------------------------------
question: Which are the top five best selling products? Please state the full name of them.
GT: SELECT T2.Description FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Amount DESC LIMIT 5
Pred: WITH ProductSales AS (
    SELECT 
        p.ProductID,
        p.Description,
        SUM(t.Amount) AS total_sales
    FROM 
        products p
    JOIN 
        transactions_1k t ON p.ProductID = t.ProductID
    GROUP BY 
        p.ProductID, p.Description
),
RankedProducts AS (
    SELECT 
        ps.ProductID,
        ps.Description,
        ps.total_sales,
        RANK() OVER (ORDER BY ps.total_sales DESC) AS sales_rank
    FROM 
        ProductSales ps
)
SELECT 
    rp.Description
FROM 
    RankedProducts rp
WHERE 
    rp.sales_rank <= 5;
------------------------------
question: Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used?
GT: SELECT T2.CustomerID, SUM(T2.Price / T2.Amount), T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = ( SELECT CustomerID FROM yearmonth ORDER BY Consumption DESC LIMIT 1 ) GROUP BY T2.CustomerID, T1.Currency
Pred: WITH CustomerSpending AS (
    SELECT 
        t.CustomerID,
        SUM(t.Amount) AS total_amount,
        SUM(t.Price) AS total_price
    FROM transactions_1k t
    GROUP BY t.CustomerID
),
TopSpendingCustomer AS (
    SELECT 
        CustomerID,
        total_amount,
        total_price,
        ROW_NUMBER() OVER (ORDER BY total_amount DESC) AS rank
    FROM CustomerSpending
)
SELECT 
    tsc.CustomerID,
    tsc.total_price / tsc.total_amount AS average_price_per_item,
    c.Currency
FROM TopSpendingCustomer tsc
JOIN customers c ON tsc.CustomerID = c.CustomerID
WHERE tsc.rank = 1;
------------------------------
question: For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012.
GT: SELECT T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Price / T1.Amount > 29.00 AND T1.ProductID = 5 AND T2.Date = '201208'
Pred: WITH FilteredTransactions AS (
    SELECT 
        t.CustomerID,
        t.Price / t.Amount AS PricePerUnit
    FROM 
        transactions_1k t
    WHERE 
        t.ProductID = 5 AND
        t.Price / t.Amount > 29.00
)
SELECT 
    ft.CustomerID,
    CASE 
        WHEN ym.Consumption > 100 THEN 'High'
        WHEN ym.Consumption BETWEEN 50 AND 100 THEN 'Medium'
        ELSE 'Low'
    END AS ConsumptionStatus
FROM 
    FilteredTransactions ft
JOIN 
    yearmonth ym ON ft.CustomerID = ym.CustomerID
WHERE 
    ym.Date = '201208';
------------------------------
EX Accuracy (greedy search): 0.5286831812255541
{'': 0.5286831812255541}
skip  pass at k and major voting
100%|##########| 1/1 [05:17<00:00, 317.32s/it]100%|##########| 1/1 [05:17<00:00, 317.32s/it]
